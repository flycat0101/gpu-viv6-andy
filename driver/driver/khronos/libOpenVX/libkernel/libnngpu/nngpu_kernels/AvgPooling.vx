__kernel void gpuPooling_AvgNoPadFP32(__read_only image2d_array_t   input,
                                      int filterX,
                                      int filterY,
                                      int strideX,
                                      int strideY,
                                      __write_only image2d_array_t  output)
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    float4 tmpOut = {0.0};
    int i, j, count = 0;

    for(j = 0; j < filterY; j++)
    {
        for(i = 0; i < filterX; i++)
        {
            tmpOut += read_imagef(input, (int4)(x*strideX+i, y*strideY+j, z, 0));
            count++;
        }
    }

    tmpOut = tmpOut/count;

    write_imagef(output, (int4)(x, y, z, 0), tmpOut);
}

__kernel void gpuPooling_AvgNoPadQuant8(__read_only image2d_array_t   input,
                                      int   filterX,
                                      int   filterY,
                                      int   strideX,
                                      int   strideY,
                                      float scaleIn,
                                      float scaleOut,
                                      int   zeroPointIn,
                                      int   zeroPointOut,
                                      __write_only image2d_array_t  output)
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    float4 tmpOut = {0.0};
    int i, j, count = 0;
    uint4 tmp;

    for(j = 0; j < filterY; j++)
    {
        for(i = 0; i < filterX; i++)
        {
            tmp = read_imageui(input, (int4)(x*strideX+i, y*strideY+j, z, 0));
            tmpOut.x += (convert_int(tmp.x-zeroPointIn))*scaleIn;
            count++;
        }
    }

    tmpOut.x = tmpOut.x/count;
    tmp.x = floor(tmpOut.x*scaleOut + zeroPointOut + 0.5);

    write_imageui(output, (int4)(x, y, z, 0), tmp);
}

__kernel void gpuPooling_AvgPadFP32(__read_only image2d_array_t   input,
                                      int filterX,
                                      int filterY,
                                      int strideX,
                                      int strideY,
                                      int padX,
                                      int padY,
                                      __write_only image2d_array_t  output)
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int coordinX = x*strideX - padX;
    int coordinY = y*strideY - padY;
    int z = get_global_id(2);
    float4 tmpOut = {0.0};
    int inWidth = get_image_width(input);
    int inHeight = get_image_height(input);
    int iStart, iEnd, jStart, jEnd, count = 0;
    int w, h;

    iStart = max(coordinX, 0);
    iEnd   = min(coordinX+filterX, inWidth);
    jStart = max(coordinY, 0);
    jEnd   = min(coordinY+filterY, inHeight);

    for(h = jStart; h < jEnd; h++)
    {
        for(w = iStart; w < iEnd; w++)
        {
            tmpOut += read_imagef(input, (int4)(w, h, z, 0));
            count++;
        }
    }

    tmpOut = tmpOut/count;

    write_imagef(output, (int4)(x, y, z, 0), tmpOut);
}

__kernel void gpuPooling_AvgPadQuant8(__read_only image2d_array_t   input,
                                      int   filterX,
                                      int   filterY,
                                      int   strideX,
                                      int   strideY,
                                      float scaleIn,
                                      float scaleOut,
                                      int   zeroPointIn,
                                      int   zeroPointOut,
                                      int   padX,
                                      int   padY,
                                      __write_only image2d_array_t  output)
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int coordinX = x*strideX - padX;
    int coordinY = y*strideY - padY;
    float4 tmpOut = {0.0};
    int inWidth = get_image_width(input);
    int inHeight = get_image_height(input);
    int iStart, iEnd, jStart, jEnd, count = 0;
    int w, h;
    uint4 tmp;

    iStart = max(coordinX, 0);
    iEnd   = min(coordinX+filterX, inWidth);
    jStart = max(coordinY, 0);
    jEnd   = min(coordinY+filterY, inHeight);

    for(h = jStart; h < jEnd; h++)
    {
        for(w = iStart; w < iEnd; w++)
        {
            tmp = read_imageui(input, (int4)(w, h, z, 0));
            tmpOut.x += (convert_int(tmp.x-zeroPointIn))*scaleIn;
            count++;
        }
    }

    tmpOut.x = tmpOut.x/count;
    tmp.x = floor(tmpOut.x*scaleOut + zeroPointOut + 0.5);

    write_imageui(output, (int4)(x, y, z, 0), tmp);
}