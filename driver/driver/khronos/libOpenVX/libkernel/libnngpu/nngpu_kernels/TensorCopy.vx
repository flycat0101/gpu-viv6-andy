#pragma OPENCL EXTENSION CL_VIV_asm : enable
#pragma OPENCL EXTENSION cl_khr_fp16 : enable
#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#define TENSOR_COPY_SAME_4X_PROCESS(data_type, read_fun, write_fun) \
    data_type tmpOut = {0.0}; \
    tmpOut = read_fun(input, coord); \
    write_fun(output, coord, tmpOut);


#define TENSOR_COPY_SAME_4S_PROCESS(data_type, read_fun, write_fun) \
    data_type tmpOut = {0.0}; \
    tmpOut = read_fun(input, coord); \
    write_fun(output, coord, tmpOut.xxxx); \
    coord.x++; \
    write_fun(output, coord, tmpOut.yyyy); \
    coord.x++; \
    write_fun(output, coord, tmpOut.zzzz); \
    coord.x++; \
    write_fun(output, coord, tmpOut.wwww);

__kernel void gpuTensorCopy_Fp32_4X (
    __read_only image2d_array_t  input,
    __write_only image2d_array_t output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    TENSOR_COPY_SAME_4X_PROCESS(float4, read_imagef, write_imagef);
}

__kernel void gpuTensorCopy_Fp32_4X_2D (
    __read_only image2d_t  input,
    __write_only image2d_t output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    TENSOR_COPY_SAME_4X_PROCESS(float4, read_imagef, write_imagef);
}

__kernel void gpuTensorCopy_Fp32_4S (
    __read_only image2d_array_t  input,
    __write_only image2d_array_t output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    TENSOR_COPY_SAME_4S_PROCESS(float4, read_imagef, write_imagef);
}

__kernel void gpuTensorCopy_Fp32_4S_2D (
    __read_only image2d_t  input,
    __write_only image2d_t output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    TENSOR_COPY_SAME_4S_PROCESS(float4, read_imagef, write_imagef);
}


__kernel void gpuTensorCopy_INT32_4X (
    __read_only image2d_array_t  input,
    __write_only image2d_array_t output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    TENSOR_COPY_SAME_4X_PROCESS(int4, read_imagei, write_imagei);
}

__kernel void gpuTensorCopy_INT32_4X_2D (
    __read_only image2d_t  input,
    __write_only image2d_t output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    TENSOR_COPY_SAME_4X_PROCESS(int4, read_imagei, write_imagei);
}

__kernel void gpuTensorCopy_INT32_4S (
    __read_only image2d_array_t  input,
    __write_only image2d_array_t output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    TENSOR_COPY_SAME_4S_PROCESS(int4, read_imagei, write_imagei);
}

__kernel void gpuTensorCopy_INT32_4S_2D (
    __read_only image2d_t  input,
    __write_only image2d_t output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    TENSOR_COPY_SAME_4S_PROCESS(int4, read_imagei, write_imagei);
}


__kernel void gpuTensorCopy_8Bto8B_4X (
    __read_only image2d_array_t  input,
    __write_only image2d_array_t output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    TENSOR_COPY_SAME_4X_PROCESS(uint4, read_imageui, write_imageui);
}

__kernel void gpuTensorCopy_8Bto8B_4X_2D (
    __read_only image2d_t  input,
    __write_only image2d_t output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    TENSOR_COPY_SAME_4X_PROCESS(uint4, read_imageui, write_imageui);
}

__kernel void gpuTensorCopy_8Bto8B_4S (
    __read_only image2d_array_t  input,
    __write_only image2d_array_t output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    TENSOR_COPY_SAME_4S_PROCESS(uint4, read_imageui, write_imageui);
}

__kernel void gpuTensorCopy_8Bto8B_4S_2D (
    __read_only image2d_t  input,
    __write_only image2d_t output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    TENSOR_COPY_SAME_4S_PROCESS(uint4, read_imageui, write_imageui);
}

#define TENSOR_COPY_QUANT8_4X_PROCESS() \
    uint4 tmp = {0}; \
    tmp = read_imageui(input, coord); \
    tmp = convert_uint4(convert_float4(tmp) * scale + tail); \
    write_imageui(output, coord, tmp);


#define TENSOR_COPY_QUANT8_4S_PROCESS() \
    uint4 tmp = {0}; \
    tmp = read_imageui(input, coord); \
    tmp = convert_uint4(convert_float4(tmp) * scale + tail); \
    write_imageui(output, coord, tmp.xxxx); \
    coord.x++; \
    write_imageui(output, coord, tmp.yyyy); \
    coord.x++; \
    write_imageui(output, coord, tmp.zzzz); \
    coord.x++; \
    write_imageui(output, coord, tmp.wwww);

__kernel void gpuTensorCopy_Quant8_4X (__read_only image2d_array_t  input,
                                      __write_only image2d_array_t  output,
                                                             float  scale,
                                                             float  tail)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    TENSOR_COPY_QUANT8_4X_PROCESS();
}

__kernel void gpuTensorCopy_Quant8_4X_2D (__read_only image2d_t  input,
                                         __write_only image2d_t  output,
                                                          float  scale,
                                                          float  tail)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    TENSOR_COPY_QUANT8_4X_PROCESS();
}

__kernel void gpuTensorCopy_Quant8_4S (__read_only image2d_array_t  input,
                                      __write_only image2d_array_t  output,
                                                             float  scale,
                                                             float  tail)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    TENSOR_COPY_QUANT8_4S_PROCESS();
}

__kernel void gpuTensorCopy_Quant8_4S_2D (__read_only image2d_t  input,
                                         __write_only image2d_t  output,
                                                          float  scale,
                                                          float  tail)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    TENSOR_COPY_QUANT8_4S_PROCESS();
}

#define TENSOR_COPY_Q8TOFP32_4X_PROCESS() \
    uint4 tmpIn = {0}; \
    float4 tmp = {0.0}; \
    tmpIn = read_imageui(input, coord); \
    tmp = (convert_float4(tmpIn) - zp) * scale; \
    write_imagef(output, coord, tmp);


#define TENSOR_COPY_Q8TOFP32_4S_PROCESS() \
    uint4 tmpIn = {0}; \
    float4 tmp = {0.0}; \
    tmpIn = read_imageui(input, coord); \
    tmp = (convert_float4(tmpIn) - zp )* scale; \
    write_imagef(output, coord, tmp.xxxx); \
    coord.x++; \
    write_imagef(output, coord, tmp.yyyy); \
    coord.x++; \
    write_imagef(output, coord, tmp.zzzz); \
    coord.x++; \
    write_imagef(output, coord, tmp.wwww);

__kernel void gpuTensorCopy_Q8toFP32_4X (__read_only image2d_array_t  input,
                                                          float       scale,
                                                          float       zp,
                                        __write_only image2d_array_t  output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    TENSOR_COPY_Q8TOFP32_4X_PROCESS();
}

__kernel void gpuTensorCopy_Q8toFP32_4X_2D (__read_only image2d_t  input,
                                                          float    scale,
                                                          float    zp,
                                           __write_only image2d_t  output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    TENSOR_COPY_Q8TOFP32_4X_PROCESS();
}

__kernel void gpuTensorCopy_Q8toFP32_4S (__read_only image2d_array_t  input,
                                                          float       scale,
                                                          float       zp,
                                        __write_only image2d_array_t  output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    TENSOR_COPY_Q8TOFP32_4S_PROCESS();
}

__kernel void gpuTensorCopy_Q8toFP32_4S_2D (__read_only image2d_t  input,
                                                          float    scale,
                                                          float    zp,
                                           __write_only image2d_t  output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    TENSOR_COPY_Q8TOFP32_4S_PROCESS();
}



#define TENSOR_COPY_FP32TOQ8_4X_PROCESS() \
    float4 tmpIn = {0.0}; \
    uint4 tmp = {0}; \
    tmpIn = read_imagef(input, coord); \
    tmp   = convert_uint4(tmpIn * scale + zp); \
    write_imageui(output, coord, tmp);


#define TENSOR_COPY_FP32TOQ8_4S_PROCESS() \
    float4 tmpIn = {0.0}; \
    uint4 tmp = {0}; \
    tmpIn = read_imagef(input, coord); \
    tmp   = convert_uint4(tmpIn * scale + zp); \
    write_imageui(output, coord, tmp.xxxx); \
    coord.x++; \
    write_imageui(output, coord, tmp.yyyy); \
    coord.x++; \
    write_imageui(output, coord, tmp.zzzz); \
    coord.x++; \
    write_imageui(output, coord, tmp.wwww);

__kernel void gpuTensorCopy_FP32toQ8_4X (__read_only image2d_array_t  input,
                                                          float       scale,
                                                          float       zp,
                                        __write_only image2d_array_t  output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    TENSOR_COPY_FP32TOQ8_4X_PROCESS();
}

__kernel void gpuTensorCopy_FP32toQ8_4X_2D (__read_only image2d_t  input,
                                                          float    scale,
                                                          float    zp,
                                           __write_only image2d_t  output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    TENSOR_COPY_FP32TOQ8_4X_PROCESS();
}

__kernel void gpuTensorCopy_FP32toQ8_4S (__read_only image2d_array_t  input,
                                                          float       scale,
                                                          float       zp,
                                        __write_only image2d_array_t  output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    TENSOR_COPY_FP32TOQ8_4S_PROCESS();
}

__kernel void gpuTensorCopy_FP32toQ8_4S_2D (__read_only image2d_t  input,
                                                          float    scale,
                                                          float    zp,
                                           __write_only image2d_t  output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    TENSOR_COPY_FP32TOQ8_4S_PROCESS();
}


#define TENSOR_COPY_I16INT32_4X_PROCESS() \
    int4 tmp = {0}; \
    tmp = read_imagei(input, coord); \
    tmp = convert_int4(convert_float4(tmp) * scale + 0.5); \
    write_imagei(output, coord, tmp);


#define TENSOR_COPY_I16INT32_4S_PROCESS() \
    int4 tmp = {0}; \
    tmp = read_imagei(input, coord); \
    tmp = convert_int4(convert_float4(tmp) * scale + 0.5); \
    write_imagei(output, coord, tmp.xxxx); \
    coord.x++; \
    write_imagei(output, coord, tmp.yyyy); \
    coord.x++; \
    write_imagei(output, coord, tmp.zzzz); \
    coord.x++; \
    write_imagei(output, coord, tmp.wwww);

__kernel void gpuTensorCopy_I16_INT32_4X (__read_only image2d_array_t  input,
                                          __write_only image2d_array_t  output,
                                                            float       scale)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    TENSOR_COPY_I16INT32_4X_PROCESS();
}

__kernel void gpuTensorCopy_I16_INT32_4X_2D (__read_only image2d_t  input,
                                             __write_only image2d_t  output,
                                                         float       scale)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    TENSOR_COPY_I16INT32_4X_PROCESS();
}

__kernel void gpuTensorCopy_I16_INT32_4S (__read_only image2d_array_t  input,
                                          __write_only image2d_array_t  output,
                                                            float       scale)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    TENSOR_COPY_I16INT32_4S_PROCESS();
}

__kernel void gpuTensorCopy_I16_INT32_4S_2D (__read_only image2d_t  input,
                                             __write_only image2d_t  output,
                                                         float       scale)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    TENSOR_COPY_I16INT32_4S_PROCESS();
}

inline uchar* get_image2D_array_ptr(image2d_array_t  input)
{
    int8 desc;
    _viv_asm(COPY, desc, input, sizeof(desc));
    uchar *src_ptr = (uchar*)desc.s0;

    return src_ptr;
}

__kernel void gpuTensorCopy_FP32toFP16_4X (
    __read_only image2d_array_t  input,
    __write_only image2d_array_t output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    float4 src = read_imagef(input, coord);
    half4 dst;
    _viv_asm(CONV, dst, src);
    ushort4 result;
    _viv_asm(COPY, result, dst, 16);

    uchar *output_data_ptr = get_image2D_array_ptr(output) + coord.y * get_image_width(output) * 2 + coord.x * 2;

    vstore4(result, 0, (ushort*)output_data_ptr);
}

__kernel void gpuTensorCopy_FP32toFP16_4X_2D (
    __read_only image2d_t        input,
    __write_only image2d_array_t output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    float4 src = read_imagef(input, coord);
    half4 dst;
    _viv_asm(CONV, dst, src);
    ushort4 result;
    _viv_asm(COPY, result, dst, 16);

    uchar *output_data_ptr = get_image2D_array_ptr(output) + coord.y * get_image_width(output) * 2 + coord.x * 2;

    vstore4(result, 0, (ushort*)output_data_ptr);
}

__kernel void gpuTensorCopy_FP32toFP16_4S (
    __read_only image2d_array_t  input,
    __write_only image2d_array_t output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    float4 src = read_imagef(input, coord);
    half4 dst;
    _viv_asm(CONV, dst, src);
    ushort4 result;
    _viv_asm(COPY, result, dst, 16);

    uchar *output_data_ptr = get_image2D_array_ptr(output) + coord.y * get_image_width(output) * 2 + coord.x * 2;

    ((ushort*)output_data_ptr)[0] = result.x;
    ((ushort*)output_data_ptr)[1] = result.y;
    ((ushort*)output_data_ptr)[2] = result.z;
    ((ushort*)output_data_ptr)[3] = result.w;
}

__kernel void gpuTensorCopy_FP32toFP16_4S_2D (
    __read_only image2d_t        input,
    __write_only image2d_array_t output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));
    float4 src = read_imagef(input, coord);
    half4 dst;
    _viv_asm(CONV, dst, src);
    ushort4 result;
    _viv_asm(COPY, result, dst, 16);

    uchar *output_data_ptr = get_image2D_array_ptr(output) + coord.y * get_image_width(output) * 2 + coord.x * 2;

    ((ushort*)output_data_ptr)[0] = result.x;
    ((ushort*)output_data_ptr)[1] = result.y;
    ((ushort*)output_data_ptr)[2] = result.z;
    ((ushort*)output_data_ptr)[3] = result.w;
}

#define DATA_CONVERT_TO_INT32_2D_4X(name, image_load_inst, input_type) \
__kernel void gpuTensorCopy_##name##toI32_2D_4X ( \
    __read_only  image2d_t input, \
    __write_only image2d_t output, \
                  float    scale, \
                  float    tail) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
    input_type src = image_load_inst(input, coord); \
 \
    float4 data = convert_float4(src) * scale + tail; \
    int4 dst = convert_int4(data); \
 \
    write_imagei(output, coord, dst); \
}
DATA_CONVERT_TO_INT32_2D_4X(U8, read_imageui, uint4)
DATA_CONVERT_TO_INT32_2D_4X(F32, read_imagef, float4)

#define DATA_CONVERT_TO_INT32_2D_4S(name, image_load_inst, input_type) \
__kernel void gpuTensorCopy_##name##toI32_2D_4S ( \
    __read_only  image2d_t input, \
    __write_only image2d_t output, \
                  float    scale, \
                  float    tail) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
    input_type src = image_load_inst(input, coord); \
 \
    float4 data = convert_float4(src) * scale + tail; \
    int4 dst = convert_int4(data); \
 \
    write_imagei(output, coord, dst.xxxx); \
    coord.x++; \
    write_imagei(output, coord, dst.yyyy); \
    coord.x++; \
    write_imagei(output, coord, dst.zzzz); \
    coord.x++; \
    write_imagei(output, coord, dst.wwww); \
}
DATA_CONVERT_TO_INT32_2D_4S(U8, read_imageui, uint4)
DATA_CONVERT_TO_INT32_2D_4S(F32, read_imagef, float4)

#define DATA_CONVERT_TO_INT32(name, image_load_inst, input_type) \
__kernel void gpuTensorCopy_##name##toI32 ( \
    __read_only  image2d_array_t input, \
    __write_only image2d_array_t output, \
                  float    scale, \
                  float    tail) \
{ \
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), get_global_id(2)); \
    input_type src = image_load_inst(input, coord); \
 \
    float4 data = convert_float4(src) * scale + tail; \
    int4 dst = convert_int4(data); \
 \
    write_imagei(output, coord, dst); \
}
DATA_CONVERT_TO_INT32(U8, read_imageui, uint4)
DATA_CONVERT_TO_INT32(F32, read_imagef, float4)


