__kernel void gpuSoftMax_FP32
    (
    __read_only     image2d_array_t input,
    float                           scale,
    __write_only     image2d_array_t output
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int width = get_image_width(input);
    int height = get_image_height(input);
    int depth = get_image_array_size(input);
    int4 coord_in = (int4)(0, 0, 0, 0);
    float maxValue = ((float) -3.4028235e+038);
    int4 coord = (int4)(x, y, z, 0);
    float4 src, dst = {0.0};

    for(int k = 0; k < depth; k++)
    {
        for(int j = 0; j < height; j++)
        {
            for(int i = 0; i < width; i++)
            {
                src = read_imagef(input, coord_in);
                maxValue = fmax(src.x, maxValue);
                coord_in.x++;
            }
            coord_in.x = 0;
            coord_in.y++;
        }
        coord_in.x = 0;
        coord_in.y = 0;
        coord_in.z++;
    }

    src = read_imagef(input, coord);
    dst.x = exp2((src.x-maxValue)*scale);
    write_imagef(output, coord, dst);
}

__kernel void gpuSoftMax_Dim2FP32
    (
    __read_only     image2d_array_t input,
    float                           scale,
    __write_only     image2d_array_t output
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int width = get_image_width(input);
    int4 coord_in = (int4)(0, 0, 0, 0);
    float maxValue = ((float) -3.4028235e+038);
    int4 coord = (int4)(x, y, z, 0);
    float4 src, dst = {0.0};

    for(int i = 0; i < width; i++)
    {
        src = read_imagef(input, coord_in);
        maxValue = fmax(src.x, maxValue);
        coord_in.x++;
    }

    src = read_imagef(input, coord);
    dst.x = exp2((src.x-maxValue)*scale);
    write_imagef(output, coord, dst);
}


__kernel void gpuSoftMax_Quant8
    (
    __read_only     image2d_array_t input,
    float                           scale,
    float                           scaleIn,
    int                             zpIn,
    __write_only     image2d_array_t output
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord = (int4)(x, y, z, 0);
    int width = get_image_width(input);
    int height = get_image_height(input);
    int depth = get_image_array_size(input);
    uint4 src, dst = {0};
    int4 coord_in = (int4)(0, 0, 0, 0);
    float tmpOut, maxValue= (convert_int(-zpIn))*scaleIn, outPixel;

    for(int k = 0; k < depth; k++)
    {
        for(int j = 0; j < height; j++)
        {
            for(int i = 0; i < width; i++)
            {
                src = read_imageui(input, coord_in);
                tmpOut = (convert_int(src.x)-zpIn)*scaleIn;
                maxValue = fmax(tmpOut, maxValue);
                coord_in.x++;
            }
            coord_in.x = 0;
            coord_in.y++;
        }
        coord_in.x = 0;
        coord_in.y = 0;
        coord_in.z++;
    }

    src = read_imageui(input, coord);
    tmpOut = (convert_int(src.x)-zpIn)*scaleIn;
    outPixel = exp2((tmpOut-maxValue)*scale);
    dst.x = floor(outPixel*256.0 + 0.5);
    write_imageui(output, coord, dst);
}

__kernel void gpuSoftMax_Dim2Quant8
    (
    __read_only     image2d_array_t input,
    float                           scale,
    float                           scaleIn,
    int                             zpIn,
    __write_only     image2d_array_t output
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    int4 coord = (int4)(x, y, z, 0);
    int width = get_image_width(input);
    uint4 src, dst = {0};
    int4 coord_in = (int4)(0, 0, 0, 0);
    float tmpOut, maxValue= (convert_int(-zpIn))*scaleIn, outPixel;

    for(int i = 0; i < width; i++)
    {
        src = read_imageui(input, coord_in);
        tmpOut = (convert_int(src.x)-zpIn)*scaleIn;
        maxValue = fmax(tmpOut, maxValue);
        coord_in.x++;
    }

    src = read_imageui(input, coord);
    tmpOut = (convert_int(src.x)-zpIn)*scaleIn;
    outPixel = exp2((tmpOut-maxValue)*scale);
    dst.x = floor(outPixel*256.0 + 0.5);
    write_imageui(output, coord, dst);
}
