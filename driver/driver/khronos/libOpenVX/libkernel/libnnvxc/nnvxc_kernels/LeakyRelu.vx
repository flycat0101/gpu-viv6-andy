
#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits UniFP16Mul_dp2x8;
_viv_uniform VXC_512Bits UniS8xFp16toFp16_dp2x8;
_viv_uniform float in_scale;
_viv_uniform float out_scale;
__kernel void vxcLeakyRelu_Fp16toFp16Tensor(
    __read_only image2d_array_t   input,
    float   alpha,
    __write_only image2d_array_t   output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    half alpha_fp16;
    vxc_short8 img_s16;
    vxc_half8 img_fp16, val_fp16;

    VXC_ReadImage2DArray(img_s16, input, coord, VXC_5BITOFFSET_XY(0,0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(CONV, alpha_fp16, alpha);
    _viv_asm(COPY, img_fp16, img_s16, 16);
    VXC_DP2x8(val_fp16, img_fp16, alpha_fp16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), UniFP16Mul_dp2x8);
    VXC_Clamp_Half(img_fp16, img_fp16, val_fp16, img_fp16, VXC_MODIFIER_CLAMP(0, 7, 0, 0));
    _viv_asm(COPY, img_s16, img_fp16, 16);
    VXC_WriteImage2DArray(output, coord, img_s16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
__kernel void vxcLeakyRelu_Fp16toInt8Tensor(
    __read_only image2d_array_t   input,
    float   alpha,
    __write_only image2d_array_t   output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    half alpha_fp16, scale_fp16;
    vxc_short8 img_s16;
    vxc_half8 img_fp16, val_fp16;
    vxc_char8 val_s8;

    VXC_ReadImage2DArray(img_s16, input, coord, VXC_5BITOFFSET_XY(0,0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(CONV, alpha_fp16, alpha);
    _viv_asm(COPY, img_fp16, img_s16, 16);
    VXC_DP2x8(val_fp16, img_fp16, alpha_fp16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), UniFP16Mul_dp2x8);
    VXC_Clamp_Half(img_fp16, img_fp16, val_fp16, img_fp16, VXC_MODIFIER_CLAMP(0, 7, 0, 0));
    _viv_asm(CONV, scale_fp16, out_scale);
    VXC_DP2x8(val_s8, img_fp16, scale_fp16, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), UniFP16Mul_dp2x8);
    VXC_WriteImage2DArray(output, coord, val_s8, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
__kernel void vxcLeakyRelu_Fp16toFp16Image(
    __read_only image2d_array_t   input,
    float   alpha,
    __write_only image2d_array_t   output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));

    half alpha_fp16;
    vxc_short8 img_s16;
    vxc_half8 img_fp16, val_fp16;

    VXC_ReadImage(img_s16, input, coord, VXC_5BITOFFSET_XY(0,0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(CONV, alpha_fp16, alpha);
    _viv_asm(COPY, img_fp16, img_s16, 16);
    VXC_DP2x8(val_fp16, img_fp16, alpha_fp16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), UniFP16Mul_dp2x8);
    VXC_Clamp_Half(img_fp16, img_fp16, val_fp16, img_fp16, VXC_MODIFIER_CLAMP(0, 7, 0, 0));
    _viv_asm(COPY, img_s16, img_fp16, 16);
    VXC_WriteImage(output, coord, img_s16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
__kernel void vxcLeakyRelu_Fp16toInt8Image(
    __read_only image2d_array_t   input,
    float   alpha,
    __write_only image2d_array_t   output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));

    half alpha_fp16,scale_fp16;
    vxc_short8 img_s16;
    vxc_half8 img_fp16, val_fp16;
    vxc_char8 val_s8;

    VXC_ReadImage(img_s16, input, coord, VXC_5BITOFFSET_XY(0,0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(CONV, alpha_fp16, alpha);
    _viv_asm(COPY, img_fp16, img_s16, 16);
    VXC_DP2x8(val_fp16, img_fp16, alpha_fp16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), UniFP16Mul_dp2x8);
    VXC_Clamp_Half(img_fp16, img_fp16, val_fp16, img_fp16, VXC_MODIFIER_CLAMP(0, 7, 0, 0));
    _viv_asm(CONV, scale_fp16, out_scale);
    VXC_DP2x8(val_s8, img_fp16, scale_fp16, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), UniFP16Mul_dp2x8);
    VXC_WriteImage(output, coord, val_s8, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
__kernel void vxcLeakyRelu_Int8toFp16Tensor(
    __read_only image2d_array_t   input,
    float   alpha,
    __write_only image2d_array_t   output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    vxc_char8 img_s8;
    vxc_half8 img_fp16, val_fp16;
    half scale_fp16, alpha_fp16;
    vxc_short8 val_s16;

    VXC_ReadImage2DArray(img_s8, input, coord, VXC_5BITOFFSET_XY(0,0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(CONV, scale_fp16, in_scale);
    _viv_asm(CONV, alpha_fp16, alpha);

    VXC_DP2x8(img_fp16, img_s8, scale_fp16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), UniS8xFp16toFp16_dp2x8);
    VXC_DP2x8(val_fp16, img_fp16, alpha_fp16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), UniFP16Mul_dp2x8);
    VXC_Clamp_Half(img_fp16, img_fp16, val_fp16, img_fp16, VXC_MODIFIER_CLAMP(0, 7, 0, 0));
    _viv_asm(COPY, val_s16, img_fp16, 16);
    VXC_WriteImage2DArray(output, coord, val_s16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
__kernel void vxcLeakyRelu_Int8toInt8Tensor(
    __read_only image2d_array_t   input,
    float   alpha,
    __write_only image2d_array_t   output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    vxc_char8 img_s8;
    vxc_half8 img_fp16, val_fp16;
    half scale_fp16, alpha_fp16;

    VXC_ReadImage2DArray(img_s8, input, coord, VXC_5BITOFFSET_XY(0,0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(CONV, scale_fp16, in_scale);
    _viv_asm(CONV, alpha_fp16, alpha);

    VXC_DP2x8(img_fp16, img_s8, scale_fp16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), UniS8xFp16toFp16_dp2x8);
    VXC_DP2x8(val_fp16, img_fp16, alpha_fp16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), UniFP16Mul_dp2x8);
    VXC_Clamp_Half(img_fp16, img_fp16, val_fp16, img_fp16, VXC_MODIFIER_CLAMP(0, 7, 0, 0));
    _viv_asm(CONV, scale_fp16, out_scale);
    VXC_DP2x8(img_s8, img_fp16, scale_fp16, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), UniFP16Mul_dp2x8);
    VXC_WriteImage2DArray(output, coord, img_s8, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
__kernel void vxcLeakyRelu_Int8toFp16Image(
    __read_only image2d_array_t    input,
    float    alpha,
    __write_only image2d_array_t    output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));

    vxc_char8 img_s8;
    vxc_half8 img_fp16, val_fp16;
    half scale_fp16, alpha_fp16;
    vxc_short8 val_s16;

    VXC_ReadImage(img_s8, input, coord, VXC_5BITOFFSET_XY(0,0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(CONV, scale_fp16, in_scale);
    _viv_asm(CONV, alpha_fp16, alpha);

    VXC_DP2x8(img_fp16, img_s8, scale_fp16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), UniS8xFp16toFp16_dp2x8);
    VXC_DP2x8(val_fp16, img_fp16, alpha_fp16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), UniFP16Mul_dp2x8);
    VXC_Clamp_Half(img_fp16, img_fp16, val_fp16, img_fp16, VXC_MODIFIER_CLAMP(0, 7, 0, 0));
    _viv_asm(COPY, val_s16, img_fp16, 16);
    VXC_WriteImage(output, coord, val_s16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
__kernel void vxcLeakyRelu_Int8toInt8Image(
    __read_only image2d_array_t    input,
    float    alpha,
    __write_only image2d_array_t    output)
{
    int2 coord = (int2)(get_global_id(0), get_global_id(1));

    vxc_char8 img_s8;
    vxc_half8 img_fp16, val_fp16;
    half scale_fp16, alpha_fp16;

    VXC_ReadImage(img_s8, input, coord, VXC_5BITOFFSET_XY(0,0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(CONV, scale_fp16, in_scale);
    _viv_asm(CONV, alpha_fp16, alpha);

    VXC_DP2x8(img_fp16, img_s8, scale_fp16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 1), UniS8xFp16toFp16_dp2x8);
    VXC_DP2x8(val_fp16, img_fp16, alpha_fp16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), UniFP16Mul_dp2x8);
    VXC_Clamp_Half(img_fp16, img_fp16, val_fp16, img_fp16, VXC_MODIFIER_CLAMP(0, 7, 0, 0));
    _viv_asm(CONV, scale_fp16, out_scale);
    VXC_DP2x8(img_s8, img_fp16, scale_fp16, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), UniFP16Mul_dp2x8);
    VXC_WriteImage(output, coord, img_s8, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}
_viv_uniform float scaleInt16toInt16_In;
_viv_uniform float scaleInt16toInt16_Out;
_viv_uniform VXC_512Bits UniInt16toFloat4Lo_4x4;
_viv_uniform VXC_512Bits UniInt16toFloat4Hi_4x4;
_viv_uniform VXC_512Bits uniExtact16Bit_2x8;
vxc_float4 _leakyRelu_func(vxc_float4 x, float alpha)
{
    vxc_float4 y;
    y = alpha * x;
    return x > 0 ? x : y;
}
__kernel void vxcLeakyRelu_Int16 (
    __read_only image2d_array_t   input,
    float   alpha,
    __write_only image2d_array_t  output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_short8 src0, src1, src2, src3;
    vxc_float4 vec0, vec1;
    VXC_ReadImage2DArray(src0, input,  coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(src1, input,  coord, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(src2, input,  coord, VXC_5BITOFFSET_XY(0, 2), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(src3, input,  coord, VXC_5BITOFFSET_XY(0, 3), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    VXC_DP4x4(vec0, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Lo_4x4);
    VXC_DP4x4(vec1, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Hi_4x4);
    vec0 *= scaleInt16toInt16_In;
    vec1 *= scaleInt16toInt16_In;
    vec0 = _leakyRelu_func(vec0, alpha) * scaleInt16toInt16_Out;
    vec1 = _leakyRelu_func(vec1, alpha) * scaleInt16toInt16_Out;
    int4 dst0, dst1;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact16Bit_2x8);
    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord.y ++;

    VXC_DP4x4(vec0, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Lo_4x4);
    VXC_DP4x4(vec1, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Hi_4x4);
    vec0 *= scaleInt16toInt16_In;
    vec1 *= scaleInt16toInt16_In;
    vec0 = _leakyRelu_func(vec0, alpha) * scaleInt16toInt16_Out;
    vec1 = _leakyRelu_func(vec1, alpha) * scaleInt16toInt16_Out;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact16Bit_2x8);
    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord.y ++;

    VXC_DP4x4(vec0, src2, src2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Lo_4x4);
    VXC_DP4x4(vec1, src2, src2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Hi_4x4);
    vec0 *= scaleInt16toInt16_In;
    vec1 *= scaleInt16toInt16_In;
    vec0 = _leakyRelu_func(vec0, alpha) * scaleInt16toInt16_Out;
    vec1 = _leakyRelu_func(vec1, alpha) * scaleInt16toInt16_Out;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact16Bit_2x8);
    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord.y ++;

    VXC_DP4x4(vec0, src3, src3, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Lo_4x4);
    VXC_DP4x4(vec1, src3, src3, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Hi_4x4);
    vec0 *= scaleInt16toInt16_In;
    vec1 *= scaleInt16toInt16_In;
    vec0 = _leakyRelu_func(vec0, alpha) * scaleInt16toInt16_Out;
    vec1 = _leakyRelu_func(vec1, alpha) * scaleInt16toInt16_Out;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact16Bit_2x8);
    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}
__kernel void vxcLeakyRelu_Int16_2D (
    __read_only image2d_array_t   input,
    float   alpha,
    __write_only image2d_array_t  output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(1), get_global_id(1));

    vxc_short8 src0, src1, src2, src3, min, max;
    vxc_float4 vec0, vec1;
    VXC_ReadImage(src0, input,  coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input,  coord.xy, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src2, input,  coord.xy, VXC_5BITOFFSET_XY(0, 2), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src3, input,  coord.xy, VXC_5BITOFFSET_XY(0, 3), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    coord.zw += (int2)(1, 2);

    VXC_DP4x4(vec0, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Lo_4x4);
    VXC_DP4x4(vec1, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Hi_4x4);
    vec0 *= scaleInt16toInt16_In;
    vec1 *= scaleInt16toInt16_In;
    vec0 = _leakyRelu_func(vec0, alpha) * scaleInt16toInt16_Out;
    vec1 = _leakyRelu_func(vec1, alpha) * scaleInt16toInt16_Out;
    int4 dst0, dst1;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact16Bit_2x8);
    VXC_WriteImage(output, coord.xy, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord.y += 3;

    VXC_DP4x4(vec0, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Lo_4x4);
    VXC_DP4x4(vec1, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Hi_4x4);
    vec0 *= scaleInt16toInt16_In;
    vec1 *= scaleInt16toInt16_In;
    vec0 = _leakyRelu_func(vec0, alpha) * scaleInt16toInt16_Out;
    vec1 = _leakyRelu_func(vec1, alpha) * scaleInt16toInt16_Out;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact16Bit_2x8);
    VXC_WriteImage(output, coord.xz, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));

    VXC_DP4x4(vec0, src2, src2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Lo_4x4);
    VXC_DP4x4(vec1, src2, src2, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Hi_4x4);
    vec0 *= scaleInt16toInt16_In;
    vec1 *= scaleInt16toInt16_In;
    vec0 = _leakyRelu_func(vec0, alpha) * scaleInt16toInt16_Out;
    vec1 = _leakyRelu_func(vec1, alpha) * scaleInt16toInt16_Out;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact16Bit_2x8);
    VXC_WriteImage(output, coord.xw, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));

    VXC_DP4x4(vec0, src3, src3, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Lo_4x4);
    VXC_DP4x4(vec1, src3, src3, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), UniInt16toFloat4Hi_4x4);
    vec0 *= scaleInt16toInt16_In;
    vec1 *= scaleInt16toInt16_In;
    vec0 = _leakyRelu_func(vec0, alpha) * scaleInt16toInt16_Out;
    vec1 = _leakyRelu_func(vec1, alpha) * scaleInt16toInt16_Out;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact16Bit_2x8);
    VXC_WriteImage(output, coord.xy, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}
_viv_uniform VXC_512Bits uniUInt8toFp32Part0_4x4;
_viv_uniform VXC_512Bits uniUInt8toFp32Part1_4x4;
_viv_uniform VXC_512Bits uniExtact8Bit_2x8;
_viv_uniform float uint8scale_In;
_viv_uniform float uint8qscale_Out;
_viv_uniform int   uint8ZP_In;
_viv_uniform float uint8ZP_Out;
__kernel void vxcLeakyRelu_UInt8 (
    __read_only image2d_array_t   input,
    float   alpha,
    __write_only image2d_array_t  output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);
    vxc_uchar8 src0, src1, src2, src3;
    vxc_float4 vec0, vec1;
    VXC_ReadImage2DArray(src0, input,  coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(src1, input,  coord, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(src2, input,  coord, VXC_5BITOFFSET_XY(0, 2), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(src3, input,  coord, VXC_5BITOFFSET_XY(0, 3), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));

    vxc_uchar8 zeroPoint;
    _viv_asm(COPY, zeroPoint, uint8ZP_In, 4);
    VXC_DP4x4(vec0, src0, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part0_4x4);
    VXC_DP4x4(vec1, src0, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part1_4x4);
    vec0 *= uint8scale_In;
    vec1 *= uint8scale_In;
    vec0 = _leakyRelu_func(vec0, alpha) * uint8qscale_Out + uint8ZP_Out;
    vec1 = _leakyRelu_func(vec1, alpha) * uint8qscale_Out + uint8ZP_Out;
    int4 dst0, dst1;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);
    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord.y ++;

    VXC_DP4x4(vec0, src1, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part0_4x4);
    VXC_DP4x4(vec1, src1, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part1_4x4);
    vec0 *= uint8scale_In;
    vec1 *= uint8scale_In;
    vec0 = _leakyRelu_func(vec0, alpha) * uint8qscale_Out + uint8ZP_Out;
    vec1 = _leakyRelu_func(vec1, alpha) * uint8qscale_Out + uint8ZP_Out;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);
    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord.y ++;

    VXC_DP4x4(vec0, src2, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part0_4x4);
    VXC_DP4x4(vec1, src2, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part1_4x4);
    vec0 *= uint8scale_In;
    vec1 *= uint8scale_In;
    vec0 = _leakyRelu_func(vec0, alpha) * uint8qscale_Out + uint8ZP_Out;
    vec1 = _leakyRelu_func(vec1, alpha) * uint8qscale_Out + uint8ZP_Out;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);
    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord.y ++;

    VXC_DP4x4(vec0, src3, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part0_4x4);
    VXC_DP4x4(vec1, src3, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part1_4x4);
    vec0 *= uint8scale_In;
    vec1 *= uint8scale_In;
    vec0 = _leakyRelu_func(vec0, alpha) * uint8qscale_Out + uint8ZP_Out;
    vec1 = _leakyRelu_func(vec1, alpha) * uint8qscale_Out + uint8ZP_Out;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);
    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}
__kernel void vxcLeakyRelu_UInt8_2D (
    __read_only image2d_array_t   input,
    float   alpha,
    __write_only image2d_array_t  output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(1), get_global_id(1));
    vxc_uchar8 src0, src1, src2, src3;
    vxc_float4 vec0, vec1;
    VXC_ReadImage(src0, input,  coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src1, input,  coord.xy, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src2, input,  coord.xy, VXC_5BITOFFSET_XY(0, 2), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(src3, input,  coord.xy, VXC_5BITOFFSET_XY(0, 3), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    coord.zw += (int2)(1, 2);

    vxc_uchar8 zeroPoint;
    _viv_asm(COPY, zeroPoint, uint8ZP_In, 4);
    VXC_DP4x4(vec0, src0, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part0_4x4);
    VXC_DP4x4(vec1, src0, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part1_4x4);
    vec0 *= uint8scale_In;
    vec1 *= uint8scale_In;
    vec0 = _leakyRelu_func(vec0, alpha) * uint8qscale_Out + uint8ZP_Out;
    vec1 = _leakyRelu_func(vec1, alpha) * uint8qscale_Out + uint8ZP_Out;
    int4 dst0, dst1;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);
    VXC_WriteImage(output, coord.xy, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
    coord.y += 3;

    VXC_DP4x4(vec0, src1, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part0_4x4);
    VXC_DP4x4(vec1, src1, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part1_4x4);
    vec0 *= uint8scale_In;
    vec1 *= uint8scale_In;
    vec0 = _leakyRelu_func(vec0, alpha) * uint8qscale_Out + uint8ZP_Out;
    vec1 = _leakyRelu_func(vec1, alpha) * uint8qscale_Out + uint8ZP_Out;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);
    VXC_WriteImage(output, coord.xz, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));

    VXC_DP4x4(vec0, src2, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part0_4x4);
    VXC_DP4x4(vec1, src2, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part1_4x4);
    vec0 *= uint8scale_In;
    vec1 *= uint8scale_In;
    vec0 = _leakyRelu_func(vec0, alpha) * uint8qscale_Out + uint8ZP_Out;
    vec1 = _leakyRelu_func(vec1, alpha) * uint8qscale_Out + uint8ZP_Out;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);
    VXC_WriteImage(output, coord.xw, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));

    VXC_DP4x4(vec0, src3, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part0_4x4);
    VXC_DP4x4(vec1, src3, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part1_4x4);
    vec0 *= uint8scale_In;
    vec1 *= uint8scale_In;
    vec0 = _leakyRelu_func(vec0, alpha) * uint8qscale_Out + uint8ZP_Out;
    vec1 = _leakyRelu_func(vec1, alpha) * uint8qscale_Out + uint8ZP_Out;
    dst0 = convert_int4_rte(vec0);
    dst1 = convert_int4_rte(vec1);
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);
    VXC_WriteImage(output, coord.xy, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));
}
