#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits uniF16AddF16toF16_2x8;
__kernel void vxcTensor2DAdd_F16AddF16toF16(
    __read_only image2d_array_t   input0,
    __read_only image2d_array_t   input1,
    __write_only image2d_array_t  output)
{
    vxc_short8 vec0, vec1;
    vxc_half8  src0, src1, dst;
    int2 coord = (int2)(get_global_id(0), get_global_id(1));

    VXC_ReadImage(vec0, input0, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, vec0, 16);
    VXC_ReadImage(vec1, input1, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src1, vec1, 16);

    VXC_DP2x8(dst, src0, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniF16AddF16toF16_2x8);
    _viv_asm(COPY, vec0, dst, 16);
    VXC_WriteImage(output, coord, vec0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniFp16toFp32Part0_4x4;
_viv_uniform VXC_512Bits uniFp16toFp32Part1_4x4;
_viv_uniform VXC_512Bits uniExtractHalf8_2x8;
__kernel void vxcTensor2DAdd_F16AddF32toF16(
    __read_only image2d_array_t   input0,
    __read_only image2d_t   input1,
    __write_only image2d_array_t  output)
{
    vxc_short8 vec0, vec1;
    vxc_half8  src0, dst;
    vxc_float4 b0, b1, vectA, vectB;

    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), get_global_id(0));

    VXC_ReadImage(vec0, input0, coord.xy, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
    _viv_asm(COPY, src0, vec0, 16);

    coord.z += 4;
    b0 = read_imagef(input1, coord.xy);
    b1 = read_imagef(input1, coord.zy);

    VXC_DP4x4(vectA, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32Part0_4x4);
    VXC_DP4x4(vectB, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32Part1_4x4);
    vectA += b0;
    vectB += b1;

    half4 dst0, dst1;
    _viv_asm(CONV, dst0, vectA);
    _viv_asm(CONV, dst1, vectB);

    VXC_DP2x8(dst, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtractHalf8_2x8);
    _viv_asm(COPY, vec0, dst, 16);
    VXC_WriteImage(output, coord, vec0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));
}

_viv_uniform VXC_512Bits uniExtractInteger_2x8;
_viv_uniform float outputScale;
_viv_uniform float outputZP;
#define TENSOR_2D_ADD_F16ADDF32(out_type_name, dst_type) \
__kernel void vxcTensor2DAdd_F16AddF32to##out_type_name( \
    __read_only image2d_array_t   input0, \
    __read_only image2d_t   input1, \
    __write_only image2d_array_t  output) \
{ \
    vxc_short8 vec0, vec1; \
    vxc_half8  src0; \
    vxc_float4 b0, b1, vectA, vectB; \
 \
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(0), get_global_id(0)); \
 \
    VXC_ReadImage(vec0, input0, coord.xy, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    _viv_asm(COPY, src0, vec0, 16); \
 \
    coord.z += 4; \
    b0 = read_imagef(input1, coord.xy); \
    b1 = read_imagef(input1, coord.zy); \
 \
    VXC_DP4x4(vectA, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32Part0_4x4); \
    VXC_DP4x4(vectB, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniFp16toFp32Part1_4x4); \
    vectA = vectA + b0; \
    vectB = vectB + b1; \
    vectA = vectA * outputScale + outputZP; \
 \
    int4 dst0, dst1; \
    _viv_asm(CONV, dst0, vectA); \
    _viv_asm(CONV, dst1, vectB); \
 \
    dst_type dst; \
    VXC_DP2x8(dst, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtractHalf8_2x8); \
    VXC_WriteImage(output, coord, vec0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}

TENSOR_2D_ADD_F16ADDF32(I8,  vxc_char8)
TENSOR_2D_ADD_F16ADDF32(U8,  vxc_uchar8)
TENSOR_2D_ADD_F16ADDF32(I16, vxc_short8)
