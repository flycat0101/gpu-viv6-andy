#include "cl_viv_vx_ext.h"
_viv_uniform VXC_512Bits uniUInt8toFp32Part0_4x4;
_viv_uniform VXC_512Bits uniUInt8toFp32Part1_4x4;
_viv_uniform VXC_512Bits uniExtact8Bit_2x8;
_viv_uniform int4  packedMinData;
_viv_uniform int4  packedMaxData;
vxc_float4 _sigmoid_func(vxc_float4 x)
{
    x = exp2(-x);
    x += 1;
    return 1 / x;
}
vxc_float4 _tanh_func(vxc_float4 x)
{
    vxc_float4 y;
    x = exp2(-x);
    y = 1 + x;
    x = 1 - x;
    y = 1 / y;
    return x * y;
}
vxc_float4 _sqrt_func(vxc_float4 x)
{
    return sqrt(x);
}
vxc_float4 _rsqrt_func(vxc_float4 x)
{
    return rsqrt(x);
}
vxc_float4 _softRelu_func(vxc_float4 x)
{
    x = exp2(x);
    x += 1;
    x = log2(x);
    return x;
}

_viv_uniform VXC_512Bits uniU8MulAndPostShift_Lo_2x8;
_viv_uniform VXC_512Bits uniU8MulAndPostShift_Hi_2x8;
_viv_uniform int2 multAndoutZP;//[0:15] multiplier, [31:63] output zp
__kernel void vxcActivation_ReluUInt8(
    __read_only image2d_array_t   input,
    __write_only image2d_array_t  output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);

    vxc_uchar16 vec0, vec1, vec2, vec3, min, max, dst;
    VXC_ReadImage2DArray(vec0, input,  coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(vec1, input,  coord, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(vec2, input,  coord, VXC_5BITOFFSET_XY(0, 2), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage2DArray(vec3, input,  coord, VXC_5BITOFFSET_XY(0, 3), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst, vec0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Lo_2x8);
    VXC_DP2x8(dst, vec0, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Hi_2x8);
    _viv_asm(COPY, min, packedMinData, 16);
    _viv_asm(COPY, max, packedMaxData, 16);
    VXC_Clamp(dst, dst, min, max, VXC_MODIFIER_CLAMP(0, 15, 0, 0));
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
    coord.y ++;

    VXC_DP2x8(dst, vec1, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Lo_2x8);
    VXC_DP2x8(dst, vec1, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Hi_2x8);
    VXC_Clamp(dst, dst, min, max, VXC_MODIFIER_CLAMP(0, 15, 0, 0));
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
    coord.y ++;

    VXC_DP2x8(dst, vec2, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Lo_2x8);
    VXC_DP2x8(dst, vec2, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Hi_2x8);
    VXC_Clamp(dst, dst, min, max, VXC_MODIFIER_CLAMP(0, 15, 0, 0));
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
    coord.y ++;

    VXC_DP2x8(dst, vec3, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Lo_2x8);
    VXC_DP2x8(dst, vec3, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Hi_2x8);
    VXC_Clamp(dst, dst, min, max, VXC_MODIFIER_CLAMP(0, 15, 0, 0));
    VXC_WriteImage2DArray(output, coord, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}
__kernel void vxcActivation_ReluUInt8_2D (
    __read_only image2d_array_t   input,
    __write_only image2d_array_t  output)
{
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(1), get_global_id(1));

    vxc_uchar16 vec0, vec1, vec2, vec3, min, max, dst;
    VXC_ReadImage(vec0, input,  coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(vec1, input,  coord.xy, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(vec2, input,  coord.xy, VXC_5BITOFFSET_XY(0, 2), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    VXC_ReadImage(vec3, input,  coord.xy, VXC_5BITOFFSET_XY(0, 3), VXC_MODIFIER(0, 15, 0, VXC_RM_TowardZero, 0));
    coord.zw += (int2)(1, 2);

    vxc_ushort8 multiplier;
    _viv_asm(COPY, multiplier, multAndoutZP, 16);
    VXC_DP2x8(dst, vec0, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Lo_2x8);
    VXC_DP2x8(dst, vec0, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Hi_2x8);
    _viv_asm(COPY, min, packedMinData, 16);
    _viv_asm(COPY, max, packedMaxData, 16);
    VXC_Clamp(dst, dst, min, max, VXC_MODIFIER_CLAMP(0, 15, 0, 0));
    VXC_WriteImage(output, coord.xy, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
    coord.y += 3;

    VXC_DP2x8(dst, vec1, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Lo_2x8);
    VXC_DP2x8(dst, vec1, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Hi_2x8);
    VXC_Clamp(dst, dst, min, max, VXC_MODIFIER_CLAMP(0, 15, 0, 0));
    VXC_WriteImage(output, coord.xz, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));

    VXC_DP2x8(dst, vec2, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Lo_2x8);
    VXC_DP2x8(dst, vec2, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Hi_2x8);
    VXC_Clamp(dst, dst, min, max, VXC_MODIFIER_CLAMP(0, 15, 0, 0));
    VXC_WriteImage(output, coord.xw, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));

    VXC_DP2x8(dst, vec3, multiplier, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Lo_2x8);
    VXC_DP2x8(dst, vec3, multiplier, VXC_MODIFIER(8, 15, 0, VXC_RM_ToNearestEven, 1), uniU8MulAndPostShift_Hi_2x8);
    VXC_Clamp(dst, dst, min, max, VXC_MODIFIER_CLAMP(0, 15, 0, 0));
    VXC_WriteImage(output, coord.xy, dst, VXC_MODIFIER(0, 15, 0,VXC_RM_TowardZero, 0));
}
_viv_uniform float uint8scale_In;
_viv_uniform float uint8qscale_Out;
_viv_uniform int   uint8ZP_In;
_viv_uniform float uint8ZP_Out;
#define ACTIVATION_UINT8_FUNC(funName)   \
    __kernel void vxcActivation_##funName##_UInt8 (  \
    __read_only image2d_array_t   input, \
    __write_only image2d_array_t  output)\
{  \
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(2), 0);  \
    \
    vxc_uchar8 src0, src1, src2, src3;   \
    vxc_float4 vec0, vec1;\
    VXC_ReadImage2DArray(src0, input,  coord, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    VXC_ReadImage2DArray(src1, input,  coord, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    VXC_ReadImage2DArray(src2, input,  coord, VXC_5BITOFFSET_XY(0, 2), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    VXC_ReadImage2DArray(src3, input,  coord, VXC_5BITOFFSET_XY(0, 3), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    \
    vxc_uchar8 zeroPoint;\
    _viv_asm(COPY, zeroPoint, uint8ZP_In, 4);\
    VXC_DP4x4(vec0, src0, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part0_4x4);\
    VXC_DP4x4(vec1, src0, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part1_4x4);\
    vec0 *= uint8scale_In;\
    vec1 *= uint8scale_In;\
    vec0 = _##funName##_func(vec0) * uint8qscale_Out + uint8ZP_Out;   \
    vec1 = _##funName##_func(vec1) * uint8qscale_Out + uint8ZP_Out;   \
    int4 dst0, dst1;    \
    dst0 = convert_int4_rte(vec0);   \
    dst1 = convert_int4_rte(vec1);   \
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);\
    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));\
    coord.y ++;\
    \
    VXC_DP4x4(vec0, src1, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part0_4x4);\
    VXC_DP4x4(vec1, src1, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part1_4x4);\
    vec0 *= uint8scale_In;\
    vec1 *= uint8scale_In;\
    vec0 = _##funName##_func(vec0) * uint8qscale_Out + uint8ZP_Out;   \
    vec1 = _##funName##_func(vec1) * uint8qscale_Out + uint8ZP_Out;   \
    dst0 = convert_int4_rte(vec0);   \
    dst1 = convert_int4_rte(vec1);   \
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);\
    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));\
    coord.y ++;\
    \
    VXC_DP4x4(vec0, src2, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part0_4x4);\
    VXC_DP4x4(vec1, src2, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part1_4x4);\
    vec0 *= uint8scale_In;\
    vec1 *= uint8scale_In;\
    vec0 = _##funName##_func(vec0) * uint8qscale_Out + uint8ZP_Out;   \
    vec1 = _##funName##_func(vec1) * uint8qscale_Out + uint8ZP_Out;   \
    dst0 = convert_int4_rte(vec0);   \
    dst1 = convert_int4_rte(vec1);   \
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);\
    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));\
    coord.y ++;\
    \
    VXC_DP4x4(vec0, src3, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part0_4x4);\
    VXC_DP4x4(vec1, src3, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part1_4x4);\
    vec0 *= uint8scale_In;\
    vec1 *= uint8scale_In;\
    vec0 = _##funName##_func(vec0) * uint8qscale_Out + uint8ZP_Out;   \
    vec1 = _##funName##_func(vec1) * uint8qscale_Out + uint8ZP_Out;   \
    dst0 = convert_int4_rte(vec0);   \
    dst1 = convert_int4_rte(vec1);   \
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);\
    VXC_WriteImage2DArray(output, coord, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));\
}
#define ACTIVATION_UINT8_2D_FUNC(funName)\
    __kernel void vxcActivation_##funName##_UInt8_2D (   \
    __read_only image2d_array_t   input, \
    __write_only image2d_array_t  output)\
{  \
    int4 coord = (int4)(get_global_id(0), get_global_id(1), get_global_id(1), get_global_id(1));    \
    \
    vxc_uchar8 src0, src1, src2, src3;\
    vxc_float4 vec0, vec1;\
    VXC_ReadImage(src0, input,  coord.xy, VXC_5BITOFFSET_XY(0, 0), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));\
    VXC_ReadImage(src1, input,  coord.xy, VXC_5BITOFFSET_XY(0, 1), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));\
    VXC_ReadImage(src2, input,  coord.xy, VXC_5BITOFFSET_XY(0, 2), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));\
    VXC_ReadImage(src3, input,  coord.xy, VXC_5BITOFFSET_XY(0, 3), VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));\
    coord.zw += (int2)(1, 2);   \
    \
    vxc_uchar8 zeroPoint;\
    _viv_asm(COPY, zeroPoint, uint8ZP_In, 4);\
    VXC_DP4x4(vec0, src0, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part0_4x4);\
    VXC_DP4x4(vec1, src0, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part1_4x4);\
    vec0 *= uint8scale_In;\
    vec1 *= uint8scale_In;\
    vec0 = _##funName##_func(vec0) * uint8qscale_Out + uint8ZP_Out;   \
    vec1 = _##funName##_func(vec1) * uint8qscale_Out + uint8ZP_Out;   \
    int4 dst0, dst1;    \
    dst0 = convert_int4_rte(vec0);   \
    dst1 = convert_int4_rte(vec1);   \
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);\
    VXC_WriteImage(output, coord.xy, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));    \
    coord.y += 3;\
    \
    VXC_DP4x4(vec0, src1, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part0_4x4);\
    VXC_DP4x4(vec1, src1, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part1_4x4);\
    vec0 *= uint8scale_In;\
    vec1 *= uint8scale_In;\
    vec0 = _##funName##_func(vec0) * uint8qscale_Out + uint8ZP_Out;   \
    vec1 = _##funName##_func(vec1) * uint8qscale_Out + uint8ZP_Out;   \
    dst0 = convert_int4_rte(vec0);   \
    dst1 = convert_int4_rte(vec1);   \
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);\
    VXC_WriteImage(output, coord.xz, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));    \
    \
    VXC_DP4x4(vec0, src2, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part0_4x4);\
    VXC_DP4x4(vec1, src2, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part1_4x4);\
    vec0 *= uint8scale_In;\
    vec1 *= uint8scale_In;\
    vec0 = _##funName##_func(vec0) * uint8qscale_Out + uint8ZP_Out;   \
    vec1 = _##funName##_func(vec1) * uint8qscale_Out + uint8ZP_Out;   \
    dst0 = convert_int4_rte(vec0);   \
    dst1 = convert_int4_rte(vec1);   \
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);\
    VXC_WriteImage(output, coord.xw, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));    \
    \
    VXC_DP4x4(vec0, src3, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part0_4x4);\
    VXC_DP4x4(vec1, src3, zeroPoint, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardInf, 0), uniUInt8toFp32Part1_4x4);\
    vec0 *= uint8scale_In;\
    vec1 *= uint8scale_In;\
    vec0 = _##funName##_func(vec0) * uint8qscale_Out + uint8ZP_Out;   \
    vec1 = _##funName##_func(vec1) * uint8qscale_Out + uint8ZP_Out;   \
    dst0 = convert_int4_rte(vec0);   \
    dst1 = convert_int4_rte(vec1);   \
    VXC_DP2x8(src0, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_ToNearestEven, 1), uniExtact8Bit_2x8);\
    VXC_WriteImage(output, coord.xy, src0, VXC_MODIFIER(0, 7, 0,VXC_RM_TowardZero, 0));    \
}
ACTIVATION_UINT8_FUNC(sigmoid)
ACTIVATION_UINT8_2D_FUNC(sigmoid)
ACTIVATION_UINT8_FUNC(tanh)
ACTIVATION_UINT8_2D_FUNC(tanh)
ACTIVATION_UINT8_FUNC(sqrt)
ACTIVATION_UINT8_2D_FUNC(sqrt)
ACTIVATION_UINT8_FUNC(rsqrt)
ACTIVATION_UINT8_2D_FUNC(rsqrt)
ACTIVATION_UINT8_FUNC(softRelu)
ACTIVATION_UINT8_2D_FUNC(softRelu)

