#pragma OPENCL EXTENSION CL_VIV_asm : enable
#pragma OPENCL EXTENSION cl_viv_bitfield_extension : enable
#pragma OPENCL EXTENSION cl_viv_vx_extension : enable


typedef _viv_uchar16_packed   vxc_uchar16;
typedef _viv_uchar8_packed    vxc_uchar8;
inline uchar* get_image2D_array_ptr(image2d_array_t  input)
{
    int8 desc;
    _viv_asm(COPY, desc, input, sizeof(desc));
    uchar *src_ptr = (uchar*)desc.s0;

    return src_ptr;
}

__kernel void gpuDepthwiseConv_3x3_s1_Q32_x4_2D
    (
    __read_only image2d_t       input,
    __read_only image2d_array_t weight,
    __read_only image2d_t       bias,
    int                         outputHeight,
    int                         padTop,
    float                       scaleOut,
    float                       zpIn,
    float                       zpWeight,
    float                       zpOut,
    int                         height,
    __write_only image2d_t      output
    )
{
    int x = get_global_id(0);
    int y = get_global_id(1);
    int2 coord_out = (int2)(x, y * outputHeight);

    int4 coord_in = (int4)(x >> 2, y * height, y * height + 1, y * height + 2);
    int2 coord_wei = (int2)(0, y);

    float4 sum[3];
    uint4  dst[3];

    uchar *wPtr = get_image2D_array_ptr(input) + y * get_image_width(weight);
    vxc_uchar16 w0 = vload16(0, (_viv_uchar_packed *)wPtr);
    biasData = convert_float(read_imagei(bias, coord_wei.yx));
    sum[0] = biasData;
    sum[1] = biasData;
    sum[2] = biasData;

    uint4 line0  = read_imageui(input, coord_in.xy);
    uint4 line1  = read_imageui(input, coord_in.xz);
    uint4 line2  = read_imageui(input, coord_in.xw);
    coord_in += (int4)(0, 3, 3, 3);

    uint4 bits = (uint4)(8, 8, 8, 8);
    uint4 cfg0 = (uint4)(0, 8, 16, 24);
    uint4 cfg1 = (uint4)(8, 16, 24, 0);
    uint4 cfg2 = (uint4)(16, 24, 0, 8);

    uint4 wTmp;
    _viv_asm(COPY, wTmp, w0, 16);
    uint4 wTmp0 = viv_bitfieldExtract(wTmp.xxxx, cfg0, bits);
    uint4 wTmp1 = viv_bitfieldExtract(wTmp.yyyy, cfg0, bits);
    uint4 wTmp2 = viv_bitfieldExtract(wTmp.zzzz, cfg0, bits);

    float4 w0Data = convert_float4(wTmp0);
    float4 w1Data = convert_float4(wTmp1);
    float4 w2Data = convert_float4(wTmp2);

    uint4 iTmp0  = viv_bitfieldExtract(line0.xxxx, cfg0, bits);
    uint4 iTmp1  = viv_bitfieldExtract(line0.xxxy, cfg1, bits);
    uint4 iTmp2  = viv_bitfieldExtract(line0.xxyy, cfg2, bits);

    float4 iData0 = convert_float4(iTmp0);
    float4 iData1 = convert_float4(iTmp1);
    float4 iData2 = convert_float4(iTmp2);

    sum[0] = iData0 * wTmp0.xxxx + sum[0];
    sum[0] = iData1 * wTmp0.yyyy + sum[0];
    sum[0] = iData2 * wTmp0.zzzz + sum[0];

    iTmp0  = viv_bitfieldExtract(line1.xxxx, cfg0, bits);
    iTmp1  = viv_bitfieldExtract(line1.xxxy, cfg1, bits);
    iTmp2  = viv_bitfieldExtract(line1.xxyy, cfg2, bits);

    iData0 = convert_float4(iTmp0);
    iData1 = convert_float4(iTmp1);
    iData2 = convert_float4(iTmp2);

    sum[0] = iData0 * wTmp0.wwww + sum[0];
    sum[0] = iData1 * wTmp1.xxxx + sum[0];
    sum[0] = iData2 * wTmp1.yyyy + sum[0];

    sum[1] = iData0 * wTmp0.xxxx + sum[1];
    sum[1] = iData1 * wTmp0.yyyy + sum[1];
    sum[1] = iData2 * wTmp0.zzzz + sum[1];

    int index = 0;
    do
    {
        iTmp0  = viv_bitfieldExtract(line2.xxxx, cfg0, bits);
        iTmp1  = viv_bitfieldExtract(line2.xxxy, cfg1, bits);
        iTmp2  = viv_bitfieldExtract(line2.xxyy, cfg2, bits);

        line0  = read_imageui(input, coord_in.y);
        line1  = read_imageui(input, coord_in.xz);
        line2  = read_imageui(input, coord_in.xw);
        coord_in += (int4)(0, 3, 3, 3);

        sum[0] = iData0 * wTmp1.zzzz + sum[0];
        sum[0] = iData1 * wTmp1.wwww + sum[0];
        sum[0] = iData2 * wTmp2.xxxx + sum[0];

        sum[1] = iData0 * wTmp0.wwww + sum[1];
        sum[1] = iData1 * wTmp1.xxxx + sum[1];
        sum[1] = iData2 * wTmp1.yyyy + sum[1];

        sum[2] = iData0 * wTmp0.xxxx + sum[1];
        sum[2] = iData1 * wTmp0.yyyy + sum[1];
        sum[2] = iData2 * wTmp0.zzzz + sum[1];

        dst[0] = convert_uint4(sum[0] * scaleOut + zpOut);
        sum[0]= biasData;
        write_imageui(output, coord_out.xy, sum[0]);
        coord_out.y ++;

        iTmp0  = viv_bitfieldExtract(line0.xxxx, cfg0, bits);
        iTmp1  = viv_bitfieldExtract(line0.xxxy, cfg1, bits);
        iTmp2  = viv_bitfieldExtract(line0.xxyy, cfg2, bits);

        sum[1] = iData0 * wTmp1.zzzz + sum[0];
        sum[1] = iData1 * wTmp1.wwww + sum[0];
        sum[1] = iData2 * wTmp2.xxxx + sum[0];

        sum[2] = iData0 * wTmp0.wwww + sum[1];
        sum[2] = iData1 * wTmp1.xxxx + sum[1];
        sum[2] = iData2 * wTmp1.yyyy + sum[1];

        sum[0] = iData0 * wTmp0.xxxx + sum[1];
        sum[0] = iData1 * wTmp0.yyyy + sum[1];
        sum[0] = iData2 * wTmp0.zzzz + sum[1];

        dst[1] = convert_uint4(sum[1] * scaleOut + zpOut);
        sum[1]= biasData;
        write_imageui(output, coord_out.xy, sum[1]);
        coord_out.y ++;

        iTmp0  = viv_bitfieldExtract(line1.xxxx, cfg0, bits);
        iTmp1  = viv_bitfieldExtract(line1.xxxy, cfg1, bits);
        iTmp2  = viv_bitfieldExtract(line1.xxyy, cfg2, bits);

        sum[2] = iData0 * wTmp1.zzzz + sum[0];
        sum[2] = iData1 * wTmp1.wwww + sum[0];
        sum[2] = iData2 * wTmp2.xxxx + sum[0];

        sum[0] = iData0 * wTmp0.wwww + sum[1];
        sum[0] = iData1 * wTmp1.xxxx + sum[1];
        sum[0] = iData2 * wTmp1.yyyy + sum[1];

        sum[1] = iData0 * wTmp0.xxxx + sum[1];
        sum[1] = iData1 * wTmp0.yyyy + sum[1];
        sum[1] = iData2 * wTmp0.zzzz + sum[1];

        dst[2] = convert_uint4(sum[2] * scaleOut + zpOut);
        sum[2]= biasData;
        write_imageui(output, coord_out.xy, sum[2]);
        coord_out.y ++;

        index += 3;
    } while (index < outputHeight);
}