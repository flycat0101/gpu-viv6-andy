#include "cl_viv_vx_ext.h"

_viv_uniform int input_height;
_viv_uniform int input_depth;
_viv_uniform int x_len_4x;
_viv_uniform int x_len_remain;
_viv_uniform VXC_512Bits uniFp16MulAccumNtoF32_dp4x4;
_viv_uniform VXC_512Bits uniFp16MulAccumtoF32_dp4x4;
__kernel void vxcDepthwiseConv_Fp16kernelWidthLE4(
    image2d_array_t input,
    image2d_array_t weight,
    image2d_array_t bias,
    int channel_multiplier,
    int kernel_width,
    int kernel_height,
    int stride,
    int padLeft,
    int padTop,
    image2d_array_t output)
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int4 coord_out = (int4)(gidx, gidy, gidz, 0);
    int inz = gidz / channel_multiplier;
    int inyStart = gidy * stride - padTop;
    int inyEnd = inyStart + kernel_height;
    inyEnd = min(inyEnd, input_height);
    int inxStart = gidx * stride - padLeft;
    int4 coord_in = (int4)(inxStart, inyStart, inz, 0);
    int4 coord_wei = (int4)(0, 0, coord_out.z, 0);
    float sum = 0;
    if (inz < input_depth)
    {
        for (coord_in.y = inyStart; coord_in.y < inyEnd; coord_in.y++)
        {
            vxc_short8 inval, weval;
            VXC_ReadImage2DArray(inval, input, coord_in, VXC_5BITOFFSET_XY(0,0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
            VXC_ReadImage2DArray(weval, weight, coord_wei, VXC_5BITOFFSET_XY(0,0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
            coord_wei.y++;
            vxc_half8 inhf, wehf;
            _viv_asm(COPY, inhf, inval, 16);
            _viv_asm(COPY, wehf, weval, 16);
            float tmp;
            VXC_DP4x4(tmp, inhf, wehf, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0), uniFp16MulAccumNtoF32_dp4x4);
            sum += tmp;
        }
    }
    int4 coord_bias = (int4)(coord_out.z, 0, 0, 0);
    float bival;
    bival = read_imagef(bias, coord_bias).x;
    sum += bival;
    half hfval;
    _viv_asm(CONV, hfval, sum);
    vxc_short8 dst;
    _viv_asm(COPY, dst, hfval, 2);
    VXC_WriteImage2DArray(output, coord_out, dst, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
}
__kernel void vxcDepthwiseConv_Fp16kernelWidthGT4(
    image2d_array_t input,
    image2d_array_t weight,
    image2d_array_t bias,
    int channel_multiplier,
    int kernel_width,
    int kernel_height,
    int stride,
    int padLeft,
    int padTop,
    image2d_array_t output)
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int4 coord_out = (int4)(gidx, gidy, gidz, 0);
    int inz = gidz / channel_multiplier;
    int inyStart = gidy * stride - padTop;
    int inyEnd = inyStart + kernel_height;
    inyEnd = min(inyEnd, input_height);
    int inxStart = gidx * stride - padLeft;
    int inxEnd = inxStart + kernel_width;
    int4 coord_in = (int4)(inxStart, inyStart, inz, 0);
    int4 coord_wei = (int4)(0, 0, coord_out.z, 0);
    float sum = 0;
    if (inz < input_depth)
    {
        for (coord_in.y = inyStart; coord_in.y < inyEnd; coord_in.y++)
        {
            vxc_short8 inval, weval;
            coord_wei.x = 0;
            if (x_len_4x)
            {
                for (coord_in.x = inxStart; coord_in.x < (inxEnd - 4); coord_in.x += 4)
                {
                    VXC_ReadImage2DArray(inval, input, coord_in, VXC_5BITOFFSET_XY(0,0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
                    VXC_ReadImage2DArray(weval, weight, coord_wei, VXC_5BITOFFSET_XY(0,0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
                    coord_wei.x += 4;
                    vxc_half8 inhf, wehf;
                    _viv_asm(COPY, inhf, inval, 16);
                    _viv_asm(COPY, wehf, weval, 16);
                    float tmp;
                    VXC_DP4x4(tmp, inhf, wehf, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0), uniFp16MulAccumtoF32_dp4x4);
                    sum += tmp;
                }
            }
            if (x_len_remain)
            {
                VXC_ReadImage2DArray(inval, input, coord_in, VXC_5BITOFFSET_XY(0,0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
                VXC_ReadImage2DArray(weval, weight, coord_wei, VXC_5BITOFFSET_XY(0,0), VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
                vxc_half8 inhf, wehf;
                _viv_asm(COPY, inhf, inval, 16);
                _viv_asm(COPY, wehf, weval, 16);
                float tmp;
                VXC_DP4x4(tmp, inhf, wehf, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0), uniFp16MulAccumNtoF32_dp4x4);
                sum += tmp;
            }
            coord_wei.y++;
        }
    }
    int4 coord_bias = (int4)(coord_out.z, 0, 0, 0);
    float bival;
    bival = read_imagef(bias, coord_bias).x;
    sum += bival;
    half hfval;
    _viv_asm(CONV, hfval, sum);
    vxc_short8 dst;
    _viv_asm(COPY, dst, hfval, 2);
    VXC_WriteImage2DArray(output, coord_out, dst, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
}

_viv_uniform int x_len_5x;
_viv_uniform int x_len5x_remain;
_viv_uniform VXC_512Bits uniU8MulAccumtoF32_dp16x1;
_viv_uniform VXC_512Bits uniU8MulAccumNtoF32_dp16x1;
_viv_uniform int ksZPinZPwe;
_viv_uniform float outScale;
_viv_uniform float outZP;
__kernel void vxcDepthwiseConv_U8kernelWidthLE5(
    image2d_array_t input,
    image2d_array_t weight,
    image2d_array_t bias,
    int channel_multiplier,
    int kernel_width,
    int kernel_height,
    int stride,
    int padLeft,
    int padTop,
    image2d_array_t output)
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int4 coord_out = (int4)(gidx, gidy, gidz, 0);
    int inz = gidz / channel_multiplier;
    int inyStart = gidy * stride - padTop;
    int inyEnd = inyStart + kernel_height;
    int inxStart = gidx * stride - padLeft;
    int4 coord_in = (int4)(inxStart, inyStart, inz, 0);
    int4 coord_bias = (int4)(coord_out.z, 0, 0, 0);
    int bival;
    bival = read_imagei(bias, coord_bias).x + ksZPinZPwe;
    float sum;
    sum = convert_float(bival);
    int4 coord_wei = (int4)(0, 0, coord_out.z, 0);
    if (inz < input_depth)
    {
        for (coord_in.y = inyStart; coord_in.y < inyEnd; coord_in.y++)
        {
            vxc_uchar8 inval, weval;
            VXC_ReadImage2DArray(inval, input, coord_in, VXC_5BITOFFSET_XY(0,0), VXC_MODIFIER(0, 4, 0, VXC_RM_TowardZero, 0));
            VXC_ReadImage2DArray(weval, weight, coord_wei, VXC_5BITOFFSET_XY(0,0), VXC_MODIFIER(0, 4, 0, VXC_RM_TowardZero, 0));
            coord_wei.y++;
            float tmp;
            VXC_DP16x1(tmp, inval, weval, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0), uniU8MulAccumNtoF32_dp16x1);
            sum += tmp;
        }
    }
    sum = sum * outScale + outZP;
    unsigned char dst = convert_uchar_sat_rte(sum);
    VXC_WriteImage2DArray(output, coord_out, dst, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
}
__kernel void vxcDepthwiseConv_U8kernelWidthGT5(
    image2d_array_t input,
    image2d_array_t weight,
    image2d_array_t bias,
    int channel_multiplier,
    int kernel_width,
    int kernel_height,
    int stride,
    int padLeft,
    int padTop,
    image2d_array_t output)
{
    int gidx = get_global_id(0);
    int gidy = get_global_id(1);
    int gidz = get_global_id(2);
    int4 coord_out = (int4)(gidx, gidy, gidz, 0);
    int inz = gidz / channel_multiplier;
    int inyStart = gidy * stride - padTop;
    int inyEnd = inyStart + kernel_height;
    int inxStart = gidx * stride - padLeft;
    int inxEnd = inxStart + kernel_width;
    int4 coord_in = (int4)(inxStart, inyStart, inz, 0);
    int4 coord_wei = (int4)(0, 0, coord_out.z, 0);
    int4 coord_bias = (int4)(coord_out.z, 0, 0, 0);
    int bival;
    bival = read_imagei(bias, coord_bias).x + ksZPinZPwe;
    float sum;
    sum = convert_float(bival);
    if (inz < input_depth)
    {
        for (coord_in.y = inyStart; coord_in.y < inyEnd; coord_in.y++)
        {
            vxc_uchar8 inval, weval;
            coord_wei.x = 0;
            if (x_len_5x)
            {
                for (coord_in.x = inxStart; coord_in.x < (inxEnd - 5); coord_in.x += 5)
                {
                    VXC_ReadImage2DArray(inval, input, coord_in, VXC_5BITOFFSET_XY(0,0), VXC_MODIFIER(0, 4, 0, VXC_RM_TowardZero, 0));
                    VXC_ReadImage2DArray(weval, weight, coord_wei, VXC_5BITOFFSET_XY(0,0), VXC_MODIFIER(0, 4, 0, VXC_RM_TowardZero, 0));
                    coord_wei.x += 5;
                    float tmp;
                    VXC_DP16x1(tmp, inval, weval, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0), uniU8MulAccumtoF32_dp16x1);
                    sum += tmp;
                }
            }
            if (x_len5x_remain)
            {
                VXC_ReadImage2DArray(inval, input, coord_in, VXC_5BITOFFSET_XY(0,0), VXC_MODIFIER(0, 4, 0, VXC_RM_TowardZero, 0));
                VXC_ReadImage2DArray(weval, weight, coord_wei, VXC_5BITOFFSET_XY(0,0), VXC_MODIFIER(0, 4, 0, VXC_RM_TowardZero, 0));
                float tmp;
                VXC_DP16x1(tmp, inval, weval, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0), uniU8MulAccumNtoF32_dp16x1);
                sum += tmp;
            }
            coord_wei.y++;
        }
    }
    sum = sum * outScale + outZP;
    unsigned char dst = convert_uchar_sat_rte(sum);
    VXC_WriteImage2DArray(output, coord_out, dst, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));
}