#pragma OPENCL EXTENSION cl_viv_vx_extension : enable

#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits uniA_Times_B_2x8;
_viv_uniform VXC_512Bits uniA_Times_F32_2x8;
_viv_uniform VXC_512Bits uniA_Times_B_0_4x4;
_viv_uniform VXC_512Bits uniA_Times_B_1_4x4;
_viv_uniform VXC_512Bits uniExtract_8Bin_2x8;

#define MULTIPLY_U8_TIMES_U8(name0, name1, name2, dst_type, over_flow, round) \
    __kernel void multiply_U8MulU8to##name0##_##name1##_##name2 \
    ( \
    __read_only  image2d_t input0, \
    __read_only  image2d_t input1, \
                 float     scale, \
                 int       overflow_policy, \
                 int       round_policy, \
    __write_only image2d_t output \
    ) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
 \
    vxc_uchar8 src0, src1; \
    vxc_ushort8 tmp; \
    dst_type dst; \
 \
    VXC_ReadImage(src0, input0, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    VXC_ReadImage(src1, input1, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
 \
    VXC_DP2x8(tmp, src0, src1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), uniA_Times_B_2x8); \
    VXC_DP2x8(dst, tmp, tmp, VXC_MODIFIER(0, 7, 0, round, over_flow), uniA_Times_F32_2x8); \
 \
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}

MULTIPLY_U8_TIMES_U8(U8,  SAT, RTE, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_U8_TIMES_U8(U8,  SAT, RTZ, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_U8_TIMES_U8(U8,  WRA, RTE, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_U8_TIMES_U8(U8,  WRA, RTZ, vxc_uchar8, 0, VXC_RM_TowardZero)
MULTIPLY_U8_TIMES_U8(I16, SAT, RTE, vxc_short8, 1, VXC_RM_ToNearestEven)
MULTIPLY_U8_TIMES_U8(I16, SAT, RTZ, vxc_short8, 1, VXC_RM_TowardZero)
MULTIPLY_U8_TIMES_U8(I16, WRA, RTE, vxc_short8, 0, VXC_RM_ToNearestEven)
MULTIPLY_U8_TIMES_U8(I16, WRA, RTZ, vxc_short8, 0, VXC_RM_TowardZero)


#define MULTIPLY_A_TIMES_B(name0, name1, name2, name3, name4, src0_type, src1_type, dst_type, over_flow) \
    __kernel void multiply_##name0##Mul##name1##to##name2##_##name3##_##name4 \
    ( \
    __read_only  image2d_t input0, \
    __read_only  image2d_t input1, \
                 float     scale, \
                 int       overflow_policy, \
                 int       round_policy, \
    __write_only image2d_t output \
    ) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
 \
    src0_type src0; \
    src1_type src1; \
    dst_type dst; \
 \
    VXC_ReadImage(src0, input0, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    VXC_ReadImage(src1, input1, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
 \
    float4 data0, data1; \
    VXC_DP4x4(data0, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniA_Times_B_0_4x4); \
    VXC_DP4x4(data1, src0, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniA_Times_B_1_4x4); \
    data0 *= scale; \
    data1 *= scale; \
    int4 tmp0, tmp1; \
    _viv_asm(COPY, tmp0, data0, 16); \
    tmp0 += 256; \
    _viv_asm(COPY, data0, tmp0, 16); \
    _viv_asm(COPY, tmp1, data1, 16); \
    tmp1 += 256; \
    _viv_asm(COPY, data1, tmp1, 16); \
    int4 dst0, dst1; \
    _viv_asm(CONV_##name4, dst0, data0); \
    _viv_asm(CONV_##name4, dst1, data1); \
    VXC_DP2x8(dst, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, over_flow), uniExtract_8Bin_2x8); \
 \
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}

MULTIPLY_A_TIMES_B(I16, I16, I16,  SAT, RTE, vxc_short8, vxc_short8, vxc_short8, 1)
MULTIPLY_A_TIMES_B(I16, I16, I16,  SAT, RTZ, vxc_short8, vxc_short8, vxc_short8, 1)

MULTIPLY_A_TIMES_B(I16, I16, U8,  SAT, RTE, vxc_short8, vxc_short8, vxc_uchar8, 1)
MULTIPLY_A_TIMES_B(I16, I16, U8,  SAT, RTZ, vxc_short8, vxc_short8, vxc_uchar8, 1)
MULTIPLY_A_TIMES_B(I16, I16, U8,  WRA, RTE, vxc_short8, vxc_short8, vxc_uchar8, 0)
MULTIPLY_A_TIMES_B(I16, I16, U8,  WRA, RTZ, vxc_short8, vxc_short8, vxc_uchar8, 0)

MULTIPLY_A_TIMES_B(I16, U8,  I16, SAT, RTE, vxc_short8, vxc_uchar8, vxc_short8, 1)
MULTIPLY_A_TIMES_B(I16, U8,  I16, SAT, RTZ, vxc_short8, vxc_uchar8, vxc_short8, 1)
MULTIPLY_A_TIMES_B(I16, U8,  I16, WRA, RTE, vxc_short8, vxc_uchar8, vxc_short8, 0)
MULTIPLY_A_TIMES_B(I16, U8,  I16, WRA, RTZ, vxc_short8, vxc_uchar8, vxc_short8, 0)

MULTIPLY_A_TIMES_B(U8,  I16, I16, SAT, RTE, vxc_uchar8, vxc_short8, vxc_short8, 1)
MULTIPLY_A_TIMES_B(U8,  I16, I16, SAT, RTZ, vxc_uchar8, vxc_short8, vxc_short8, 1)
MULTIPLY_A_TIMES_B(U8,  I16, I16, WRA, RTE, vxc_uchar8, vxc_short8, vxc_short8, 0)
MULTIPLY_A_TIMES_B(U8,  I16, I16, WRA, RTZ, vxc_uchar8, vxc_short8, vxc_short8, 0)

MULTIPLY_A_TIMES_B(U8,  I16, U8,  SAT, RTE, vxc_uchar8, vxc_short8, vxc_uchar8, 1)
MULTIPLY_A_TIMES_B(U8,  I16, U8,  SAT, RTZ, vxc_uchar8, vxc_short8, vxc_uchar8, 1)
MULTIPLY_A_TIMES_B(U8,  I16, U8,  WRA, RTE, vxc_uchar8, vxc_short8, vxc_uchar8, 0)
MULTIPLY_A_TIMES_B(U8,  I16, U8,  WRA, RTZ, vxc_uchar8, vxc_short8, vxc_uchar8, 0)

MULTIPLY_A_TIMES_B(I16, U8,  U8,  SAT, RTE, vxc_short8, vxc_uchar8, vxc_uchar8, 1)
MULTIPLY_A_TIMES_B(I16, U8,  U8,  SAT, RTZ, vxc_short8, vxc_uchar8, vxc_uchar8, 1)
MULTIPLY_A_TIMES_B(I16, U8,  U8,  WRA, RTE, vxc_short8, vxc_uchar8, vxc_uchar8, 0)
MULTIPLY_A_TIMES_B(I16, U8,  U8,  WRA, RTZ, vxc_short8, vxc_uchar8, vxc_uchar8, 0)

#define MULTIPLY_A_TIMES_B_OPT(name0, name1, name2, name3, name4, src0_type, src1_type, dst_type, over_flow, round) \
__kernel void multiply_##name0##Mul##name1##to##name2##_##name3##_##name4##_OPT \
    ( \
    __read_only  image2d_t input0, \
    __read_only  image2d_t input1, \
                 float     scale, \
                 int       overflow_policy, \
                 int       round_policy, \
    __write_only image2d_t output \
    ) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
 \
    src0_type src0; \
    src1_type src1; \
    dst_type dst; \
 \
    VXC_ReadImage(src0, input0, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    VXC_ReadImage(src1, input1, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
 \
    VXC_DP2x8(dst, src0, src1, VXC_MODIFIER(0, 7, 0, round, over_flow), uniA_Times_B_2x8); \
 \
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}
MULTIPLY_A_TIMES_B_OPT(I16, I16, I16, SAT, RTE, vxc_short8, vxc_short8, vxc_short8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_OPT(I16, I16, I16, SAT, RTZ, vxc_short8, vxc_short8, vxc_short8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_OPT(I16, I16, I16, WRA, RTE, vxc_short8, vxc_short8, vxc_short8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_OPT(I16, I16, I16, WRA, RTZ, vxc_short8, vxc_short8, vxc_short8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_OPT(I16, I16, U8,  SAT, RTE, vxc_short8, vxc_short8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_OPT(I16, I16, U8,  SAT, RTZ, vxc_short8, vxc_short8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_OPT(I16, I16, U8,  WRA, RTE, vxc_short8, vxc_short8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_OPT(I16, I16, U8,  WRA, RTZ, vxc_short8, vxc_short8, vxc_uchar8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_OPT(I16, U8,  I16, SAT, RTE, vxc_short8, vxc_uchar8, vxc_short8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_OPT(I16, U8,  I16, SAT, RTZ, vxc_short8, vxc_uchar8, vxc_short8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_OPT(I16, U8,  I16, WRA, RTE, vxc_short8, vxc_uchar8, vxc_short8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_OPT(I16, U8,  I16, WRA, RTZ, vxc_short8, vxc_uchar8, vxc_short8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_OPT(U8,  I16, I16, SAT, RTE, vxc_uchar8, vxc_short8, vxc_short8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_OPT(U8,  I16, I16, SAT, RTZ, vxc_uchar8, vxc_short8, vxc_short8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_OPT(U8,  I16, I16, WRA, RTE, vxc_uchar8, vxc_short8, vxc_short8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_OPT(U8,  I16, I16, WRA, RTZ, vxc_uchar8, vxc_short8, vxc_short8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_OPT(U8,  I16, U8,  SAT, RTE, vxc_uchar8, vxc_short8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_OPT(U8,  I16, U8,  SAT, RTZ, vxc_uchar8, vxc_short8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_OPT(U8,  I16, U8,  WRA, RTE, vxc_uchar8, vxc_short8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_OPT(U8,  I16, U8,  WRA, RTZ, vxc_uchar8, vxc_short8, vxc_uchar8, 0, VXC_RM_TowardZero)

MULTIPLY_A_TIMES_B_OPT(I16, U8,  U8,  SAT, RTE, vxc_short8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_OPT(I16, U8,  U8,  SAT, RTZ, vxc_short8, vxc_uchar8, vxc_uchar8, 1, VXC_RM_TowardZero)
MULTIPLY_A_TIMES_B_OPT(I16, U8,  U8,  WRA, RTE, vxc_short8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_ToNearestEven)
MULTIPLY_A_TIMES_B_OPT(I16, U8,  U8,  WRA, RTZ, vxc_short8, vxc_uchar8, vxc_uchar8, 0, VXC_RM_TowardZero)


_viv_uniform VXC_512Bits uniDataToF32_0_4x4;
_viv_uniform VXC_512Bits uniDataToF32_1_4x4;
#define MULTIPLY_A_TIMES_B_I16MULI16TOI16(name0, name1, over_flow) \
    __kernel void multiply_I16MulI16toI16_##name0##_##name1 \
    ( \
    __read_only  image2d_t input0, \
    __read_only  image2d_t input1, \
                 float     scale, \
                 int       overflow_policy, \
                 int       round_policy, \
    __write_only image2d_t output \
    ) \
{ \
    int2 coord = (int2)(get_global_id(0), get_global_id(1)); \
 \
    vxc_short8 src0; \
    vxc_short8 src1; \
    vxc_short8 dst; \
 \
    VXC_ReadImage(src0, input0, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
    VXC_ReadImage(src1, input1, coord, 0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
 \
    float4 v00, v01; \
    float4 v10, v11; \
    VXC_DP4x4(v00, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniDataToF32_0_4x4); \
    VXC_DP4x4(v01, src0, src0, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniDataToF32_1_4x4); \
    VXC_DP4x4(v10, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniDataToF32_0_4x4); \
    VXC_DP4x4(v11, src1, src1, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), uniDataToF32_1_4x4); \
    v00 = v00 * scale; \
    v00 *= v10; \
    v01 = v01 * scale; \
    v01 *= v11; \
    int4 dst0, dst1; \
    _viv_asm(CONV_##name1, dst0, v00); \
    _viv_asm(CONV_##name1, dst1, v01); \
    VXC_DP2x8(dst, dst0, dst1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, over_flow), uniExtract_8Bin_2x8); \
 \
    VXC_WriteImage(output, coord, dst, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0)); \
}
MULTIPLY_A_TIMES_B_I16MULI16TOI16(WRA, RTE, 0)
MULTIPLY_A_TIMES_B_I16MULI16TOI16(WRA, RTZ, 0)
