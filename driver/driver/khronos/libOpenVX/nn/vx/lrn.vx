#include "cl_viv_vx_ext.h"
_viv_uniform VXC_512Bits dp_fp16_1;
_viv_uniform VXC_512Bits dp_fp16tofp32;
_viv_uniform VXC_512Bits dp_u32tofp16;
_viv_uniform VXC_512Bits UniPackLow16bits;


__kernel void vxcLrn
    (
           __read_only image2d_t  src,
		   global int     *width,
		   global int     *height,
		   global int     *depth,
		   global int     *batch,
		   global int     *type,
		   global int     *ksize,
		   global int     *stride,
		   global int     *pad,
		   global float   *shift,
		   global float   *alpha,
		   global float   *beta,
		   __write_only image2d_t dst)

{

		int2 pos = (int2)(get_global_id(0), get_global_id(1)*(*height));
		vxc_short8 val0;
		vxc_short8 val1;
		vxc_short8 val2;
		vxc_float4 sum0;
		vxc_float4 sum1;
		vxc_float4 sum2;
		vxc_float4 sum;
		float4 alphadiv9;
		float4 shift4 ;
		float4 val1_f32;
		float4 val2f32;

		vxc_half8  val0_h;
		vxc_half8  val1_h;
		vxc_half8  val2_h;
		int loop_height;
#if 1
		// first
	 	VXC_OP4(img_load, val1, src, pos, VXC_5BITOFFSET_XY(-1,0), VXC_MODIFIER(0, 5, 0, VXC_RM_TowardZero, 0));
		VXC_OP4(img_load, val2, src, pos, VXC_5BITOFFSET_XY(-1,1), VXC_MODIFIER(0, 5, 0, VXC_RM_TowardZero, 0));
		loop_height = *height-2;
		alphadiv9 = *alpha/9;
		shift4 = *shift;
		_viv_asm(COPY, val1_h, val1, 16);
		_viv_asm(COPY, val2_h, val2, 16);
		VXC_OP4(dp4x4, sum1, val1_h, val1_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), dp_fp16_1);
		VXC_OP4(dp4x4, sum2, val2_h, val2_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), dp_fp16_1);

		sum = sum1 + sum2;
		sum = mad(sum,alphadiv9,shift4);
		sum = sum * sum * sum;
		sum = sqrt(sum);
		VXC_OP4(dp4x4, val1_f32, val1_h, val1_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), dp_fp16tofp32);
		sum = rsqrt(sum);
		val1_f32 = val1_f32 * sum;

		half4 convfp16;
		vxc_short8 val_fp16;
// do middle lines
		do
		{
			_viv_asm(COPY, val1_h, val2, 16);
			VXC_OP4(dp4x4, val2f32, val1_h, val1_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), dp_fp16tofp32);

			VXC_OP4(img_load, val2, src, pos, VXC_5BITOFFSET_XY(-1,2), VXC_MODIFIER(0, 5, 0, VXC_RM_TowardZero, 0));

			_viv_asm(CONV,convfp16,val1_f32);
			VXC_OP4(dp4x8, val_fp16, convfp16, convfp16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackLow16bits);
			VXC_OP4_NoDest(img_store, dst, pos, val_fp16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

			sum0 = sum1;
			sum1 = sum2;
			pos.y = pos.y + 1;

			_viv_asm(COPY, val2_h, val2, 16);
		  	VXC_OP4(dp4x4, sum2, val2_h, val2_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), dp_fp16_1);
			sum = sum0 + sum1 + sum2;
		   	sum = mad(sum,alphadiv9,shift4);
			sum = sum * sum * sum;
			sum = sqrt(sum);
			sum = rsqrt(sum);
			val1_f32 = val2f32 * sum;

 			loop_height--;
		}while(loop_height > 0);


		_viv_asm(CONV,convfp16,val1_f32);
		VXC_OP4(dp4x8, val_fp16, convfp16, convfp16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackLow16bits);
		VXC_OP4_NoDest(img_store, dst, pos, val_fp16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

// do last line
		pos.y = pos.y + 1;
		sum = sum1 + sum2;
		sum = mad(sum,alphadiv9,shift4);
		sum = sum * sum * sum;
		sum = sqrt(sum);
		VXC_OP4(dp4x4, val1_f32, val2_h, val2_h, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), dp_fp16tofp32);
		sum = rsqrt(sum);
		val1_f32 = val1_f32 * sum;
//fp32 -> fp16
	    _viv_asm(CONV,convfp16,val1_f32);
		VXC_OP4(dp4x8, val_fp16, convfp16, convfp16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackLow16bits);
		VXC_OP4_NoDest(img_store, dst, pos, val_fp16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

#endif
}
