#include "cl_viv_vx_ext.h"

_viv_uniform VXC_512Bits UniTestData;
__kernel void vxcNms
    (
	       vx_array_float         pProbBox,
		   global int            *pBoxNum,
		   global float          *fOverlap,
		   global int            *pPicked

	)
{

	int index_p = 0;
	int offset = get_global_id(0);

	int num = *pBoxNum;   //rect numbers
	float4 dprslt;
	int num1 = num -1;
	//if(offset==8)
	//	VXC_OP4(dp16x1, dprslt, offset, offset, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniTestData);

	while ( index_p < num1)
	 {
		int index_px5 = index_p*5;
//		barrier(CLK_LOCAL_MEM_FENCE);
		float fProb_p = *(pProbBox.item + index_px5);

		if(fProb_p > 0.0 )
		{
			int index_i;
			float4 rt_p;
			rt_p.x = *(pProbBox.item + index_px5+1);
			rt_p.y = *(pProbBox.item + index_px5+2);
			rt_p.z = *(pProbBox.item + index_px5+3);
			rt_p.w = *(pProbBox.item + index_px5+4);
			for (index_i = index_p + offset+1; index_i < num; index_i += 8)
			{
				int index_ix5 = index_i*5;
				float fProb_i = *(pProbBox.item + index_ix5);
				if(fProb_i > 0.0)
				{

  					float4 rt_i;
					rt_i.x = *(pProbBox.item + index_ix5+1);
					rt_i.y = *(pProbBox.item + index_ix5+2);
					rt_i.z = *(pProbBox.item + index_ix5+3);
					rt_i.w = *(pProbBox.item + index_ix5+4);

					float4 xy0  = fmax(rt_p,rt_i);
					float4 xy1  = fmin(rt_p,rt_i);
					float2 sz = fmax(0.0f, xy1.zw-xy0.xy+1.0f);
					float area_inter = sz.x*sz.y;

					sz = max(0.0f, rt_i.zw-rt_i.xy+1.0f);
					float area_i = 	sz.x*sz.y;

					sz = max(0.0f, rt_p.zw-rt_p.xy+1.0f);
					float area_p = 	sz.x*sz.y;
					float rate = area_inter /(area_i + area_p - area_inter);


					if (rate > *fOverlap)
					{
						*(pProbBox.item + index_ix5) = -1.0f; /* remove */

					}
				}
			}
		//	*pPicked = *pPicked + 1;
			if(offset==1) // first thread will write;
				atomic_inc(pPicked);
		}

		index_p++;
	}
}
