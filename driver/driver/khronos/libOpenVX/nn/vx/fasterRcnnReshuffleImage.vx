#include "cl_viv_vx_ext.h"
_viv_uniform VXC_512Bits UniPackRevenU8toFP16_P1;
_viv_uniform VXC_512Bits UniPackRoddU8toFP16_P1;
_viv_uniform VXC_512Bits UniPackGevenU8toFP16_P1;
_viv_uniform VXC_512Bits UniPackGoddU8toFP16_P1;
_viv_uniform VXC_512Bits UniPackBevenU8toFP16_P1;
_viv_uniform VXC_512Bits UniPackBoddU8toFP16_P1;
_viv_uniform VXC_512Bits UniPackLow16bits2x8_P1;
_viv_uniform VXC_512Bits UniPackLow16bits2x8_P2;
_viv_uniform VXC_512Bits UniPackMean_even;
_viv_uniform VXC_512Bits UniPackMean_odd;
_viv_uniform VXC_512Bits UniSrcSubMean2x8;
_viv_uniform VXC_512Bits Step1PackU8_B;
_viv_uniform VXC_512Bits Step1PackU8_G;
_viv_uniform VXC_512Bits Step1PackU8_R;
_viv_uniform VXC_512Bits Step2PackU8_B03;
_viv_uniform VXC_512Bits Step2PackU8_B69;
_viv_uniform VXC_512Bits Step2PackU8_G14;
_viv_uniform VXC_512Bits Step2PackU8_G710;
_viv_uniform VXC_512Bits Step2PackU8_R25;
_viv_uniform VXC_512Bits Step2PackU8_R811;
_viv_uniform VXC_512Bits Step3PackU8toFP16_pos0;
_viv_uniform VXC_512Bits Step3PackU8toFP16_pos1;
_viv_uniform VXC_512Bits Step3PackU8toFP16_pos2;
_viv_uniform VXC_512Bits Step3PackU8toFP16_pos3;
_viv_uniform VXC_512Bits Last9PackU8toFP16_P1;
_viv_uniform VXC_512Bits Last9PackU8toFP16_P2;
_viv_uniform unsigned int img_inWidth;
_viv_uniform unsigned int img_inHeight;
_viv_uniform unsigned int out_Width;
_viv_uniform unsigned int out_Height;
_viv_uniform unsigned int out_Depth;
_viv_uniform unsigned int MeanFlag;
__kernel void fasterrcnnreshuffleimageVXC
    (
    __read_only image2d_t 	in_image,
    __read_only image2d_t 	img_mean,
    global int              *levelScalar,
    global int              *padScalar,
    global int              *strideX,
    global int              *strideY,
    global int              *batchSize,
    global int              *networkType,
    __write_only image2d_t 	out_image
    )
{
    int2 coord_in = (int2)(get_global_id(0), get_global_id(1));

    if (MeanFlag == 1)
    {
#if 1
        int4 posin = (int4)(coord_in.x, coord_in.y, coord_in.x/3, coord_in.y);
        if ((*batchSize) ==1)
        {
            posin.y += img_inHeight;
        }
        int posx_out = posin.z>>1;
        int posy_out = posin.w>>1;
        int2 posout0 = (int2)(posx_out + 2, posy_out + 2);            //note: posout0 output dstR/G/B3
        int2 posout1 = (int2)(posx_out + 1, posout0.y + out_Height);  //note: posout1 output dstR/G/B2
        int2 posout2 = (int2)(posout0.x, posy_out + 1 + out_Height*2);//note: posout2 output dstR/G/B1
        int2 posout3 = (int2)(posout1.x, posout2.y + out_Height);     //note: posout3 output dstR/G/B0

        vxc_uchar16 img_inL10, img_inL11, img_inL20, img_inL21;//src image u8
        float4      img_meanL0, img_meanL1;//mean image S16
        vxc_half8   srcFP16_RGB0, srcFP16_RGB1, srcFP16_RGB2, srcFP16_RGB3;//src image fp16
        vxc_half8   val_meanFP16;//mean image fp16
        half4       convfp16;//fp32 -> fp16
        vxc_half8   val_dstFP16;//dst value fp16
        vxc_short8  val_S16;//store image

        //read src image U8
        VXC_ReadImage(img_inL10, in_image, posin.xy, VXC_5BITOFFSET_XY(0,0), VXC_MODIFIER(0, 11, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage(img_inL11, in_image, posin.xy, VXC_5BITOFFSET_XY(12,0), VXC_MODIFIER(0, 11, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage(img_inL20, in_image, posin.xy, VXC_5BITOFFSET_XY(0,1), VXC_MODIFIER(0, 11, 0, VXC_RM_TowardZero, 0));
        VXC_ReadImage(img_inL21, in_image, posin.xy, VXC_5BITOFFSET_XY(12,1), VXC_MODIFIER(0, 11, 0, VXC_RM_TowardZero, 0));
        //read img_meanR FP32
        posin.w += (img_inHeight*2);
        img_meanL0 = read_imagef(img_mean, posin.zw);
        posin.z += 4;
        img_meanL1 = read_imagef(img_mean, posin.zw);
        //pack srcR0~R3 U8 to FP16
        VXC_DP2x8(srcFP16_RGB0, img_inL10, img_inL11, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackRevenU8toFP16_P1);
        VXC_DP2x8(srcFP16_RGB1, img_inL10, img_inL11, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackRoddU8toFP16_P1);
        VXC_DP2x8(srcFP16_RGB2, img_inL20, img_inL21, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackRevenU8toFP16_P1);
        VXC_DP2x8(srcFP16_RGB3, img_inL20, img_inL21, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackRoddU8toFP16_P1);

        //fp32 -> fp16   img_meanL0 -> convfp16
	    _viv_asm(CONV, convfp16, img_meanL0);
        VXC_DP2x8(val_meanFP16, convfp16, convfp16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackLow16bits2x8_P1);
        //fp32 -> fp16   img_meanL1 -> convfp16
	    _viv_asm(CONV, convfp16, img_meanL1);
        VXC_DP2x8(val_meanFP16, val_meanFP16, convfp16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), UniPackLow16bits2x8_P2);
		//read img_meanR FP32
        posin.zw += (int2)(-4, 1);
        img_meanL0 = read_imagef(img_mean, posin.zw);
        posin.z += 4;
        img_meanL1 = read_imagef(img_mean, posin.zw);
        //posout3 store R0
        VXC_DP2x8(val_dstFP16, val_meanFP16, val_meanFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackMean_even);
        VXC_DP2x8(val_dstFP16, srcFP16_RGB0, val_dstFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniSrcSubMean2x8);
        _viv_asm(COPY, val_S16, val_dstFP16, 16);
        VXC_WriteImage(out_image, posout3, val_S16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        //posout2 store R1
        VXC_DP2x8(val_dstFP16, val_meanFP16, val_meanFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackMean_odd);
        VXC_DP2x8(val_dstFP16, srcFP16_RGB1, val_dstFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniSrcSubMean2x8);
        _viv_asm(COPY, val_S16, val_dstFP16, 16);
        VXC_WriteImage(out_image, posout2, val_S16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

        //fp32 -> fp16   img_meanL0 -> convfp16
	    _viv_asm(CONV, convfp16, img_meanL0);
        VXC_DP2x8(val_meanFP16, convfp16, convfp16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackLow16bits2x8_P1);
        //fp32 -> fp16   img_meanL1 -> convfp16
	    _viv_asm(CONV, convfp16, img_meanL1);
        VXC_DP2x8(val_meanFP16, val_meanFP16, convfp16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), UniPackLow16bits2x8_P2);
		//read img_meanG FP32
        posin.zw -= (int2)(4, (img_inHeight + 1));
        img_meanL0 = read_imagef(img_mean, posin.zw);
        posin.z += 4;
        img_meanL1 = read_imagef(img_mean, posin.zw);
        //posout1 store R2
        VXC_DP2x8(val_dstFP16, val_meanFP16, val_meanFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackMean_even);
        VXC_DP2x8(val_dstFP16, srcFP16_RGB2, val_dstFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniSrcSubMean2x8);
        _viv_asm(COPY, val_S16, val_dstFP16, 16);
        VXC_WriteImage(out_image, posout1, val_S16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        //posout0 store R3
        VXC_DP2x8(val_dstFP16, val_meanFP16, val_meanFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackMean_odd);
        VXC_DP2x8(val_dstFP16, srcFP16_RGB3, val_dstFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniSrcSubMean2x8);
        _viv_asm(COPY, val_S16, val_dstFP16, 16);
        VXC_WriteImage(out_image, posout0, val_S16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

        //pack srcG0~G3 U8 to FP16
        VXC_DP2x8(srcFP16_RGB0, img_inL10, img_inL11, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackGevenU8toFP16_P1);
        VXC_DP2x8(srcFP16_RGB1, img_inL10, img_inL11, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackGoddU8toFP16_P1);
        VXC_DP2x8(srcFP16_RGB2, img_inL20, img_inL21, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackGevenU8toFP16_P1);
        VXC_DP2x8(srcFP16_RGB3, img_inL20, img_inL21, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackGoddU8toFP16_P1);
        //pos dstG
        posout0.y += out_Height*4;//note: posout0 output dstR/G/B3
        posout1.y += out_Height*4;//note: posout1 output dstR/G/B2
        posout2.y += out_Height*4;//note: posout2 output dstR/G/B1
        posout3.y += out_Height*4;//note: posout3 output dstR/G/B0
        //fp32 -> fp16   img_meanL0 -> convfp16
	    _viv_asm(CONV, convfp16, img_meanL0);
        VXC_DP2x8(val_meanFP16, convfp16, convfp16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackLow16bits2x8_P1);
        //fp32 -> fp16   img_meanL1 -> convfp16
	    _viv_asm(CONV, convfp16, img_meanL1);
        VXC_DP2x8(val_meanFP16, val_meanFP16, convfp16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), UniPackLow16bits2x8_P2);
		//read img_meanG FP32
        posin.zw += (int2)(-4, 1);
        img_meanL0 = read_imagef(img_mean, posin.zw);
        posin.z += 4;
        img_meanL1 = read_imagef(img_mean, posin.zw);
        //posout3 store G0
        VXC_DP2x8(val_dstFP16, val_meanFP16, val_meanFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackMean_even);
        VXC_DP2x8(val_dstFP16, srcFP16_RGB0, val_dstFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniSrcSubMean2x8);
        _viv_asm(COPY, val_S16, val_dstFP16, 16);
        VXC_WriteImage(out_image, posout3, val_S16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        //posout2 store G1
        VXC_DP2x8(val_dstFP16, val_meanFP16, val_meanFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackMean_odd);
        VXC_DP2x8(val_dstFP16, srcFP16_RGB1, val_dstFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniSrcSubMean2x8);
        _viv_asm(COPY, val_S16, val_dstFP16, 16);
        VXC_WriteImage(out_image, posout2, val_S16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

        //fp32 -> fp16   img_meanL0 -> convfp16
	    _viv_asm(CONV, convfp16, img_meanL0);
        VXC_DP2x8(val_meanFP16, convfp16, convfp16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackLow16bits2x8_P1);
        //fp32 -> fp16   img_meanL1 -> convfp16
	    _viv_asm(CONV, convfp16, img_meanL1);
        VXC_DP2x8(val_meanFP16, val_meanFP16, convfp16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), UniPackLow16bits2x8_P2);
		//read img_meanB FP32
        posin.zw -= (int2)(4, (img_inHeight + 1));
        img_meanL0 = read_imagef(img_mean, posin.zw);
        posin.z += 4;
        img_meanL1 = read_imagef(img_mean, posin.zw);
        //posout1 store G2
        VXC_DP2x8(val_dstFP16, val_meanFP16, val_meanFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackMean_even);
        VXC_DP2x8(val_dstFP16, srcFP16_RGB2, val_dstFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniSrcSubMean2x8);
        _viv_asm(COPY, val_S16, val_dstFP16, 16);
        VXC_WriteImage(out_image, posout1, val_S16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        //posout0 store G3
        VXC_DP2x8(val_dstFP16, val_meanFP16, val_meanFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackMean_odd);
        VXC_DP2x8(val_dstFP16, srcFP16_RGB3, val_dstFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniSrcSubMean2x8);
        _viv_asm(COPY, val_S16, val_dstFP16, 16);
        VXC_WriteImage(out_image, posout0, val_S16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

        //pack srcB0~B3 U8 to FP16
        VXC_DP2x8(srcFP16_RGB0, img_inL10, img_inL11, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackBevenU8toFP16_P1);
        VXC_DP2x8(srcFP16_RGB1, img_inL10, img_inL11, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackBoddU8toFP16_P1);
        VXC_DP2x8(srcFP16_RGB2, img_inL20, img_inL21, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackBevenU8toFP16_P1);
        VXC_DP2x8(srcFP16_RGB3, img_inL20, img_inL21, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackBoddU8toFP16_P1);
        //pos dstB
        posout0.y += out_Height*4;//note: posout0 output dstR/G/B3
        posout1.y += out_Height*4;//note: posout1 output dstR/G/B2
        posout2.y += out_Height*4;//note: posout2 output dstR/G/B1
        posout3.y += out_Height*4;//note: posout3 output dstR/G/B0
        //fp32 -> fp16   img_meanL0 -> convfp16
	    _viv_asm(CONV, convfp16, img_meanL0);
        VXC_DP2x8(val_meanFP16, convfp16, convfp16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackLow16bits2x8_P1);
        //fp32 -> fp16   img_meanL1 -> convfp16
	    _viv_asm(CONV, convfp16, img_meanL1);
        VXC_DP2x8(val_meanFP16, val_meanFP16, convfp16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), UniPackLow16bits2x8_P2);
		//read img_meanR FP32
        posin.zw += (int2)(-4, 1);
        img_meanL0 = read_imagef(img_mean, posin.zw);
        posin.z += 4;
        img_meanL1 = read_imagef(img_mean, posin.zw);
        //posout3 store B0
        VXC_DP2x8(val_dstFP16, val_meanFP16, val_meanFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackMean_even);
        VXC_DP2x8(val_dstFP16, srcFP16_RGB0, val_dstFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniSrcSubMean2x8);
        _viv_asm(COPY, val_S16, val_dstFP16, 16);
        VXC_WriteImage(out_image, posout3, val_S16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        //posout2 store B1
        VXC_DP2x8(val_dstFP16, val_meanFP16, val_meanFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackMean_odd);
        VXC_DP2x8(val_dstFP16, srcFP16_RGB1, val_dstFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniSrcSubMean2x8);
        _viv_asm(COPY, val_S16, val_dstFP16, 16);
        VXC_WriteImage(out_image, posout2, val_S16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));

        //fp32 -> fp16   img_meanL0 -> convfp16
	    _viv_asm(CONV, convfp16, img_meanL0);
        VXC_DP2x8(val_meanFP16, convfp16, convfp16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackLow16bits2x8_P1);
        //fp32 -> fp16   img_meanL1 -> convfp16
	    _viv_asm(CONV, convfp16, img_meanL1);
        VXC_DP2x8(val_meanFP16, val_meanFP16, convfp16, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), UniPackLow16bits2x8_P2);
        //posout1 store B2
        VXC_DP2x8(val_dstFP16, val_meanFP16, val_meanFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackMean_even);
        VXC_DP2x8(val_dstFP16, srcFP16_RGB2, val_dstFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniSrcSubMean2x8);
        _viv_asm(COPY, val_S16, val_dstFP16, 16);
        VXC_WriteImage(out_image, posout1, val_S16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
        //posout0 store B3
        VXC_DP2x8(val_dstFP16, val_meanFP16, val_meanFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniPackMean_odd);
        VXC_DP2x8(val_dstFP16, srcFP16_RGB3, val_dstFP16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0), UniSrcSubMean2x8);
        _viv_asm(COPY, val_S16, val_dstFP16, 16);
        VXC_WriteImage(out_image, posout0, val_S16, VXC_MODIFIER(0, 3, 0, VXC_RM_TowardZero, 0));
#endif
    }
    else
    {
#if 1
        int2 posin = (int2)(0, coord_in.y);

        int inLine_y = coord_in.y % 227;
        int2 posout = (int2)(0, 0);
        int offset_width = (inLine_y  >> 2) * out_Width;
        int out_y = (coord_in.y / 227) * out_Depth + (inLine_y % 4) * 4;

        vxc_uchar16 img_reg0, img_reg1, img_reg2, img_reg3;
        vxc_uchar16 img_reg4, img_reg5, img_reg6, img_reg7;

        vxc_uchar16 u8reg0, u8reg1, u8reg2, u8reg3;
        vxc_uchar16 u8reg4, u8reg5, u8reg6, u8reg7;

        vxc_half8 fp16reg0;
        vxc_short8 s16reg0;

        for (int x = 0; x < (img_inWidth - 96); x += 96)
        {
            //read image
            posin.x = x + 16;
            VXC_ReadImage(img_reg0, in_image, posin, VXC_5BITOFFSET_XY(-16,0), VXC_MODIFIER(0, 11, 0, VXC_RM_TowardZero, 0));
            VXC_ReadImage(img_reg1, in_image, posin, VXC_5BITOFFSET_XY(-4,0), VXC_MODIFIER(0, 11, 0, VXC_RM_TowardZero, 0));
            VXC_ReadImage(img_reg2, in_image, posin, VXC_5BITOFFSET_XY(8,0), VXC_MODIFIER(0, 11, 0, VXC_RM_TowardZero, 0));
            posin.x += 36;
            VXC_ReadImage(img_reg3, in_image, posin, VXC_5BITOFFSET_XY(-16,0), VXC_MODIFIER(0, 11, 0, VXC_RM_TowardZero, 0));
            VXC_ReadImage(img_reg4, in_image, posin, VXC_5BITOFFSET_XY(-4,0), VXC_MODIFIER(0, 11, 0, VXC_RM_TowardZero, 0));
            VXC_ReadImage(img_reg5, in_image, posin, VXC_5BITOFFSET_XY(8,0), VXC_MODIFIER(0, 11, 0, VXC_RM_TowardZero, 0));
            posin.x += 36;
            VXC_ReadImage(img_reg6, in_image, posin, VXC_5BITOFFSET_XY(-16,0), VXC_MODIFIER(0, 11, 0, VXC_RM_TowardZero, 0));
            VXC_ReadImage(img_reg7, in_image, posin, VXC_5BITOFFSET_XY(-4,0), VXC_MODIFIER(0, 11, 0, VXC_RM_TowardZero, 0));
            posout.x = ((x / 3) >> 2) + offset_width;
            posout.y = out_y;
            //pack step1 u8reg0,1,2,3,4,5
            VXC_DP2x8(u8reg0, img_reg0, img_reg1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step1PackU8_B);
            VXC_DP2x8(u8reg0, img_reg0, img_reg1, VXC_MODIFIER(8, 15, 8, VXC_RM_TowardZero, 0), Step1PackU8_G);
            VXC_DP2x8(u8reg1, img_reg0, img_reg1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step1PackU8_R);
            VXC_DP2x8(u8reg1, img_reg2, img_reg3, VXC_MODIFIER(8, 15, 8, VXC_RM_TowardZero, 0), Step1PackU8_B);
            VXC_DP2x8(u8reg2, img_reg2, img_reg3, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step1PackU8_G);
            VXC_DP2x8(u8reg2, img_reg2, img_reg3, VXC_MODIFIER(8, 15, 8, VXC_RM_TowardZero, 0), Step1PackU8_R);
            VXC_DP2x8(u8reg3, img_reg4, img_reg5, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step1PackU8_B);
            VXC_DP2x8(u8reg3, img_reg4, img_reg5, VXC_MODIFIER(8, 15, 8, VXC_RM_TowardZero, 0), Step1PackU8_G);
            VXC_DP2x8(u8reg4, img_reg4, img_reg5, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step1PackU8_R);
            VXC_DP2x8(u8reg4, img_reg6, img_reg7, VXC_MODIFIER(8, 15, 8, VXC_RM_TowardZero, 0), Step1PackU8_B);
            VXC_DP2x8(u8reg5, img_reg6, img_reg7, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step1PackU8_G);
            VXC_DP2x8(u8reg5, img_reg6, img_reg7, VXC_MODIFIER(8, 15, 8, VXC_RM_TowardZero, 0), Step1PackU8_R);
            //pack step2 u8reg6,7,0,1,2,3
            VXC_DP2x8(u8reg6, u8reg0, u8reg1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step2PackU8_B03);
            VXC_DP2x8(u8reg6, u8reg0, u8reg1, VXC_MODIFIER(8, 15, 8, VXC_RM_TowardZero, 0), Step2PackU8_B69);
            VXC_DP2x8(u8reg7, u8reg0, u8reg2, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step2PackU8_G14);
            VXC_DP2x8(u8reg7, u8reg0, u8reg2, VXC_MODIFIER(8, 15, 8, VXC_RM_TowardZero, 0), Step2PackU8_G710);
            VXC_DP2x8(u8reg0, u8reg1, u8reg2, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step2PackU8_R25);
            VXC_DP2x8(u8reg0, u8reg1, u8reg2, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0), Step2PackU8_R811);

            VXC_DP2x8(u8reg1, u8reg3, u8reg4, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step2PackU8_B03);
            VXC_DP2x8(u8reg1, u8reg3, u8reg4, VXC_MODIFIER(8, 15, 8, VXC_RM_TowardZero, 0), Step2PackU8_B69);
            VXC_DP2x8(u8reg2, u8reg3, u8reg5, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step2PackU8_G14);
            VXC_DP2x8(u8reg2, u8reg3, u8reg5, VXC_MODIFIER(8, 15, 8, VXC_RM_TowardZero, 0), Step2PackU8_G710);
            VXC_DP2x8(u8reg3, u8reg4, u8reg5, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step2PackU8_R25);
            VXC_DP2x8(u8reg3, u8reg4, u8reg5, VXC_MODIFIER(8, 15, 0, VXC_RM_TowardZero, 0), Step2PackU8_R811);
            //pack step3 u8->fp16, store s16
            VXC_DP2x8(fp16reg0, u8reg0, u8reg3, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step3PackU8toFP16_pos0);
            _viv_asm(COPY, s16reg0, fp16reg0, 16);
            VXC_WriteImage(out_image, posout, s16reg0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));//store R2(0)
            posout.y += 1;
            VXC_DP2x8(fp16reg0, u8reg0, u8reg3, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step3PackU8toFP16_pos1);
            _viv_asm(COPY, s16reg0, fp16reg0, 16);
            VXC_WriteImage(out_image, posout, s16reg0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));//store R5(1)
            posout.y += 1;
            VXC_DP2x8(fp16reg0, u8reg0, u8reg3, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step3PackU8toFP16_pos2);
            _viv_asm(COPY, s16reg0, fp16reg0, 16);
            VXC_WriteImage(out_image, posout, s16reg0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));//store R8(2)
            posout.y += 1;
            VXC_DP2x8(fp16reg0, u8reg0, u8reg3, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step3PackU8toFP16_pos3);
            _viv_asm(COPY, s16reg0, fp16reg0, 16);
            VXC_WriteImage(out_image, posout, s16reg0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));//store R11(3)
            posout.y += 13;
            VXC_DP2x8(fp16reg0, u8reg7, u8reg2, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step3PackU8toFP16_pos0);
            _viv_asm(COPY, s16reg0, fp16reg0, 16);
            VXC_WriteImage(out_image, posout, s16reg0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));//store G1(0)
            posout.y += 1;
            VXC_DP2x8(fp16reg0, u8reg7, u8reg2, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step3PackU8toFP16_pos1);
            _viv_asm(COPY, s16reg0, fp16reg0, 16);
            VXC_WriteImage(out_image, posout, s16reg0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));//store G4(1)
            posout.y += 1;
            VXC_DP2x8(fp16reg0, u8reg7, u8reg2, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step3PackU8toFP16_pos2);
            _viv_asm(COPY, s16reg0, fp16reg0, 16);
            VXC_WriteImage(out_image, posout, s16reg0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));//store G7(2)
            posout.y += 1;
            VXC_DP2x8(fp16reg0, u8reg7, u8reg2, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step3PackU8toFP16_pos3);
            _viv_asm(COPY, s16reg0, fp16reg0, 16);
            VXC_WriteImage(out_image, posout, s16reg0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));//store G10(3)
            posout.y += 13;
            VXC_DP2x8(fp16reg0, u8reg6, u8reg1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step3PackU8toFP16_pos0);
            _viv_asm(COPY, s16reg0, fp16reg0, 16);
            VXC_WriteImage(out_image, posout, s16reg0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));//store B0(0)
            posout.y += 1;
            VXC_DP2x8(fp16reg0, u8reg6, u8reg1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step3PackU8toFP16_pos1);
            _viv_asm(COPY, s16reg0, fp16reg0, 16);
            VXC_WriteImage(out_image, posout, s16reg0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));//store B3(1)
            posout.y += 1;
            VXC_DP2x8(fp16reg0, u8reg6, u8reg1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step3PackU8toFP16_pos2);
            _viv_asm(COPY, s16reg0, fp16reg0, 16);
            VXC_WriteImage(out_image, posout, s16reg0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));//store B6(2)
            posout.y += 1;
            VXC_DP2x8(fp16reg0, u8reg6, u8reg1, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Step3PackU8toFP16_pos3);
            _viv_asm(COPY, s16reg0, fp16reg0, 16);
            VXC_WriteImage(out_image, posout, s16reg0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0));//store B9(3)
        }
        //the last 9 pixels
        posin.x = 672;
        VXC_ReadImage(img_reg0, in_image, posin, VXC_5BITOFFSET_XY(0,0), VXC_MODIFIER(0, 8, 0, VXC_RM_TowardZero, 0));
        posout.x = 56 + offset_width;
        posout.y = out_y;
        VXC_DP2x8(fp16reg0, img_reg0, img_reg0, VXC_MODIFIER(0, 7, 0, VXC_RM_TowardZero, 0), Last9PackU8toFP16_P1);
        _viv_asm(COPY, s16reg0, fp16reg0, 16);
        VXC_WriteImage(out_image, posout, s16reg0, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));//store R2(0)
        posout.y += 1;
        VXC_WriteImage(out_image, posout, s16reg0, VXC_MODIFIER(1, 1, 0, VXC_RM_TowardZero, 0));//store R5(1)
        posout.y += 1;
        VXC_WriteImage(out_image, posout, s16reg0, VXC_MODIFIER(2, 2, 0, VXC_RM_TowardZero, 0));//store R8(2)
        posout.y += 14;
        VXC_WriteImage(out_image, posout, s16reg0, VXC_MODIFIER(3, 3, 0, VXC_RM_TowardZero, 0));//store G1(0)
        posout.y += 1;
        VXC_WriteImage(out_image, posout, s16reg0, VXC_MODIFIER(4, 4, 0, VXC_RM_TowardZero, 0));//store G4(1)
        posout.y += 1;
        VXC_WriteImage(out_image, posout, s16reg0, VXC_MODIFIER(5, 5, 0, VXC_RM_TowardZero, 0));//store G7(2)
        posout.y += 14;
        VXC_WriteImage(out_image, posout, s16reg0, VXC_MODIFIER(6, 6, 0, VXC_RM_TowardZero, 0));//store B0(0)
        posout.y += 1;
        VXC_WriteImage(out_image, posout, s16reg0, VXC_MODIFIER(7, 7, 0, VXC_RM_TowardZero, 0));//store B3(1)
        VXC_DP2x8(fp16reg0, img_reg0, img_reg0, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0), Last9PackU8toFP16_P2);
        _viv_asm(COPY, s16reg0, fp16reg0, 16);
        posout.y += 1;
        VXC_WriteImage(out_image, posout, s16reg0, VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0));//store B6(2)
#endif
    }
}
