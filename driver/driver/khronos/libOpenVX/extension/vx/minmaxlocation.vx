#include "cl_viv_vx_ext.h"

__kernel void minmaxlocation
(
	__read_only image2d_t in_image,
	global int            *minv,
	global int            *maxv,
    vx_array_int          minl,
    vx_array_int          maxl,
	global int            *minc,
	global int            *maxc
)
{
	const int pX = get_global_id(0);
	const int pY = get_global_id(1);
	uchar current = 0;
#if 0
	uint4 vi4 = read_imageui(in_image, (int2)(pX, pY));
#else
	vxc_uchar16 zero = 0, v = viv_intrinsic_vx_read_imageuc(in_image, (int2)(pX, pY));
	int4 vi4;
	_viv_asm(ADD, vi4, v, zero);
#endif

	current = convert_uchar(vi4.x);

	if(*minv == current)
	{
		int old = atomic_inc(minc);
		if(old < minl.size)
		{
			*(minl.item + old*2) = pX;
			*(minl.item + old*2 + 1) = pY;
		}
	}

	if(*maxv == current)
	{
		int old = atomic_inc(maxc);
		if(old < maxl.size)
		{
			*(maxl.item + old*2) = pX;
			*(maxl.item + old*2 + 1) = pY;
		}
	}
}