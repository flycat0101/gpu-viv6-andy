#include "cl_viv_vx_ext.h"

uchar getMinMax(vxc_uchar16 v, int info)
{
	int4 min_i = 0, temp = 0;
	vxc_uchar16 v1, v2;
	vxc_uchar16 min = 0, min1;

	_viv_asm(ADD, min_i, v, min);
	_viv_asm(ADD, v1, min_i.zwxy, temp);
	_viv_asm(ADD, v2, min_i.wxyz, temp);
	min1 = viv_intrinsic_vxmc_Filter_uc(v, v1, v, info);
	min1 = viv_intrinsic_vxmc_Filter_uc(min1, v2, v, info);
	_viv_asm(ADD, min_i, min1, min);
	_viv_asm(ADD, v1, min_i.yyyy, temp);

	min1= viv_intrinsic_vxmc_Filter_uc(min1, v1, min1, info);
	_viv_asm(ADD, min_i, min1, min);
	return convert_uchar(min_i.x);
}

__kernel void minmax
(
	__read_only image2d_t in_image,
	global int            *minv,
	global int            *maxv
)
{
	const int pX = get_global_id(0);
	const int pY = get_global_id(1);
	int info = VXC_MODIFIER_FILTER(0, 13, 0, VXC_FM_Min, 0);
	vxc_uchar16 v = viv_intrinsic_vx_read_imageuc(in_image, (int2)(pX, pY));

	atomic_min(minv, getMinMax(v, info));
	info = VXC_MODIFIER_FILTER(0, 13, 0, VXC_FM_Max, 0);
	atomic_max(maxv, getMinMax(v, info));
}