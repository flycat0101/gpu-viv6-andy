#include "cl_viv_vx_ext.h"

#define VXC_THRESHOLD_TYPE_BINARY 0xb000
#define VXC_THRESHOLD_TYPE_RANGE 0xb001

vxc_uchar16 viv_intrinsic_vx_icastP_uc2(uint4 a)  { return 0; }

__kernel void threshold
(
    __read_only image2d_t  	in_image,
    vx_threshold     		in_threshold,
    __write_only image2d_t 	out_image
)
{
    const int pX = get_global_id(0);
    const int pY = get_global_id(1);
	int info = VXC_MODIFIER(0, 0, 0, VXC_RM_TowardZero, 0);
	int info1 = VXC_MODIFIER_CLAMP(0, 0, 0, 1);
	vxc_uchar16 v = viv_intrinsic_vx_read_imageuc(in_image, (int2)(pX, pY));
	vxc_uchar16 out;

	if(in_threshold.type == VXC_THRESHOLD_TYPE_BINARY)
	{
		const uint4 c4 = {in_threshold.value, in_threshold.value, in_threshold.value, in_threshold.value};
		const uint4 c7 = {0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff};
		vxc_uchar16 t = viv_intrinsic_vx_icastP_uc2(c4);
		vxc_uchar16 t7 = viv_intrinsic_vx_icastP_uc2(c7);
		out = viv_intrinsic_vxmc_Clamp_uc(v, t, t7, info1);
	}

	if(in_threshold.type == VXC_THRESHOLD_TYPE_RANGE)
	{
		const uint4 c5 = {in_threshold.lower, in_threshold.lower, in_threshold.lower, in_threshold.lower};
		const uint4 c6 = {in_threshold.upper, in_threshold.upper, in_threshold.upper, in_threshold.upper};
		vxc_uchar16 t5 = viv_intrinsic_vx_icastP_uc2(c5);
		vxc_uchar16 t6 = viv_intrinsic_vx_icastP_uc2(c6);
		out = viv_intrinsic_vxmc_Clamp_uc(v, t5, t6, info1);
	}

	viv_intrinsic_vxmc_write_imageuc(out_image, (int2)(pX, pY), out, info);
}