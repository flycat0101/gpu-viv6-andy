/****************************************************************************
*
*    Copyright (c) 2005 - 2016 by Vivante Corp.  All rights reserved.
*
*    The material in this file is confidential and contains trade secrets
*    of Vivante Corporation. This is proprietary information owned by
*    Vivante Corporation. No part of this work may be disclosed,
*    reproduced, copied, transmitted, or used in any way for any purpose,
*    without the express written permission of Vivante Corporation.
*
*****************************************************************************/


#ifndef __gc_gl_bindtable_h_
#define __gc_gl_bindtable_h_

#define REG_MASK_X      (1 << 0)
#define REG_MASK_Y      (1 << 1)
#define REG_MASK_Z      (1 << 2)
#define REG_MASK_W      (1 << 3)

#define REG_MASK_XY     (REG_MASK_X|REG_MASK_Y)
#define REG_MASK_YZ     (REG_MASK_Y|REG_MASK_Z)
#define REG_MASK_ZW    (REG_MASK_Z|REG_MASK_W)

#define REG_MASK_XYZ    (REG_MASK_XY|REG_MASK_Z)
#define REG_MASK_YZW   (REG_MASK_YZ|REG_MASK_W)

#define REG_MASK_ALL    (REG_MASK_XYZ|REG_MASK_W)


/* Stage */
typedef enum __GLSLStageRec{
    __GLSL_VS = 0,
    __GLSL_GS = 1,
    __GLSL_FS = 2,
}__GLSLStage;


/* Data type */
typedef enum __GLSLDataTypeRec{
    __GLSL_DATATYPE_INT = 0,
    __GLSL_DATATYPE_INT_VEC2,
    __GLSL_DATATYPE_INT_VEC3,
    __GLSL_DATATYPE_INT_VEC4,
    __GLSL_DATATYPE_BOOL,
    __GLSL_DATATYPE_BOOL_VEC2,
    __GLSL_DATATYPE_BOOL_VEC3,
    __GLSL_DATATYPE_BOOL_VEC4,
    __GLSL_DATATYPE_FLOAT,
    __GLSL_DATATYPE_FLOAT_VEC2,
    __GLSL_DATATYPE_FLOAT_VEC3,
    __GLSL_DATATYPE_FLOAT_VEC4,
    __GLSL_DATATYPE_FLOAT_MAT2,
    __GLSL_DATATYPE_FLOAT_MAT3,
    __GLSL_DATATYPE_FLOAT_MAT4,
    __GLSL_DATATYPE_FLOAT_MAT2X3,
    __GLSL_DATATYPE_FLOAT_MAT2X4,
    __GLSL_DATATYPE_FLOAT_MAT3X2,
    __GLSL_DATATYPE_FLOAT_MAT3X4,
    __GLSL_DATATYPE_FLOAT_MAT4X2,
    __GLSL_DATATYPE_FLOAT_MAT4X3,

    __GLSL_DATATYPE_UNSIGNED_INT,
    __GLSL_DATATYPE_UNSIGNED_INT_VEC2,
    __GLSL_DATATYPE_UNSIGNED_INT_VEC3,
    __GLSL_DATATYPE_UNSIGNED_INT_VEC4,

    __GLSL_DATATYPE_SAMPLER_1D,
    __GLSL_DATATYPE_SAMPLER_2D,
    __GLSL_DATATYPE_SAMPLER_3D,
    __GLSL_DATATYPE_SAMPLER_CUBE,
    __GLSL_DATATYPE_SAMPLER_2D_RECT,
    __GLSL_DATATYPE_SAMPLER_2D_RECT_SHADOW,
    __GLSL_DATATYPE_SAMPLER_1D_SHADOW,
    __GLSL_DATATYPE_SAMPLER_2D_SHADOW,

    __GLSL_DATATYPE_SAMPLER_1D_ARRAY,
    __GLSL_DATATYPE_SAMPLER_2D_ARRAY,
    __GLSL_DATATYPE_SAMPLER_1D_ARRAY_SHADOW,
    __GLSL_DATATYPE_SAMPLER_2D_ARRAY_SHADOW,
    __GLSL_DATATYPE_SAMPLER_CUBE_SHADOW,
    __GLSL_DATATYPE_SAMPLER_BUFFER,

    __GLSL_DATATYPE_INT_SAMPLER_1D,
    __GLSL_DATATYPE_INT_SAMPLER_2D,
    __GLSL_DATATYPE_INT_SAMPLER_3D,
    __GLSL_DATATYPE_INT_SAMPLER_CUBE,
    __GLSL_DATATYPE_INT_SAMPLER_2D_RECT,
    __GLSL_DATATYPE_INT_SAMPLER_1D_ARRAY,
    __GLSL_DATATYPE_INT_SAMPLER_2D_ARRAY,
    __GLSL_DATATYPE_INT_SAMPLER_BUFFER,

    __GLSL_DATATYPE_UNSIGNED_INT_SAMPLER_1D,
    __GLSL_DATATYPE_UNSIGNED_INT_SAMPLER_2D,
    __GLSL_DATATYPE_UNSIGNED_INT_SAMPLER_3D,
    __GLSL_DATATYPE_UNSIGNED_INT_SAMPLER_CUBE,
    __GLSL_DATATYPE_UNSIGNED_INT_SAMPLER_2D_RECT,
    __GLSL_DATATYPE_UNSIGNED_INT_SAMPLER_1D_ARRAY,
    __GLSL_DATATYPE_UNSIGNED_INT_SAMPLER_2D_ARRAY,
    __GLSL_DATATYPE_UNSIGNED_INT_SAMPLER_BUFFER,

    __GLSL_DATATYPE_STRUCTURE,

    __GLSL_DATATYPE_LAST,
}__GLSLDataType;


/* Definition for attribute & varying */
typedef enum __GLSLDeclUsageRec
{
    __GLSLDECLUSAGE_POSITION = 0,
    __GLSLDECLUSAGE_ATTRIB,         /* user defined attribute */
    __GLSLDECLUSAGE_NORMAL,
    __GLSLDECLUSAGE_POINTSIZE,
    __GLSLDECLUSAGE_TEXCOORD,       /* usage index = 0 - 7 */
    __GLSLDECLUSAGE_CUSTOM,         /* user defined varing */
    __GLSLDECLUSAGE_COLOR,          /* usage index = 0 - 1 */
    __GLSLDECLUSAGE_FOG,
    __GLSLDECLUSAGE_BACKCOLOR,
    __GLSLDECLUSAGE_CLIPVERTEX,
    __GLSLDECLUSAGE_FRONTFACE,      /* this is neither attribute nor varying */
    __GLSLDECLUSAGE_PRIMITVEID,
    __GLSLDECLUSAGE_VERTEXID,
    __GLSLDECLUSAGE_INSTANCEID,

    __GLSLDECLUSAGE_LAST,
}__GLSLDECLUSAGE;

/*
** When mix using fix function path with programmable path, the order of
** vs output register and ps input register should be FIXED to match.
** So, register index of every built-in varing are defined below.
*/
typedef enum __GLSLVaringRegIdxRec{
    __GLSL_VARING_REG_IDX_POSITION               = 0,
    __GLSL_VARING_REG_IDX_FRONT_COLOR            = 1,
    __GLSL_VARING_REG_IDX_FRONT_SECONDARY_COLOR  = 2,
    __GLSL_VARING_REG_IDX_BACK_COLOR             = 3,
    __GLSL_VARING_REG_IDX_BACK_SECONDARY_COLOR   = 4,

    /* ".x" component is used for fog coordinate */
    __GLSL_VARING_REG_IDX_FOGCOORD               = 5,
    __GLSL_VARING_REG_IDX_CLIP_VERTEX            = 6,

    /* ".x" component is used for point size */
    __GLSL_VARING_REG_IDX_POINTSIZE              = 7,
    __GLSL_VARING_REG_IDX_TEXCOORD0              = 8,
    __GLSL_VARING_REG_IDX_TEXCOORD1              = 9,
    __GLSL_VARING_REG_IDX_TEXCOORD2              = 10,
    __GLSL_VARING_REG_IDX_TEXCOORD3              = 11,
    __GLSL_VARING_REG_IDX_TEXCOORD4              = 12,
    __GLSL_VARING_REG_IDX_TEXCOORD5              = 13,
    __GLSL_VARING_REG_IDX_TEXCOORD6              = 14,
    __GLSL_VARING_REG_IDX_TEXCOORD7              = 15,

    __GLSL_VARING_REG_IDX_LAST                   = 16,
}__GLSLVaringRegIdx;


/* Definition for uniform */
typedef enum __GLSLUniformTypeRec{
    /* All user defined uniform will get this type */
    __GLSL_UNIFORM_USER_DEFINED = 0,

    /* Following are types for built-in uniforms */
    /* Matrix */
    __GLSL_UNIFORM_MODELVIEW,
    __GLSL_UNIFORM_PROJECTION,
    __GLSL_UNIFORM_MVP,
    __GLSL_UNIFORM_TEXTURE_MATRIX,

    __GLSL_UNIFORM_NORMAL_MATRIX,

    __GLSL_UNIFORM_MODELVIEW_INV,
    __GLSL_UNIFORM_PROJECTION_INV,
    __GLSL_UNIFORM_MVP_INV,
    __GLSL_UNIFORM_TEXTURE_MATRIX_INV,

    __GLSL_UNIFORM_MODELVIEW_TRANS,
    __GLSL_UNIFORM_PROJECTION_TRANS,
    __GLSL_UNIFORM_MVP_TRANS,
    __GLSL_UNIFORM_TEXTURE_MATRIX_TRANS,

    __GLSL_UNIFORM_MODELVIEW_INVTRANS,
    __GLSL_UNIFORM_PROJECTION_INVTRANS,
    __GLSL_UNIFORM_MVP_INVTRANS,
    __GLSL_UNIFORM_TEXTURE_MATRIX_INVTRANS,

    /* Normal scaling */
    __GLSL_UNIFORM_NORMAL_SCALE,

    /* Depth range */
    __GLSL_UNIFORM_DEPTHRANGE_NEAR,
    __GLSL_UNIFORM_DEPTHRANGE_FAR,
    __GLSL_UNIFORM_DEPTHRANGE_DIFF,

    /* Clip plane */
    __GLSL_UNIFORM_CLIP_PLANE,

    /* Point parameter */
    __GLSL_UNIFORM_POINT_SIZE,
    __GLSL_UNIFORM_POINT_SIZE_MIN,
    __GLSL_UNIFORM_POINT_SIZE_MAX,
    __GLSL_UNIFORM_POINT_FADE_THRESHOLD_SIZE,
    __GLSL_UNIFORM_POINT_DISTANCE_CONST_ATTENU,
    __GLSL_UNIFORM_POINT_DISTANCE_LINEAR_ATTENU,
    __GLSL_UNIFORM_POINT_DISTANCE_QUADRATIC_ATTENU,

    /* Material */
    __GLSL_UNIFORM_FRONT_MATERIAL_EMISSION,
    __GLSL_UNIFORM_FRONT_MATERIAL_AMBIENT,
    __GLSL_UNIFORM_FRONT_MATERIAL_DIFFUSE,
    __GLSL_UNIFORM_FRONT_MATERIAL_SPECULAR,
    __GLSL_UNIFORM_FRONT_MATERIAL_SHININESS,

    __GLSL_UNIFORM_BACK_MATERIAL_EMISSION,
    __GLSL_UNIFORM_BACK_MATERIAL_AMBIENT,
    __GLSL_UNIFORM_BACK_MATERIAL_DIFFUSE,
    __GLSL_UNIFORM_BACK_MATERIAL_SPECULAR,
    __GLSL_UNIFORM_BACK_MATERIAL_SHININESS,

    /* Light source */
    __GLSL_UNIFORM_LIGHT0_AMBIENT,
    __GLSL_UNIFORM_LIGHT1_AMBIENT,
    __GLSL_UNIFORM_LIGHT2_AMBIENT,
    __GLSL_UNIFORM_LIGHT3_AMBIENT,
    __GLSL_UNIFORM_LIGHT4_AMBIENT,
    __GLSL_UNIFORM_LIGHT5_AMBIENT,
    __GLSL_UNIFORM_LIGHT6_AMBIENT,
    __GLSL_UNIFORM_LIGHT7_AMBIENT,

    __GLSL_UNIFORM_LIGHT0_DIFFUSE,
    __GLSL_UNIFORM_LIGHT1_DIFFUSE,
    __GLSL_UNIFORM_LIGHT2_DIFFUSE,
    __GLSL_UNIFORM_LIGHT3_DIFFUSE,
    __GLSL_UNIFORM_LIGHT4_DIFFUSE,
    __GLSL_UNIFORM_LIGHT5_DIFFUSE,
    __GLSL_UNIFORM_LIGHT6_DIFFUSE,
    __GLSL_UNIFORM_LIGHT7_DIFFUSE,

    __GLSL_UNIFORM_LIGHT0_SPECULAR,
    __GLSL_UNIFORM_LIGHT1_SPECULAR,
    __GLSL_UNIFORM_LIGHT2_SPECULAR,
    __GLSL_UNIFORM_LIGHT3_SPECULAR,
    __GLSL_UNIFORM_LIGHT4_SPECULAR,
    __GLSL_UNIFORM_LIGHT5_SPECULAR,
    __GLSL_UNIFORM_LIGHT6_SPECULAR,
    __GLSL_UNIFORM_LIGHT7_SPECULAR,

    __GLSL_UNIFORM_LIGHT0_POSITION,
    __GLSL_UNIFORM_LIGHT1_POSITION,
    __GLSL_UNIFORM_LIGHT2_POSITION,
    __GLSL_UNIFORM_LIGHT3_POSITION,
    __GLSL_UNIFORM_LIGHT4_POSITION,
    __GLSL_UNIFORM_LIGHT5_POSITION,
    __GLSL_UNIFORM_LIGHT6_POSITION,
    __GLSL_UNIFORM_LIGHT7_POSITION,

    __GLSL_UNIFORM_LIGHT0_HALF_VECTOR,
    __GLSL_UNIFORM_LIGHT1_HALF_VECTOR,
    __GLSL_UNIFORM_LIGHT2_HALF_VECTOR,
    __GLSL_UNIFORM_LIGHT3_HALF_VECTOR,
    __GLSL_UNIFORM_LIGHT4_HALF_VECTOR,
    __GLSL_UNIFORM_LIGHT5_HALF_VECTOR,
    __GLSL_UNIFORM_LIGHT6_HALF_VECTOR,
    __GLSL_UNIFORM_LIGHT7_HALF_VECTOR,

    __GLSL_UNIFORM_LIGHT0_SPOT_DIRECTION,
    __GLSL_UNIFORM_LIGHT1_SPOT_DIRECTION,
    __GLSL_UNIFORM_LIGHT2_SPOT_DIRECTION,
    __GLSL_UNIFORM_LIGHT3_SPOT_DIRECTION,
    __GLSL_UNIFORM_LIGHT4_SPOT_DIRECTION,
    __GLSL_UNIFORM_LIGHT5_SPOT_DIRECTION,
    __GLSL_UNIFORM_LIGHT6_SPOT_DIRECTION,
    __GLSL_UNIFORM_LIGHT7_SPOT_DIRECTION,

    __GLSL_UNIFORM_LIGHT0_SPOT_EXPONENT,
    __GLSL_UNIFORM_LIGHT1_SPOT_EXPONENT,
    __GLSL_UNIFORM_LIGHT2_SPOT_EXPONENT,
    __GLSL_UNIFORM_LIGHT3_SPOT_EXPONENT,
    __GLSL_UNIFORM_LIGHT4_SPOT_EXPONENT,
    __GLSL_UNIFORM_LIGHT5_SPOT_EXPONENT,
    __GLSL_UNIFORM_LIGHT6_SPOT_EXPONENT,
    __GLSL_UNIFORM_LIGHT7_SPOT_EXPONENT,

    __GLSL_UNIFORM_LIGHT0_SPOT_CUTOFF,
    __GLSL_UNIFORM_LIGHT1_SPOT_CUTOFF,
    __GLSL_UNIFORM_LIGHT2_SPOT_CUTOFF,
    __GLSL_UNIFORM_LIGHT3_SPOT_CUTOFF,
    __GLSL_UNIFORM_LIGHT4_SPOT_CUTOFF,
    __GLSL_UNIFORM_LIGHT5_SPOT_CUTOFF,
    __GLSL_UNIFORM_LIGHT6_SPOT_CUTOFF,
    __GLSL_UNIFORM_LIGHT7_SPOT_CUTOFF,

    __GLSL_UNIFORM_LIGHT0_SPOT_COS_CUTOFF,
    __GLSL_UNIFORM_LIGHT1_SPOT_COS_CUTOFF,
    __GLSL_UNIFORM_LIGHT2_SPOT_COS_CUTOFF,
    __GLSL_UNIFORM_LIGHT3_SPOT_COS_CUTOFF,
    __GLSL_UNIFORM_LIGHT4_SPOT_COS_CUTOFF,
    __GLSL_UNIFORM_LIGHT5_SPOT_COS_CUTOFF,
    __GLSL_UNIFORM_LIGHT6_SPOT_COS_CUTOFF,
    __GLSL_UNIFORM_LIGHT7_SPOT_COS_CUTOFF,

    __GLSL_UNIFORM_LIGHT0_CONST_ATTENU,
    __GLSL_UNIFORM_LIGHT1_CONST_ATTENU,
    __GLSL_UNIFORM_LIGHT2_CONST_ATTENU,
    __GLSL_UNIFORM_LIGHT3_CONST_ATTENU,
    __GLSL_UNIFORM_LIGHT4_CONST_ATTENU,
    __GLSL_UNIFORM_LIGHT5_CONST_ATTENU,
    __GLSL_UNIFORM_LIGHT6_CONST_ATTENU,
    __GLSL_UNIFORM_LIGHT7_CONST_ATTENU,

    __GLSL_UNIFORM_LIGHT0_LINEAR_ATTENU,
    __GLSL_UNIFORM_LIGHT1_LINEAR_ATTENU,
    __GLSL_UNIFORM_LIGHT2_LINEAR_ATTENU,
    __GLSL_UNIFORM_LIGHT3_LINEAR_ATTENU,
    __GLSL_UNIFORM_LIGHT4_LINEAR_ATTENU,
    __GLSL_UNIFORM_LIGHT5_LINEAR_ATTENU,
    __GLSL_UNIFORM_LIGHT6_LINEAR_ATTENU,
    __GLSL_UNIFORM_LIGHT7_LINEAR_ATTENU,

    __GLSL_UNIFORM_LIGHT0_QUADRATIC_ATTENU,
    __GLSL_UNIFORM_LIGHT1_QUADRATIC_ATTENU,
    __GLSL_UNIFORM_LIGHT2_QUADRATIC_ATTENU,
    __GLSL_UNIFORM_LIGHT3_QUADRATIC_ATTENU,
    __GLSL_UNIFORM_LIGHT4_QUADRATIC_ATTENU,
    __GLSL_UNIFORM_LIGHT5_QUADRATIC_ATTENU,
    __GLSL_UNIFORM_LIGHT6_QUADRATIC_ATTENU,
    __GLSL_UNIFORM_LIGHT7_QUADRATIC_ATTENU,

    /* Light model ambient */
    __GLSL_UNIFORM_LIGHTMODEL_AMBIENT,

    /* Light model product */
    __GLSL_UNIFORM_FRONT_LIGHTMODEL_PRODUCT_SCENECOLOR,
    __GLSL_UNIFORM_BACK_LIGHTMODEL_PRODUCT_SCENECOLOR,

    /* Light product */
    __GLSL_UNIFORM_FRONT_LIGHT0_PRODUCT_AMBIENT,
    __GLSL_UNIFORM_FRONT_LIGHT1_PRODUCT_AMBIENT,
    __GLSL_UNIFORM_FRONT_LIGHT2_PRODUCT_AMBIENT,
    __GLSL_UNIFORM_FRONT_LIGHT3_PRODUCT_AMBIENT,
    __GLSL_UNIFORM_FRONT_LIGHT4_PRODUCT_AMBIENT,
    __GLSL_UNIFORM_FRONT_LIGHT5_PRODUCT_AMBIENT,
    __GLSL_UNIFORM_FRONT_LIGHT6_PRODUCT_AMBIENT,
    __GLSL_UNIFORM_FRONT_LIGHT7_PRODUCT_AMBIENT,

    __GLSL_UNIFORM_FRONT_LIGHT0_PRODUCT_DIFFUSE,
    __GLSL_UNIFORM_FRONT_LIGHT1_PRODUCT_DIFFUSE,
    __GLSL_UNIFORM_FRONT_LIGHT2_PRODUCT_DIFFUSE,
    __GLSL_UNIFORM_FRONT_LIGHT3_PRODUCT_DIFFUSE,
    __GLSL_UNIFORM_FRONT_LIGHT4_PRODUCT_DIFFUSE,
    __GLSL_UNIFORM_FRONT_LIGHT5_PRODUCT_DIFFUSE,
    __GLSL_UNIFORM_FRONT_LIGHT6_PRODUCT_DIFFUSE,
    __GLSL_UNIFORM_FRONT_LIGHT7_PRODUCT_DIFFUSE,

    __GLSL_UNIFORM_FRONT_LIGHT0_PRODUCT_SPECULAR,
    __GLSL_UNIFORM_FRONT_LIGHT1_PRODUCT_SPECULAR,
    __GLSL_UNIFORM_FRONT_LIGHT2_PRODUCT_SPECULAR,
    __GLSL_UNIFORM_FRONT_LIGHT3_PRODUCT_SPECULAR,
    __GLSL_UNIFORM_FRONT_LIGHT4_PRODUCT_SPECULAR,
    __GLSL_UNIFORM_FRONT_LIGHT5_PRODUCT_SPECULAR,
    __GLSL_UNIFORM_FRONT_LIGHT6_PRODUCT_SPECULAR,
    __GLSL_UNIFORM_FRONT_LIGHT7_PRODUCT_SPECULAR,

    __GLSL_UNIFORM_BACK_LIGHT0_PRODUCT_AMBIENT,
    __GLSL_UNIFORM_BACK_LIGHT1_PRODUCT_AMBIENT,
    __GLSL_UNIFORM_BACK_LIGHT2_PRODUCT_AMBIENT,
    __GLSL_UNIFORM_BACK_LIGHT3_PRODUCT_AMBIENT,
    __GLSL_UNIFORM_BACK_LIGHT4_PRODUCT_AMBIENT,
    __GLSL_UNIFORM_BACK_LIGHT5_PRODUCT_AMBIENT,
    __GLSL_UNIFORM_BACK_LIGHT6_PRODUCT_AMBIENT,
    __GLSL_UNIFORM_BACK_LIGHT7_PRODUCT_AMBIENT,

    __GLSL_UNIFORM_BACK_LIGHT0_PRODUCT_DIFFUSE,
    __GLSL_UNIFORM_BACK_LIGHT1_PRODUCT_DIFFUSE,
    __GLSL_UNIFORM_BACK_LIGHT2_PRODUCT_DIFFUSE,
    __GLSL_UNIFORM_BACK_LIGHT3_PRODUCT_DIFFUSE,
    __GLSL_UNIFORM_BACK_LIGHT4_PRODUCT_DIFFUSE,
    __GLSL_UNIFORM_BACK_LIGHT5_PRODUCT_DIFFUSE,
    __GLSL_UNIFORM_BACK_LIGHT6_PRODUCT_DIFFUSE,
    __GLSL_UNIFORM_BACK_LIGHT7_PRODUCT_DIFFUSE,

    __GLSL_UNIFORM_BACK_LIGHT0_PRODUCT_SPECULAR,
    __GLSL_UNIFORM_BACK_LIGHT1_PRODUCT_SPECULAR,
    __GLSL_UNIFORM_BACK_LIGHT2_PRODUCT_SPECULAR,
    __GLSL_UNIFORM_BACK_LIGHT3_PRODUCT_SPECULAR,
    __GLSL_UNIFORM_BACK_LIGHT4_PRODUCT_SPECULAR,
    __GLSL_UNIFORM_BACK_LIGHT5_PRODUCT_SPECULAR,
    __GLSL_UNIFORM_BACK_LIGHT6_PRODUCT_SPECULAR,
    __GLSL_UNIFORM_BACK_LIGHT7_PRODUCT_SPECULAR,

    /* Texture environment color */
    __GLSL_UNIFORM_TEXENV_COLOR,

    /* Texture coordinate generation */
    __GLSL_UNIFORM_TEXGEN_EYE_PLANE_S,
    __GLSL_UNIFORM_TEXGEN_EYE_PLANE_T,
    __GLSL_UNIFORM_TEXGEN_EYE_PLANE_R,
    __GLSL_UNIFORM_TEXGEN_EYE_PLANE_Q,
    __GLSL_UNIFORM_TEXGEN_OBJECT_PLANE_S,
    __GLSL_UNIFORM_TEXGEN_OBJECT_PLANE_T,
    __GLSL_UNIFORM_TEXGEN_OBJECT_PLANE_R,
    __GLSL_UNIFORM_TEXGEN_OBJECT_PLANE_Q,

    /* Fog */
    __GLSL_UNIFORM_FOG_COLOR,
    __GLSL_UNIFORM_FOG_DENSITY,
    __GLSL_UNIFORM_FOG_START,
    __GLSL_UNIFORM_FOG_END,
    __GLSL_UNIFORM_FOG_SCALE,

    __GLSL_UNIFORM_LAST,
}__GLSLUniformType;

/*
** Item of uniform binding table
*/
typedef struct __GLSLUniformItemRec{
    unsigned long dwNameIdx; /* index for uniform name, the name space including sampler */
    GLbyte *lpszUniformName;

    __GLSLUniformType eUniformType;

    __GLSLDataType eDataType;
    GLint bArray;
    unsigned long dwArraySize;

    unsigned long dwStartArrayIdx;
    unsigned long dwEndArrayIdx;

    __GLSLStage eStage;
    unsigned long dwConstBufIdx;
    unsigned long dwStartRegIdx;
    unsigned long dwEndRegIdx;
    unsigned long dwRegMask;
    GLint bindable;
}__GLSLUniformItem;



/*
** Items of sampler binding table
**
** As to sampler arrays, every member of the array will have a item. although it violates spec2.0,
** it can save sampler resources. And our driver will make its  API interface accordant with spec2.0
**
** Items of same sampler array should be adjacent and increased in array index
*/
typedef struct __GLSLSamplerItemRec{
    GLbyte *lpszSamplerName;
    unsigned long dwNameIdx; /* The index of sampler name,  the name space including uniform*/

    __GLSLDataType eDataType;
    GLint bArray;
    unsigned long dwArraySize;

    unsigned long dwArrayIdx;

    GLint bVsSampler;    /* The sampler is used in vertex shader */
    GLint bGsSampler;    /* The sampler is used in geometry shader */
    GLint bPsSampler;    /* The sampler is used in fragment shader */

    unsigned long dwVsSRegIdx;
    unsigned long dwVsTRegIdx;

    unsigned long dwGsSRegIdx;
    unsigned long dwGsTRegIdx;

    unsigned long dwPsSRegIdx;
    unsigned long dwPsTRegIdx;

}__GLSLSamplerItem;


/*
** Item of attribute binding table
*/
typedef struct __GLSLAttributItemRec{
    GLbyte *lpszAttribName;
    __GLSLDECLUSAGE eAttribUsage;
    unsigned long dwUsageIndex;
    __GLSLDataType eDataType;
    unsigned long dwRegisterIdx;
    unsigned long dwRegMask;    /* no use */
}__GLSLAttributeItem;


/*
** Itemsof varing table
** Only built-in varing has corresponding item
*/
typedef struct __GLSLvaringItemRec{
    __GLSLDECLUSAGE eVaringUsage;
    unsigned long dwUsageIndex;
    __GLSLDataType eDataType;
    unsigned long dwRegisterIdx;
    unsigned long dwRegMask;    /* no use */
}__GLSLvaringItem;

/*
** Items of fragment varing out table
*/
typedef struct __GLSLFragVaringOutItemRec{
    GLbyte *lpszFragDataName;
    unsigned long dwColorIdx;
    unsigned long dwRegisterIdx;
    unsigned long dwRegMask;    /* no use */
}__GLSLFragVaringOutItem;

#endif /* __gc_gl_bindtable_h_ */
