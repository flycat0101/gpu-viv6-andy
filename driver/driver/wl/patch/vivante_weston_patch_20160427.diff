diff -pNruU5 weston-1.9.0/Makefile.am weston-1.9.0.new/Makefile.am
--- weston-1.9.0/Makefile.am	2015-08-15 02:28:16.000000000 +0800
+++ weston-1.9.0.new/Makefile.am	2016-04-27 14:56:56.825789228 +0800
@@ -338,10 +338,11 @@ endif
 if ENABLE_FBDEV_COMPOSITOR
 module_LTLIBRARIES += fbdev-backend.la
 fbdev_backend_la_LDFLAGS = -module -avoid-version
 fbdev_backend_la_LIBADD =			\
 	$(COMPOSITOR_LIBS)			\
+	$(EGL_LIBS)                             \
 	$(FBDEV_COMPOSITOR_LIBS)		\
 	$(INPUT_BACKEND_LIBS)			\
 	libsession-helper.la			\
 	libshared.la
 fbdev_backend_la_CFLAGS =			\
diff -pNruU5 weston-1.9.0/src/compositor.c weston-1.9.0.new/src/compositor.c
--- weston-1.9.0/src/compositor.c	2015-08-15 02:28:16.000000000 +0800
+++ weston-1.9.0.new/src/compositor.c	2016-04-27 14:57:18.057788790 +0800
@@ -1373,17 +1373,18 @@ WL_EXPORT void
 weston_view_from_global_fixed(struct weston_view *view,
 			      wl_fixed_t x, wl_fixed_t y,
 			      wl_fixed_t *vx, wl_fixed_t *vy)
 {
 	float vxf, vyf;
-
-	weston_view_from_global_float(view,
+	if(view != NULL){
+		weston_view_from_global_float(view,
 				      wl_fixed_to_double(x),
 				      wl_fixed_to_double(y),
 				      &vxf, &vyf);
-	*vx = wl_fixed_from_double(vxf);
-	*vy = wl_fixed_from_double(vyf);
+		*vx = wl_fixed_from_double(vxf);
+		*vy = wl_fixed_from_double(vyf);
+	}
 }
 
 WL_EXPORT void
 weston_view_from_global(struct weston_view *view,
 			int32_t x, int32_t y, int32_t *vx, int32_t *vy)
diff -pNruU5 weston-1.9.0/src/compositor-fbdev.c weston-1.9.0.new/src/compositor-fbdev.c
--- weston-1.9.0/src/compositor-fbdev.c	2015-09-15 02:23:31.000000000 +0800
+++ weston-1.9.0.new/src/compositor-fbdev.c	2016-04-27 14:57:22.089788707 +0800
@@ -57,10 +57,13 @@ struct fbdev_backend {
 
 	struct udev *udev;
 	struct udev_input input;
 	int use_pixman;
 	struct wl_listener session_listener;
+#ifdef ENABLE_EGL
+	NativeDisplayType display;
+#endif
 };
 
 struct fbdev_screeninfo {
 	unsigned int x_resolution; /* pixels, visible area */
 	unsigned int y_resolution; /* pixels, visible area */
@@ -91,10 +94,14 @@ struct fbdev_output {
 	/* pixman details. */
 	pixman_image_t *hw_surface;
 	pixman_image_t *shadow_surface;
 	void *shadow_buf;
 	uint8_t depth;
+#ifdef ENABLE_EGL
+	NativeDisplayType display;
+	NativeWindowType  window;
+#endif
 };
 
 struct fbdev_parameters {
 	int tty;
 	char *device;
@@ -474,29 +481,35 @@ fbdev_frame_buffer_destroy(struct fbdev_
 	if (munmap(output->fb, output->fb_info.buffer_length) < 0)
 		weston_log("Failed to munmap frame buffer: %s\n",
 		           strerror(errno));
 
 	output->fb = NULL;
+#ifdef ENABLE_EGL
+	if(output->window)
+		fbDestroyWindow(output->window);
+	if(output->display)
+		fbDestroyDisplay(output->display);
+#endif
 }
 
 static void fbdev_output_destroy(struct weston_output *base);
 static void fbdev_output_disable(struct weston_output *base);
 
 static int
 fbdev_output_create(struct fbdev_backend *backend,
-                    const char *device)
+                   int x, int y, const char *device)
 {
 	struct fbdev_output *output;
 	struct weston_config_section *section;
 	int fb_fd;
 	int width, height;
 	unsigned int bytes_per_pixel;
 	struct wl_event_loop *loop;
 	uint32_t config_transform;
 	char *s;
 
-	weston_log("Creating fbdev output.\n");
+	weston_log("Creating fbdev output. %s x=%d y=%d\n", device, x, y);
 
 	output = zalloc(sizeof *output);
 	if (output == NULL)
 		return -1;
 
@@ -545,11 +558,11 @@ fbdev_output_create(struct fbdev_backend
 		weston_log("Invalid transform \"%s\" for output %s\n",
 			   s, output->base.name);
 	free(s);
 
 	weston_output_init(&output->base, backend->compositor,
-	                   0, 0, output->fb_info.width_mm,
+	                   x, y, output->fb_info.width_mm,
 	                   output->fb_info.height_mm,
 	                   config_transform,
 			   1);
 
 	width = output->mode.width;
@@ -568,19 +581,27 @@ fbdev_output_create(struct fbdev_backend
 	}
 
 	if (backend->use_pixman) {
 		if (pixman_renderer_output_create(&output->base) < 0)
 			goto out_shadow_surface;
-	} else {
+	} 
+	else {
+#ifdef ENABLE_EGL
 		setenv("HYBRIS_EGLPLATFORM", "wayland", 1);
+		output->window = fbCreateWindow(backend->display, -1, -1, 0, 0);
+		if (output->window == NULL) {
+			fprintf(stderr, "failed to create window\n");
+			return 0;
+		}
 		if (gl_renderer->output_create(&output->base,
-					       (EGLNativeWindowType)NULL, NULL,
+					       (EGLNativeWindowType)output->window, NULL,
 					       gl_renderer->opaque_attribs,
 					       NULL, 0) < 0) {
 			weston_log("gl_renderer_output_create failed.\n");
 			goto out_shadow_surface;
 		}
+#endif
 	}
 
 
 	loop = wl_display_get_event_loop(backend->compositor->wl_display);
 	output->finish_frame_timer =
@@ -632,11 +653,12 @@ fbdev_output_destroy(struct weston_outpu
 
 		if (output->shadow_buf != NULL) {
 			free(output->shadow_buf);
 			output->shadow_buf = NULL;
 		}
-	} else {
+	}
+	else {
 		gl_renderer->output_destroy(base);
 	}
 
 	/* Remove the output. */
 	weston_output_destroy(&output->base);
@@ -695,11 +717,11 @@ fbdev_output_reenable(struct fbdev_backe
 		/* Remove and re-add the output so that resources depending on
 		 * the frame buffer X/Y resolution (such as the shadow buffer)
 		 * are re-initialised. */
 		device = output->device;
 		fbdev_output_destroy(base);
-		fbdev_output_create(backend, device);
+		fbdev_output_create(backend, 0, 0, device);
 
 		return 0;
 	}
 
 	/* Map the device if it has the same details as before. */
@@ -851,40 +873,45 @@ fbdev_backend_create(struct weston_compo
 
 	backend->base.destroy = fbdev_backend_destroy;
 	backend->base.restore = fbdev_restore;
 
 	backend->prev_state = WESTON_COMPOSITOR_ACTIVE;
-	backend->use_pixman = !param->use_gl;
+	backend->use_pixman = !(param->use_gl);
 
 	for (key = KEY_F1; key < KEY_F9; key++)
 		weston_compositor_add_key_binding(compositor, key,
 		                                  MODIFIER_CTRL | MODIFIER_ALT,
 		                                  switch_vt_binding,
 		                                  compositor);
 	if (backend->use_pixman) {
 		if (pixman_renderer_init(compositor) < 0)
 			goto out_launcher;
-	} else {
+	}
+	else {
+#ifdef ENABLE_EGL
 		gl_renderer = weston_load_module("gl-renderer.so",
 						 "gl_renderer_interface");
 		if (!gl_renderer) {
 			weston_log("could not load gl renderer\n");
 			goto out_launcher;
 		}
 
+		backend->display = fbGetDisplay(backend->compositor->wl_display);
+		if (backend->display == NULL) {
+			weston_log("fbGetDisplay failed.\n");
+			goto out_launcher;
+		}
 		if (gl_renderer->create(compositor, NO_EGL_PLATFORM,
-					EGL_DEFAULT_DISPLAY,
+					backend->display,
 					gl_renderer->opaque_attribs,
 					NULL, 0) < 0) {
 			weston_log("gl_renderer_create failed.\n");
 			goto out_launcher;
 		}
+#endif
 	}
 
-	if (fbdev_output_create(backend, param->device) < 0)
-		goto out_launcher;
-
 	udev_input_init(&backend->input, compositor, backend->udev, seat_id);
 
 	compositor->backend = &backend->base;
 	return backend;
 
@@ -909,17 +936,21 @@ backend_init(struct weston_compositor *c
 	/* TODO: Ideally, available frame buffers should be enumerated using
 	 * udev, rather than passing a device node in as a parameter. */
 	struct fbdev_parameters param = {
 		.tty = 0, /* default to current tty */
 		.device = "/dev/fb0", /* default frame buffer */
+#ifdef ENABLE_EGL
+		.use_gl = 1,
+#else
 		.use_gl = 0,
+#endif
 	};
 
 	const struct weston_option fbdev_options[] = {
 		{ WESTON_OPTION_INTEGER, "tty", 0, &param.tty },
 		{ WESTON_OPTION_STRING, "device", 0, &param.device },
-		{ WESTON_OPTION_BOOLEAN, "use-gl", 0, &param.use_gl },
+		{ WESTON_OPTION_INTEGER, "use-gl", 0, &param.use_gl },
 	};
 
 	parse_options(fbdev_options, ARRAY_LENGTH(fbdev_options), argc, argv);
 
 	b = fbdev_backend_create(compositor, argc, argv, config, &param);
