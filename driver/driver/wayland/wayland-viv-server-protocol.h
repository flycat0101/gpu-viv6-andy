/****************************************************************************
*
*    Copyright 2012 - 2020 Vivante Corporation, Santa Clara, California.
*    All Rights Reserved.
*
*    Permission is hereby granted, free of charge, to any person obtaining
*    a copy of this software and associated documentation files (the
*    'Software'), to deal in the Software without restriction, including
*    without limitation the rights to use, copy, modify, merge, publish,
*    distribute, sub license, and/or sell copies of the Software, and to
*    permit persons to whom the Software is furnished to do so, subject
*    to the following conditions:
*
*    The above copyright notice and this permission notice (including the
*    next paragraph) shall be included in all copies or substantial
*    portions of the Software.
*
*    THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
*    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
*    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
*    IN NO EVENT SHALL VIVANTE AND/OR ITS SUPPLIERS BE LIABLE FOR ANY
*    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
*    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
*    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*
*****************************************************************************/


/* Generated by wayland-scanner 1.11.0 */

#ifndef VIVANTE_SERVER_PROTOCOL_H
#define VIVANTE_SERVER_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-server.h"

#ifdef __cplusplus
extern "C" {
#endif

struct wl_client;
struct wl_resource;

/**
 * @page page_vivante The vivante protocol
 * @section page_ifaces_vivante Interfaces
 * - @subpage page_iface_wl_viv -
 */
struct wl_buffer;
struct wl_viv;

/**
 * @page page_iface_wl_viv wl_viv
 * @section page_iface_wl_viv_api API
 * See @ref iface_wl_viv.
 */
/**
 * @defgroup iface_wl_viv The wl_viv interface
 */
extern const struct wl_interface wl_viv_interface;

/**
 * @ingroup iface_wl_viv
 * @struct wl_viv_interface
 */
struct wl_viv_interface {
    /**
     * Create server side buffer stub
     *
     * Map the client buffer to server side. Buffer is a actually
     * surface object.
     */
    void (*create_buffer)(struct wl_client *client,
                  struct wl_resource *resource,
                  uint32_t id,
                  uint32_t width,
                  uint32_t height,
                  uint32_t stride,
                  int32_t format,
                  int32_t type,
                  uint32_t node,
                  int32_t pool,
                  uint32_t size,
                  uint32_t tsNode,
                  int32_t tsPool,
                  uint32_t tsSize,
                  int32_t fd);
    /**
     * Sync tile status
     *
     * Pass tile status information to server side. @enabled: tile
     * status is now enabled. @compressed: compressed, tile status must
     * be enabled. @dirty: some pixels are not resolved, ie, tile
     * status is dirty. @fc_value: the fast clear value.
     * @fc_value_upper: upper 32bit fast clear value.
     */
    void (*enable_tile_status)(struct wl_client *client,
                   struct wl_resource *resource,
                   struct wl_resource *id,
                   uint32_t enabled,
                   uint32_t compressed,
                   uint32_t dirty,
                   uint32_t fc_value,
                   uint32_t fc_value_upper);
};


#ifdef __cplusplus
}
#endif

#endif
