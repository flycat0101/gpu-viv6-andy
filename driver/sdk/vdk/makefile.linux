##############################################################################
#
#    Copyright 2012 - 2019 Vivante Corporation, Santa Clara, California.
#    All Rights Reserved.
#
#    Permission is hereby granted, free of charge, to any person obtaining
#    a copy of this software and associated documentation files (the
#    'Software'), to deal in the Software without restriction, including
#    without limitation the rights to use, copy, modify, merge, publish,
#    distribute, sub license, and/or sell copies of the Software, and to
#    permit persons to whom the Software is furnished to do so, subject
#    to the following conditions:
#
#    The above copyright notice and this permission notice (including the
#    next paragraph) shall be included in all copies or substantial
#    portions of the Software.
#
#    THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
#    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
#    IN NO EVENT SHALL VIVANTE AND/OR ITS SUPPLIERS BE LIABLE FOR ANY
#    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
#    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
#    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
##############################################################################


#
# This file is a part of Vivante software stack build environment for Linux.
# It defines the rules necessary to build Vivante SDK.
#

################################################################################
# Include the global definitions.

include $(AQROOT)/makefile.linux.def

################################################################################
# Define a shortcut for the main target.

ifeq ($(gcdSTATIC_LINK), 1)
  STATIC            := 1
  TARGET_MODULE     := $(OBJ_DIR)/libVDK.a
else
  DYNAMIC           := 1
  TARGET_MODULE     := $(OBJ_DIR)/libVDK.so
  TARGET_SONAME     := libVDK.so
endif

################################################################################
# Installation directory.

INSTALL_DIR         := $(SDK_DIR)/drivers

################################################################################
# Supply additional include directories.

INCLUDE += -I$(AQROOT)/sdk/inc \
           -I$(AQROOT)/hal/inc

ifeq ($(EGL_API_X),1)
  INCLUDE += -I$(X11_ARM_DIR)/include
endif

ifeq ($(EGL_API_WL),1)
  INCLUDE += -I$(AQROOT)/driver/wl \
             -I$(WAYLAND_DIR)/include \
             -I$(WAYLAND_DIR)/include/wayland-viv
else
  ifeq ($(EGL_API_DRI),1)
  INCLUDE += -I$(X11_ARM_DIR)/include \
             -I$(X11_ARM_DIR)/include/X11/extensions \
             -I$(X11_ARM_DIR)/include/libdrm \
             -I$(AQROOT)/driver/X/DRI/src
  endif
  ifeq ($(X11_DRI3),1)
  INCLUDE += -I$(X11_ARM_DIR)/include \
             -I$(X11_ARM_DIR)/include/X11/extensions \
             -I$(X11_ARM_DIR)/include/libdrm \
             -I$(X11_ARM_DIR)/include/drm
  endif
endif

ifeq ($(EGL_API_GBM),1)
  ifneq ($(GBM_LIBS),)
    INCLUDE += $(GBM_CFLAGS)
  else
    INCLUDE += -I$(AQROOT)/driver/gbm/main
  endif
endif


ifeq ($(EGL_API_DFB), 1)
  INCLUDE += -I$(DFB_DIR)/usr/include
  INCLUDE += -I$(DFB_DIR)/include
  INCLUDE += -I$(DFB_DIR)/include/directfb-internal
  INCLUDE += -I$(DFB_DIR)/include/directfb
endif

CFLAGS += $(INCLUDE)

################################################################################
# Supply additional include directories.

ifneq ($(filter 1,$(EGL_API_X) $(EGL_API_DRI) $(X11_DRI3)),)
  CFLAGS += -DX11
endif

ifneq ($(USE_ARMCC), 1)
  CFLAGS  += -fPIC -Werror

  # These header files don't follow ansi.
  ifeq ($(filter 1,$(EGL_API_WL) $(EGL_API_DFB) $(EGL_API_GBM)),)
    CFLAGS += -ansi
  endif
endif

################################################################################
# Define flags for the linker.

LDFLAGS := $(LFLAGS)

ifneq ($(USE_ARMCC),1)
  ifeq ($(EGL_APPENDIX),)
    LDFLAGS += -Wl,--version-script=libVDK.map
  endif
endif

ifeq ($(USE_ARMCC),1)
  LDFLAGS += --shared -L--soname=,$(TARGET_SONAME)
else
  LDFLAGS += -Wall -Wl,-z,defs -shared -Wl,-soname,$(TARGET_SONAME)
endif


################################################################################
# Supply necessary libraries.

LDLIBS := -L$(SDK_DIR)/drivers -L$(AQROOT)/driver/khronos/libEGL/$(OBJ_DIR) -lEGL -ldl

ifeq ($(EGL_API_WL),1)
  LDLIBS += -L$(WAYLAND_DIR)/lib -lwayland-client -lwayland-cursor
  LDLIBS += -pthread
else
  ifeq ($(EGL_API_DRI), 1)
    LDLIBS += -L$(X11_ARM_DIR)/lib -lXdamage -lXfixes -lXext -lXau -lXdmcp -lX11
  endif

  ifeq ($(X11_DRI3), 1)
    LDLIBS += -L$(X11_ARM_DIR)/lib -lXdamage -lXfixes -lXext -lXau -lXdmcp -lX11 -lX11-xcb -lxcb -lxcb-dri3
  endif
endif

ifeq ($(EGL_API_X),1)
  LDLIBS += -L$(X11_ARM_DIR)/lib -lXau -lXdmcp -lX11
endif

ifeq ($(EGL_API_GBM),1)
  ifneq ($(GBM_LIBS),)
    LDLIBS += $(GBM_LIBS)
  else
    LDLIBS += -lgbm
  endif
endif



################################################################################
# Describe object files.
# Make sure choose default platform when multiple option exist

OBJECTS := $(OBJ_DIR)/gc_vdk_egl.o \
           $(OBJ_DIR)/gc_vdk_gl.o

EGL_API_OBJECT :=
ifeq ($(EGL_API_WL),1)
  EGL_API_OBJECT := $(OBJ_DIR)/gc_vdk_wayland.o $(OBJ_DIR)/ivi-application-protocol.o
else ifeq ($(EGL_API_X),1)
  EGL_API_OBJECT := $(OBJ_DIR)/gc_vdk_x11.o
else ifeq ($(EGL_API_DRI),1)
  EGL_API_OBJECT := $(OBJ_DIR)/gc_vdk_x11.o $(OBJ_DIR)/XF86dri.o
else ifeq ($(X11_DRI3),1)
  EGL_API_OBJECT := $(OBJ_DIR)/gc_vdk_x11.o
else ifeq ($(EGL_API_NULLWS),1)
  EGL_API_OBJECT := $(OBJ_DIR)/gc_vdk_nullws.o
else ifeq ($(EGL_API_FB),1)
  EGL_API_OBJECT := $(OBJ_DIR)/gc_vdk_fbdev.o
else ifeq ($(EGL_API_DFB),1)
  EGL_API_OBJECT := $(OBJ_DIR)/gc_vdk_dfb.o
else ifeq ($(EGL_API_GBM),1)
  EGL_API_OBJECT := $(OBJ_DIR)/gc_vdk_gbm.o
endif

OBJECTS += $(EGL_API_OBJECT)

################################################################################
# Define targets.

.PHONY: all clean install

all: $(TARGET_MODULE)

clean:
	@rm -rf $(OBJ_DIR)

install: all
	@mkdir -p $(INSTALL_DIR)
	@-cp $(TARGET_MODULE) $(INSTALL_DIR)
	@mkdir -p $(SDK_DIR)/include
	@-cp -f  ../inc/gc_vdk.h $(SDK_DIR)/include
	@-cp -f  ../inc/gc_vdk_types.h $(SDK_DIR)/include
	@-cd $(SDK_DIR)/include; echo "#include \"gc_vdk.h\"" >vdk.h

################################################################################
# Module rules.

ifeq ($(STATIC),1)
$(TARGET_MODULE): $(OBJECTS)
	@echo "  ARCHIVE \033[1m$(notdir $@)\033[0m"
	@$(AR) -r -c $@ $(OBJECTS)
ifneq ($(USE_ARMCC),1)
	@$(RANLIB) $@
endif
endif

ifeq ($(DYNAMIC),1)

# module dependencies
$(TARGET_MODULES): $(wildcard $(AQROOT)/driver/khronos/libEGL/$(OBJ_DIR)/libEGL.so \
                              $(AQROOT)/driver/khronos/libEGL/$(OBJ_DIR)/libEGL.a)


$(TARGET_MODULE): $(OBJECTS)
	@echo "  LINK    \033[1m$(notdir $@)\033[0m"
	@$(CC) $(LDFLAGS) -o $@ $(OBJECTS) $(LDLIBS)
endif

################################################################################
# Object rules.

ifeq ($(EGL_API_DRI),1)
  vpath %.c ../../driver/X/DRI/src
endif

$(OBJ_DIR)/%.o: %.c
	@echo "  COMPILE $(abspath $<)"
	@mkdir -p $(OBJ_DIR)
	@$(CC) -c $(CFLAGS) -MMD -o $@ $<

# object dependencies.
-include $(OBJECTS:.o=.d)

