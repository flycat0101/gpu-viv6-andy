##############################################################################
#
#    Copyright (c) 2005 - 2019 by Vivante Corp.  All rights reserved.
#
#    The material in this file is confidential and contains trade secrets
#    of Vivante Corporation. This is proprietary information owned by
#    Vivante Corporation. No part of this work may be disclosed,
#    reproduced, copied, transmitted, or used in any way for any purpose,
#    without the express written permission of Vivante Corporation.
#
##############################################################################


#
# Linux build file for libVSC_Lite library.
#

################################################################################
# Include common definitions.

include $(AQROOT)/makefile.linux.def

################################################################################
# Define target module name.

ifeq ($(gcdSTATIC_LINK), 1)
  STATIC            := 1
  TARGET_NAME       := libVSC_Lite.a
else
  DYNAMIC           := 1
  TARGET_NAME       := libVSC_Lite.so
  TARGET_SONAME     := libVSC_Lite.so
endif

################################################################################
# Installation directory.

INSTALL_DIR         := $(SDK_DIR)/drivers

ifndef FIXED_ARCH_TYPE

TARGET_MODULE       := $(OBJ_DIR)/$(TARGET_NAME)

################################################################################
# Supply additional include directories.

INCLUDE := -I$(AQROOT)/hal/inc \
           -I$(AQARCH)/cmodel/inc \
           -I$(AQROOT)/hal/user \
           -I$(AQROOT)/hal/user/arch \
           -I$(AQROOT)/hal/user/archvg \
           -I$(AQROOT)/hal/os/linux/user \
           -I$(AQROOT)/compiler/libVSC/include

CFLAGS += $(INCLUDE)

################################################################################
# Add extra flags for object files.

ifneq ($(USE_ARMCC), 1)
  ifeq ($(EGL_API_DFB), 1)
    CFLAGS += -pipe -fPIC
  else
    ifeq ($(EGL_API_WL), 1)
      CFLAGS += -fPIC -Werror
    else
      CFLAGS += -fPIC -Werror -ansi
    endif
  endif
endif

ifeq ($(EGL_API_DFB), 1)
  CFLAGS += -DPIC
endif

CFLAGS   += -DVSC_LITE_BUILD=1

################################################################################
# Define flags for the linker.

ifneq ($(USE_ARMCC), 1)
  LFLAGS += -Wl,--version-script=libVSC_Lite.map -Wl,-z,defs
endif

ifeq ($(USE_ARMCC),1)
  LFLAGS += --shared -L--soname=,$(TARGET_SONAME)
else
  LFLAGS += -Wall -Wl,-z,defs -shared -Wl,-soname,$(TARGET_SONAME)
endif

################################################################################
# Supply dependent libraries.

LIBS := -L$(SDK_DIR)/drivers -L$(GAL_DIR)/user/$(OBJ_DIR) -lGAL -lm

################################################################################
# Describe object files.

OBJECTS := \
	$(OBJ_DIR)/gc_vsc_old_compiler.o \
	$(OBJ_DIR)/gc_vsc_old_preprocess.o \
	$(OBJ_DIR)/gc_vsc_old_optimizer_util.o \

ifeq ($(VSC_VIR_BUILD),1)
OBJECTS += \
	$(OBJ_DIR)/gc_vsc_utils_array.o \
	$(OBJ_DIR)/gc_vsc_utils_base_node.o \
	$(OBJ_DIR)/gc_vsc_utils_bit_op.o \
	$(OBJ_DIR)/gc_vsc_utils_data_digest.o \
	$(OBJ_DIR)/gc_vsc_utils_dump.o \
	$(OBJ_DIR)/gc_vsc_utils_err.o \
	$(OBJ_DIR)/gc_vsc_utils_math.o \
	$(OBJ_DIR)/gc_vsc_utils_bm.o \
	$(OBJ_DIR)/gc_vsc_utils_bv.o \
	$(OBJ_DIR)/gc_vsc_utils_sv.o \
	$(OBJ_DIR)/gc_vsc_utils_dg.o \
	$(OBJ_DIR)/gc_vsc_utils_udg.o \
	$(OBJ_DIR)/gc_vsc_utils_hash.o \
	$(OBJ_DIR)/gc_vsc_utils_io.o \
	$(OBJ_DIR)/gc_vsc_utils_bi_list.o \
	$(OBJ_DIR)/gc_vsc_utils_uni_list.o \
	$(OBJ_DIR)/gc_vsc_utils_mm.o \
	$(OBJ_DIR)/gc_vsc_utils_mm_arena.o \
	$(OBJ_DIR)/gc_vsc_utils_mm_buddy.o \
	$(OBJ_DIR)/gc_vsc_utils_mm_primary_pool.o \
	$(OBJ_DIR)/gc_vsc_utils_string.o \
	$(OBJ_DIR)/gc_vsc_utils_block_table.o \
	$(OBJ_DIR)/gc_vsc_utils_tree.o \
	$(OBJ_DIR)/gc_vsc_debug.o \

endif

################################################################################
# Define targets.

.PHONY: all clean install

all: $(TARGET_MODULE)

clean:
	@rm -rf $(OBJ_DIR)

install: all
	@mkdir -p $(INSTALL_DIR)
	@-cp $(TARGET_MODULE) $(INSTALL_DIR)

################################################################################
# Module rules.

ifeq ($(STATIC),1)
$(TARGET_MODULE): $(OBJECTS)
	@echo "  ARCHIVE \033[1m$(notdir $@)\033[0m"
	@$(AR) -r -c $@ $(OBJECTS)
ifneq ($(USE_ARMCC), 1)
	@$(RANLIB) $@
endif
endif

ifeq ($(DYNAMIC),1)

$(TARGET_MODULE): $(wildcard $(AQROOT)/hal/user/$(OBJ_DIR)/libGAL.so \
                             $(AQROOT)/hal/user/$(OBJ_DIR)/libGAL.a)

$(TARGET_MODULE): $(OBJECTS)
	@echo "  LINK    \033[1m$(notdir $@)\033[0m"
	@$(CC) $(LFLAGS) -o $@ $(OBJECTS) $(LIBS)
endif

################################################################################
# Object rules.

vpath
vpath %.c ../libVSC/old_impl
vpath %.c ../libVSC/old_impl/optimizer

ifeq ($(VSC_VIR_BUILD),1)
  vpath %.c ../libVSC/utils
  vpath %.c ../libVSC/utils/array
  vpath %.c ../libVSC/utils/base
  vpath %.c ../libVSC/utils/bitvector
  vpath %.c ../libVSC/utils/graph
  vpath %.c ../libVSC/utils/hash
  vpath %.c ../libVSC/utils/io
  vpath %.c ../libVSC/utils/list
  vpath %.c ../libVSC/utils/mm
  vpath %.c ../libVSC/utils/string
  vpath %.c ../libVSC/utils/table
  vpath %.c ../libVSC/utils/tree
  vpath %.c ../libVSC/debug
endif

$(OBJ_DIR)/%.o: %.c
	@echo "  COMPILE $(abspath $<)"
	@mkdir -p $(OBJ_DIR)
	@$(CC) -c $(CFLAGS) -MMD -o $@ $<

# object dependencies.
-include $(OBJECTS:.o=.d)

else # FIXED_ARCH_TYPE

OBJECTS :=

clean: rmfile

install: cpfile

.PHONY: cpfile rmfile
cpfile:
	@-cp -f $(FIXED_ARCH_TYPE)/$(TARGET_NAME) $(INSTALL_DIR)

rmfile:
	@-rm -f $(INSTALL_DIR)/$(TARGET_NAME)

endif # End FIXED_ARCH_TYPE

