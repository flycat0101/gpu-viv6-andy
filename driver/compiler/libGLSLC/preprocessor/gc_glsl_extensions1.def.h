/****************************************************************************
*
*    Copyright (c) 2005 - 2020 by Vivante Corp.  All rights reserved.
*
*    The material in this file is confidential and contains trade secrets
*    of Vivante Corporation. This is proprietary information owned by
*    Vivante Corporation. No part of this work may be disclosed,
*    reproduced, copied, transmitted, or used in any way for any purpose,
*    without the express written permission of Vivante Corporation.
*
*****************************************************************************/


    {
        "all",
        slvEXTENSION1_ALL,
        gcvFALSE,
        gcvTRUE,
        gcvTRUE,
        gcvFALSE,
        0,
        0XFFFFFFFF,
        gcvNULL
    },
    {
        "GL_KHR_blend_equation_advanced",
         slvEXTENSION1_BLEND_EQUATION_ADVANCED,
         gcvTRUE,
         gcvTRUE,
         gcvTRUE,
         gcvTRUE,
         _SHADER_ES31_VERSION,
         0XFFFFFFFF,
         gcvNULL
    },
    {
        "GL_OES_standard_derivatives",
         slvEXTENSION1_STANDARD_DERIVATIVES,
         gcvTRUE,
         gcvTRUE,
         gcvFALSE,
         gcvTRUE,
         0,
         0XFFFFFFFF,
         gcvNULL
    },
    {
        "GL_OES_texture_3D",
        slvEXTENSION1_TEXTURE_3D,
        gcvTRUE,
        gcvTRUE,
        gcvFALSE,
        gcvFALSE,
        0,
        0XFFFFFFFF,
        gcvNULL
    },
    {
        "GL_OES_EGL_image_external",
        slvEXTENSION1_EGL_IMAGE_EXTERNAL,
        gcvTRUE,
        gcvTRUE,
        gcvFALSE,
        gcvTRUE,
        0,
        0XFFFFFFFF,
        gcvNULL
    },
    {
        "GL_OES_EGL_image_external_essl3",
        slvEXTENSION1_EGL_IMAGE_EXTERNAL_ESSL3,
        gcvTRUE,
        gcvTRUE,
        gcvFALSE,
        gcvTRUE,
        0,
        0XFFFFFFFF,
        gcvNULL
    },
    {
        "GL_OES_texture_storage_multisample_2d_array",
        slvEXTENSION1_TEXTURE_STORAGE_MULTISAMPLE_2D_ARRAY,
        gcvTRUE,
        gcvTRUE,
        gcvTRUE,
        gcvTRUE,
        _SHADER_ES31_VERSION,
        0XFFFFFFFF,
        gcvNULL
    },
    {
        "GL_OES_shader_image_atomic",
        slvEXTENSION1_IMAGE_ATOMIC,
        gcvTRUE,
        gcvTRUE,
        gcvTRUE,
        gcvTRUE,
        _SHADER_ES31_VERSION,
        0XFFFFFFFF,
        gcvNULL
    },
    /* sample shading extension. */
    {
        "GL_OES_sample_variables",
        slvEXTENSION1_SAMPLE_VARIABLES,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        _SHADER_HALTI_VERSION,
        0XFFFFFFFF,
        gcvNULL
    },
    {
        "GL_OES_shader_multisample_interpolation",
        slvEXTENSION1_SHADER_MULTISAMPLE_INTERPOLATION,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        _SHADER_HALTI_VERSION,
        0XFFFFFFFF,
        gcvNULL
    },
    {
        "GL_EXT_texture_array",
        slvEXTENSION1_TEXTURE_ARRAY,
        gcvTRUE,
        gcvTRUE,
        gcvFALSE,
        gcvFALSE,
        0,
        0XFFFFFFFF,
        gcvNULL
    },
    {
        "GL_EXT_frag_depth",
        slvEXTENSION1_FRAG_DEPTH,
        gcvTRUE,
        gcvTRUE,
        gcvFALSE,
        gcvFALSE,
        0,
        0XFFFFFFFF,
        gcvNULL
    },
    {
        "GL_EXT_shadow_samplers",
        slvEXTENSION1_SHADOW_SAMPLER,
        gcvFALSE,
        gcvTRUE,
        gcvFALSE,
        gcvTRUE,
        0,
        0XFFFFFFFF,
        gcvNULL
    },
    /* cube array extension. */
    {
        "GL_EXT_texture_cube_map_array",
        slvEXTENSION1_TEXTURE_CUBE_MAP_ARRAY,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        _SHADER_ES31_VERSION,
        0XFFFFFFFF,
        "GL_OES_texture_cube_map_array"
    },
    /* TS extension. */
    {
        "GL_EXT_tessellation_shader",
        slvEXTENSION1_TESSELLATION_SHADER,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        _SHADER_ES31_VERSION,
        0XFFFFFFFF,
        "GL_OES_tessellation_shader"
    },
    {
        "GL_EXT_tessellation_point_size",
        slvEXTENSION1_TESSELLATION_POINT_SIZE,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        _SHADER_ES31_VERSION,
        0XFFFFFFFF,
        "GL_OES_tessellation_point_size"
    },
    /* GS extension. */
    {
        "GL_EXT_geometry_shader",
        slvEXTENSION1_EXT_GEOMETRY_SHADER,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        _SHADER_ES31_VERSION,
        0XFFFFFFFF,
        "GL_OES_geometry_shader"
    },
    {
        "GL_EXT_geometry_point_size",
        slvEXTENSION1_EXT_GEOMETRY_POINT_SIZE,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        _SHADER_ES31_VERSION,
        0XFFFFFFFF,
        "GL_OES_geometry_point_size"
    },
    /* IO block extension. */
    {
        "GL_EXT_shader_io_blocks",
        slvEXTENSION1_IO_BLOCKS,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        _SHADER_ES31_VERSION,
        0XFFFFFFFF,
        "GL_OES_shader_io_blocks"
    },
    /* GPU_Shader5 extension. */
    {
        "GL_EXT_gpu_shader5",
        slvEXTENSION1_GPU_SHADER5,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        _SHADER_ES31_VERSION,
        0XFFFFFFFF,
        "GL_OES_gpu_shader5"
    },
    /* shader implicit conversions extension. */
    {
        "GL_EXT_shader_implicit_conversions",
        slvEXTENSION1_EXT_SHADER_IMPLICIT_CONVERSIONS,
        gcvTRUE,
        gcvFALSE,
        gcvFALSE,
        gcvTRUE,
        _SHADER_ES31_VERSION,
        0XFFFFFFFF,
        gcvNULL
    },
    /* texture buffer extension. */
    {
        "GL_EXT_texture_buffer",
        slvEXTENSION1_EXT_TEXTURE_BUFFER,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        _SHADER_ES31_VERSION,
        0XFFFFFFFF,
        "GL_OES_texture_buffer"
    },
    /* primitive bounding box extension. */
    {
        "GL_EXT_primitive_bounding_box",
        slvEXTENSION1_EXT_PRIMITIVE_BOUNDING_BOX,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        _SHADER_ES31_VERSION,
        0XFFFFFFFF,
        gcvNULL
    },
    /* frame buffer fetch extension. */
    {
        "GL_EXT_shader_framebuffer_fetch",
        slvEXTENSION1_SHADER_FRAMEBUFFER_FETCH,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        0,
        0XFFFFFFFF,
        "EXT_shader_framebuffer_fetch"
    },
    /* ANDROID_extension_pack_es31a extension. */
    {
        "GL_ANDROID_extension_pack_es31a",
        slvEXTENSION1_ANDROID_EXTENSION_PACK_ES31A,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        gcvFALSE,
        _SHADER_ES31_VERSION,
        0XFFFFFFFF,
        gcvNULL
    },
    /* It is a internal option. */
    {
        "GL_VIV_asm",
        slvEXTENSION1_VASM,
        gcvTRUE,
        gcvTRUE,
        gcvFALSE,
        gcvFALSE,
        0,
        0XFFFFFFFF,
        gcvNULL
    },