/****************************************************************************
*
*    Copyright (c) 2005 - 2018 by Vivante Corp.  All rights reserved.
*
*    The material in this file is confidential and contains trade secrets
*    of Vivante Corporation. This is proprietary information owned by
*    Vivante Corporation. No part of this work may be disclosed,
*    reproduced, copied, transmitted, or used in any way for any purpose,
*    without the express written permission of Vivante Corporation.
*
*****************************************************************************/


  {
        "__unknown",
        VIR_TYPE_UNKNOWN,
        0,
        0,
        0,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        0,
        0,
        VIR_TY_INVALID
    },
    {
        "void",
        VIR_TYPE_VOID,
        0,
        0,
        0,
        VIR_TYPE_VOID,
        VIR_TYPE_VOID,
        0/* size */,
        0,
        0,
        0,
        VIR_TY_VOID
    },
    {
        "float",
        VIR_TYPE_FLOAT32,
        1,
        1,
        1,
        VIR_TYPE_FLOAT32,
        VIR_TYPE_FLOAT32,
        4/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        4,
        VIR_TY_SCALAR
    },
    {
        "half",
        VIR_TYPE_FLOAT16,
        1,
        1,
        1,
        VIR_TYPE_FLOAT16,
        VIR_TYPE_FLOAT16,
        2/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        2,
        VIR_TY_SCALAR
    },
    {
        "int",
        VIR_TYPE_INT32,
        1,
        1,
        1,
        VIR_TYPE_INT32,
        VIR_TYPE_INT32,
        4/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        4,
        VIR_TY_SCALAR
    },
    {
        "short",
        VIR_TYPE_INT16,
        1,
        1,
        1,
        VIR_TYPE_INT16,
        VIR_TYPE_INT16,
        2/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        2,
        VIR_TY_SCALAR
    },
    {
        "char",
        VIR_TYPE_INT8,
        1,
        1,
        1,
        VIR_TYPE_INT8,
        VIR_TYPE_INT8,
        1/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        1,
        VIR_TY_SCALAR
    },
    {
        "uint",
        VIR_TYPE_UINT32,
        1,
        1,
        1,
        VIR_TYPE_UINT32,
        VIR_TYPE_UINT32,
        4/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        4,
        VIR_TY_SCALAR
    },
    {
        "ushort",
        VIR_TYPE_UINT16,
        1,
        1,
        1,
        VIR_TYPE_UINT16,
        VIR_TYPE_UINT16,
        2/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        2,
        VIR_TY_SCALAR
    },
    {
        "uchar",
        VIR_TYPE_UINT8,
        1,
        1,
        1,
        VIR_TYPE_UINT8,
        VIR_TYPE_UINT8,
        1/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        1,
        VIR_TY_SCALAR
    },
    {
        "snorm16",
        VIR_TYPE_SNORM16,
        1,
        1,
        1,
        VIR_TYPE_SNORM16,
        VIR_TYPE_SNORM16,
        2/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        4,
        VIR_TY_SCALAR
    },
    {
        "snorm8",
        VIR_TYPE_SNORM8,
        1,
        1,
        1,
        VIR_TYPE_SNORM8,
        VIR_TYPE_SNORM8,
        1/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        4,
        VIR_TY_SCALAR
    },
    {
        "unorm16",
        VIR_TYPE_UNORM16,
        1,
        1,
        1,
        VIR_TYPE_UNORM16,
        VIR_TYPE_UNORM16,
        2/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        4,
        VIR_TY_SCALAR
    },
    {
        "unorm8",
        VIR_TYPE_UNORM8,
        1,
        1,
        1,
        VIR_TYPE_UNORM8,
        VIR_TYPE_UNORM8,
        1/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        4,
        VIR_TY_SCALAR
    },
    {
        "int64",
        VIR_TYPE_INT64,
        1,
        1,
        2,
        VIR_TYPE_INT64,
        VIR_TYPE_INT64,
        8/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        4,
        VIR_TY_SCALAR
    },
    {
        "uint64",
        VIR_TYPE_UINT64,
        1,
        1,
        2,
        VIR_TYPE_UINT64,
        VIR_TYPE_UINT64,
        8/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        4,
        VIR_TY_SCALAR
    },
    /* double  type, fake it as float32 internally,
     * need to change it to real double when HW double is supported */
    {
        "double",
        VIR_TYPE_FLOAT64,
        1,
        1,
        1,
        VIR_TYPE_FLOAT32,
        VIR_TYPE_FLOAT32,
        4/* size */, /* pretent the size to be 32-bit float */
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        4,
        VIR_TY_SCALAR
    },
    {
        "bool",
        VIR_TYPE_BOOLEAN,
        1,
        1,
        1,
        VIR_TYPE_BOOLEAN,
        VIR_TYPE_BOOLEAN,
        4/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_BOOLEAN,
        4,
        VIR_TY_SCALAR
    },
    {
        "vec2",
        VIR_TYPE_FLOAT_X2,
        2,
        2,
        1,
        VIR_TYPE_FLOAT_X2,
        VIR_TYPE_FLOAT32,
        8/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        8,
        VIR_TY_VECTOR
    },
    {
        "vec3",
        VIR_TYPE_FLOAT_X3,
        3,
        3,
        1,
        VIR_TYPE_FLOAT_X3,
        VIR_TYPE_FLOAT32,
        12/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        16,
        VIR_TY_VECTOR
    },
    {
        "vec4",
        VIR_TYPE_FLOAT_X4,
        4,
        4,
        1,
        VIR_TYPE_FLOAT_X4,
        VIR_TYPE_FLOAT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        16,
        VIR_TY_VECTOR
    },
    {
        "vec8",
        VIR_TYPE_FLOAT_X8,
        4,
        4,
        2,
        VIR_TYPE_FLOAT_X4,
        VIR_TYPE_FLOAT32,
        32/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        16,
        VIR_TY_VECTOR
    },
    {
        "vec16",
        VIR_TYPE_FLOAT_X16,
        4,
        4,
        4,
        VIR_TYPE_FLOAT_X4,
        VIR_TYPE_FLOAT32,
        64/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        16,
        VIR_TY_VECTOR
    },
    {
        "vec32",
        VIR_TYPE_FLOAT_X32,
        4,
        4,
        8,
        VIR_TYPE_FLOAT_X4,
        VIR_TYPE_FLOAT32,
        128/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        16,
        VIR_TY_VECTOR
    },
    {
        "hvec2",
        VIR_TYPE_FLOAT16_X2,
        2,
        2,
        1,
        VIR_TYPE_FLOAT16_X2,
        VIR_TYPE_FLOAT16,
        8/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        4,
        VIR_TY_VECTOR
    },
    {
        "hvec3",
        VIR_TYPE_FLOAT16_X3,
        3,
        3,
        1,
        VIR_TYPE_FLOAT16_X3,
        VIR_TYPE_FLOAT16,
        12/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        8,
        VIR_TY_VECTOR
    },
    {
        "hvec4",
        VIR_TYPE_FLOAT16_X4,
        4,
        4,
        1,
        VIR_TYPE_FLOAT16_X4,
        VIR_TYPE_FLOAT16,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        8,
        VIR_TY_VECTOR
    },
    {
        "hvec8",
        VIR_TYPE_FLOAT16_X8,
        4,
        4,
        2,
        VIR_TYPE_FLOAT16_X4,
        VIR_TYPE_FLOAT16,
        32/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        8,
        VIR_TY_VECTOR
    },
    {
        "hvec16",
        VIR_TYPE_FLOAT16_X16,
        4,
        4,
        4,
        VIR_TYPE_FLOAT16_X4,
        VIR_TYPE_FLOAT16,
        64/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        8,
        VIR_TY_VECTOR
    },
    {
        "hvec32",
        VIR_TYPE_FLOAT16_X32,
        4,
        4,
        8,
        VIR_TYPE_FLOAT16_X4,
        VIR_TYPE_FLOAT16,
        128/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        8,
        VIR_TY_VECTOR
    },

    /* double vector type, fake it as float32 vector internally,
     * need to change it to real double when HW double is supported */
    {
        "dvec2",
        VIR_TYPE_FLOAT64_X2,
        2,
        2,
        1,
        VIR_TYPE_FLOAT_X2,
        VIR_TYPE_FLOAT32,
        8/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        8,
        VIR_TY_VECTOR
    },
    {
        "dvec3",
        VIR_TYPE_FLOAT64_X3,
        3,
        3,
        1,
        VIR_TYPE_FLOAT_X3,
        VIR_TYPE_FLOAT32,
        12/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        16,
        VIR_TY_VECTOR
    },
    {
        "dvec4",
        VIR_TYPE_FLOAT64_X4,
        4,
        4,
        1,
        VIR_TYPE_FLOAT_X4,
        VIR_TYPE_FLOAT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        16,
        VIR_TY_VECTOR
    },
    {
        "dvec8",
        VIR_TYPE_FLOAT64_X8,
        4,
        4,
        2,
        VIR_TYPE_FLOAT_X4,
        VIR_TYPE_FLOAT32,
        32/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        16,
        VIR_TY_VECTOR
    },
    {
        "dvec16",
        VIR_TYPE_FLOAT64_X16,
        4,
        4,
        4,
        VIR_TYPE_FLOAT_X4,
        VIR_TYPE_FLOAT32,
        64/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        16,
        VIR_TY_VECTOR
    },
    {
        "dvec32",
        VIR_TYPE_FLOAT64_X32,
        4,
        4,
        8,
        VIR_TYPE_FLOAT_X4,
        VIR_TYPE_FLOAT32,
        128/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        16,
        VIR_TY_VECTOR
    },

    {
        "bvec2",
        VIR_TYPE_BOOLEAN_X2,
        2,
        2,
        1,
        VIR_TYPE_BOOLEAN_X2,
        VIR_TYPE_BOOLEAN,
        8/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_BOOLEAN,
        8,
        VIR_TY_VECTOR
    },
    {
        "bvec3",
        VIR_TYPE_BOOLEAN_X3,
        3,
        3,
        1,
        VIR_TYPE_BOOLEAN_X3,
        VIR_TYPE_BOOLEAN,
        12/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_BOOLEAN,
        16,
        VIR_TY_VECTOR
    },
    {
        "bvec4",
        VIR_TYPE_BOOLEAN_X4,
        4,
        4,
        1,
        VIR_TYPE_BOOLEAN_X4,
        VIR_TYPE_BOOLEAN,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_BOOLEAN,
        16,
        VIR_TY_VECTOR
    },
    {
        "bvec8",
        VIR_TYPE_BOOLEAN_X8,
        4,
        4,
        2,
        VIR_TYPE_BOOLEAN_X4,
        VIR_TYPE_BOOLEAN,
        32/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_BOOLEAN,
        16,
        VIR_TY_VECTOR
    },
    {
        "bvec16",
        VIR_TYPE_BOOLEAN_X16,
        4,
        4,
        4,
        VIR_TYPE_BOOLEAN_X4,
        VIR_TYPE_BOOLEAN,
        64/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_BOOLEAN,
        16,
        VIR_TY_VECTOR
    },
    {
        "bvec32",
        VIR_TYPE_BOOLEAN_X32,
        4,
        4,
        8,
        VIR_TYPE_BOOLEAN_X4,
        VIR_TYPE_BOOLEAN,
        128/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_BOOLEAN,
        16,
        VIR_TY_VECTOR
    },
    {
        "ivec2",
        VIR_TYPE_INTEGER_X2,
        2,
        2,
        1,
        VIR_TYPE_INTEGER_X2,
        VIR_TYPE_INT32,
        8/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        8,
        VIR_TY_VECTOR
    },
    {
        "ivec3",
        VIR_TYPE_INTEGER_X3,
        3,
        3,
        1,
        VIR_TYPE_INTEGER_X3,
        VIR_TYPE_INT32,
        12/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        16,
        VIR_TY_VECTOR
    },
    {
        "ivec4",
        VIR_TYPE_INTEGER_X4,
        4,
        4,
        1,
        VIR_TYPE_INTEGER_X4,
        VIR_TYPE_INT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        16,
        VIR_TY_VECTOR
    },
    {
        "ivec8",
        VIR_TYPE_INTEGER_X8,
        4,
        4,
        2,
        VIR_TYPE_INTEGER_X4,
        VIR_TYPE_INT32,
        32/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        16,
        VIR_TY_VECTOR
    },
    {
        "ivec16",
        VIR_TYPE_INTEGER_X16,
        4,
        4,
        4,
        VIR_TYPE_INTEGER_X4,
        VIR_TYPE_INT32,
        64/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        16,
        VIR_TY_VECTOR
    },
    {
        "ivec32",
        VIR_TYPE_INTEGER_X32,
        4,
        4,
        8,
        VIR_TYPE_INTEGER_X4,
        VIR_TYPE_INT32,
        128/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        16,
        VIR_TY_VECTOR
    },
    {
        "uvec2",
        VIR_TYPE_UINT_X2,
        2,
        2,
        1,
        VIR_TYPE_UINT_X2,
        VIR_TYPE_UINT32,
        8/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        8,
        VIR_TY_VECTOR
    },
    {
        "uvec3",
        VIR_TYPE_UINT_X3,
        3,
        3,
        1,
        VIR_TYPE_UINT_X3,
        VIR_TYPE_UINT32,
        12/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        16,
        VIR_TY_VECTOR
    },
    {
        "uvec4",
        VIR_TYPE_UINT_X4,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        16,
        VIR_TY_VECTOR
    },
    {
        "uvec8",
        VIR_TYPE_UINT_X8,
        4,
        4,
        2,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        32/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        16,
        VIR_TY_VECTOR
    },
    {
        "uvec16",
        VIR_TYPE_UINT_X16,
        4,
        4,
        4,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        64/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        16,
        VIR_TY_VECTOR
    },
    {
        "uvec32",
        VIR_TYPE_UINT_X32,
        4,
        4,
        8,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        128/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        16,
        VIR_TY_VECTOR
    },
    /* uchar vectors */
    {
        "uchar_X2",
        VIR_TYPE_UINT8_X2,
        2,
        2,
        1,
        VIR_TYPE_UINT8_X2,
        VIR_TYPE_UINT8,
        8/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        2,
        VIR_TY_VECTOR
    },
    {
        "uchar_X3",
        VIR_TYPE_UINT8_X3,
        3,
        3,
        1,
        VIR_TYPE_UINT8_X3,
        VIR_TYPE_UINT8,
        12/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        4,
        VIR_TY_VECTOR
    },
    {
        "uchar_X4",
        VIR_TYPE_UINT8_X4,
        4,
        4,
        1,
        VIR_TYPE_UINT8_X4,
        VIR_TYPE_UINT8,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        4,
        VIR_TY_VECTOR
    },
    {
        "uchar_X8",
        VIR_TYPE_UINT8_X8,
        4,
        4,
        2,
        VIR_TYPE_UINT8_X4,
        VIR_TYPE_UINT8,
        32/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        4,
        VIR_TY_VECTOR
    },
    {
        "uchar_X16",
        VIR_TYPE_UINT8_X16,
        4,
        4,
        4,
        VIR_TYPE_UINT8_X4,
        VIR_TYPE_UINT8,
        64/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        4,
        VIR_TY_VECTOR
    },
    {
        "uchar_X32",
        VIR_TYPE_UINT8_X32,
        4,
        4,
        8,
        VIR_TYPE_UINT8_X4,
        VIR_TYPE_UINT8,
        128/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        4,
        VIR_TY_VECTOR
    },

    /* char vectors */
    {
        "char_X2",
        VIR_TYPE_INT8_X2,
        2,
        2,
        1,
        VIR_TYPE_INT8_X2,
        VIR_TYPE_INT8,
        8/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        2,
        VIR_TY_VECTOR
    },
    {
        "char_X3",
        VIR_TYPE_INT8_X3,
        3,
        3,
        1,
        VIR_TYPE_INT8_X3,
        VIR_TYPE_INT8,
        12/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        4,
        VIR_TY_VECTOR
    },
    {
        "char_X4",
        VIR_TYPE_INT8_X4,
        4,
        4,
        1,
        VIR_TYPE_INT8_X4,
        VIR_TYPE_INT8,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        4,
        VIR_TY_VECTOR
    },
    {
        "char_X8",
        VIR_TYPE_INT8_X8,
        4,
        4,
        2,
        VIR_TYPE_INT8_X4,
        VIR_TYPE_INT8,
        32/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        4,
        VIR_TY_VECTOR
    },
    {
        "char_X16",
        VIR_TYPE_INT8_X16,
        4,
        4,
        4,
        VIR_TYPE_INT8_X4,
        VIR_TYPE_INT8,
        64/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        4,
        VIR_TY_VECTOR
    },
    {
        "char_X32",
        VIR_TYPE_INT8_X32,
        4,
        4,
        8,
        VIR_TYPE_INT8_X4,
        VIR_TYPE_INT8,
        128/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        4,
        VIR_TY_VECTOR
    },
    /* ushort vectors */
    {
        "ushort_X2",
        VIR_TYPE_UINT16_X2,
        2,
        2,
        1,
        VIR_TYPE_UINT16_X2,
        VIR_TYPE_UINT16,
        8/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        4,
        VIR_TY_VECTOR
    },
    {
        "ushort_X3",
        VIR_TYPE_UINT16_X3,
        3,
        3,
        1,
        VIR_TYPE_UINT16_X3,
        VIR_TYPE_UINT16,
        12/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        8,
        VIR_TY_VECTOR
    },
    {
        "ushort_X4",
        VIR_TYPE_UINT16_X4,
        4,
        4,
        1,
        VIR_TYPE_UINT16_X4,
        VIR_TYPE_UINT16,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        8,
        VIR_TY_VECTOR
    },
    {
        "ushort_X8",
        VIR_TYPE_UINT16_X8,
        4,
        4,
        2,
        VIR_TYPE_UINT16_X4,
        VIR_TYPE_UINT16,
        32/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        8,
        VIR_TY_VECTOR
    },
    {
        "ushort_X16",
        VIR_TYPE_UINT16_X16,
        4,
        4,
        4,
        VIR_TYPE_UINT16_X4,
        VIR_TYPE_UINT16,
        64/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        8,
        VIR_TY_VECTOR
    },
    {
        "ushort_X32",
        VIR_TYPE_UINT16_X32,
        4,
        4,
        8,
        VIR_TYPE_UINT16_X4,
        VIR_TYPE_UINT16,
        128/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        8,
        VIR_TY_VECTOR
    },

    /* short vectors */
    {
        "short_X2",
        VIR_TYPE_INT16_X2,
        2,
        2,
        1,
        VIR_TYPE_INT16_X2,
        VIR_TYPE_INT16,
        8/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        4,
        VIR_TY_VECTOR
    },
    {
        "short_X3",
        VIR_TYPE_INT16_X3,
        3,
        3,
        1,
        VIR_TYPE_INT16_X3,
        VIR_TYPE_INT16,
        12/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        8,
        VIR_TY_VECTOR
    },
    {
        "short_X4",
        VIR_TYPE_INT16_X4,
        4,
        4,
        1,
        VIR_TYPE_INT16_X4,
        VIR_TYPE_INT16,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        8,
        VIR_TY_VECTOR
    },
    {
        "short_X8",
        VIR_TYPE_INT16_X8,
        4,
        4,
        2,
        VIR_TYPE_INT16_X4,
        VIR_TYPE_INT16,
        32/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        8,
        VIR_TY_VECTOR
    },
    {
        "short_X16",
        VIR_TYPE_INT16_X16,
        4,
        4,
        4,
        VIR_TYPE_INT16_X4,
        VIR_TYPE_INT16,
        64/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        8,
        VIR_TY_VECTOR
    },
    {
        "short_X32",
        VIR_TYPE_INT16_X32,
        4,
        4,
        8,
        VIR_TYPE_INT16_X4,
        VIR_TYPE_INT16,
        128/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        8,
        VIR_TY_VECTOR
    },

    /* ulong vectors */
    {
        "ulong_X2",
        VIR_TYPE_UINT64_X2,
        2,
        2,
        2,
        VIR_TYPE_UINT_X2,
        VIR_TYPE_UINT64,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        16,
        VIR_TY_VECTOR
    },
    {
        "ulong_X3",
        VIR_TYPE_UINT64_X3,
        3,
        3,
        2,
        VIR_TYPE_UINT_X3,
        VIR_TYPE_UINT64,
        24/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        32,
        VIR_TY_VECTOR
    },
    {
        "ulong_X4",
        VIR_TYPE_UINT64_X4,
        4,
        4,
        2,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT64,
        32/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        32,
        VIR_TY_VECTOR
    },
    {
        "ulong_X8",
        VIR_TYPE_UINT64_X8,
        4,
        4,
        8,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT64,
        64/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        32,
        VIR_TY_VECTOR
    },
    {
        "ulong_X16",
        VIR_TYPE_UINT64_X16,
        4,
        4,
        16,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT64,
        128/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        32,
        VIR_TY_VECTOR
    },
    {
        "ulong_X32",
        VIR_TYPE_UINT64_X32,
        4,
        4,
        32,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT64,
        256/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        32,
        VIR_TY_VECTOR
    },

    /* long vectors */
    {
        "long_X2",
        VIR_TYPE_INT64_X2,
        2,
        2,
        2,
        VIR_TYPE_INTEGER_X2,
        VIR_TYPE_INT64,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        16,
        VIR_TY_VECTOR
    },
    {
        "long_X3",
        VIR_TYPE_INT64_X3,
        3,
        3,
        2,
        VIR_TYPE_INTEGER_X3,
        VIR_TYPE_INT64,
        24/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        32,
        VIR_TY_VECTOR
    },
    {
        "long_X4",
        VIR_TYPE_INT64_X4,
        4,
        4,
        2,
        VIR_TYPE_INTEGER_X4,
        VIR_TYPE_INT64,
        32/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        32,
        VIR_TY_VECTOR
    },
    {
        "long_X8",
        VIR_TYPE_INT64_X8,
        4,
        4,
        4,
        VIR_TYPE_INTEGER_X4,
        VIR_TYPE_INT64,
        64/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        32,
        VIR_TY_VECTOR
    },
    {
        "long_X16",
        VIR_TYPE_INT64_X16,
        4,
        4,
        16,
        VIR_TYPE_INTEGER_X4,
        VIR_TYPE_INT64,
        128/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        32,
        VIR_TY_VECTOR
    },
    {
        "long_X32",
        VIR_TYPE_INT64_X32,
        4,
        4,
        32,
        VIR_TYPE_INTEGER_X4,
        VIR_TYPE_INT64,
        256/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SIGNED_INT,
        32,
        VIR_TY_VECTOR
    },

    /* packed data type */

    /* packed float16 (2 bytes per element) */
    {
        "half_P2",
        VIR_TYPE_FLOAT16_P2,
        1,
        2,
        1,
        VIR_TYPE_FLOAT16_P2,
        VIR_TYPE_FLOAT16,
        4/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_ISFLOAT,
        4,
        VIR_TY_VECTOR
    },
    {
        "half_P3",
        VIR_TYPE_FLOAT16_P3,
        1,
        3,
        1,
        VIR_TYPE_FLOAT16_P3,
        VIR_TYPE_FLOAT16,
        6/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_ISFLOAT,
        8,
        VIR_TY_VECTOR
    },
    {
        "half_P4",
        VIR_TYPE_FLOAT16_P4,
        1,
        4,
        1,
        VIR_TYPE_FLOAT16_P4,
        VIR_TYPE_FLOAT16,
        8/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_ISFLOAT,
        8,
        VIR_TY_VECTOR
    },
    {
        "half_P8",
        VIR_TYPE_FLOAT16_P8,
        2,
        8,
        1,
        VIR_TYPE_FLOAT16_P8,
        VIR_TYPE_FLOAT16,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_ISFLOAT,
        8,
        VIR_TY_VECTOR
    },
    {
        "half_P16",
        VIR_TYPE_FLOAT16_P16,
        4,
        8,
        2,
        VIR_TYPE_FLOAT16_P8,
        VIR_TYPE_FLOAT16,
        32/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_ISFLOAT,
        8,
        VIR_TY_VECTOR
    },
    {
        "half_P32",
        VIR_TYPE_FLOAT16_P32,
        4,
        8,
        4,
        VIR_TYPE_FLOAT16_P8,
        VIR_TYPE_FLOAT16,
        64/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_ISFLOAT,
        8,
        VIR_TY_VECTOR
    },

    /* packed boolean (1 byte per element) */
    {
        "bool_P2",
        VIR_TYPE_BOOLEAN_P2,
        1,
        2,
        1,
        VIR_TYPE_BOOLEAN_P2,
        VIR_TYPE_BOOLEAN,
        2/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_BOOLEAN,
        8,
        VIR_TY_VECTOR
    },
    {
        "bool_P3",
        VIR_TYPE_BOOLEAN_P3,
        1,
        3,
        1,
        VIR_TYPE_BOOLEAN_P3,
        VIR_TYPE_BOOLEAN,
        3/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_BOOLEAN,
        16,
        VIR_TY_VECTOR
    },
    {
        "bool_P4",
        VIR_TYPE_BOOLEAN_P4,
        1,
        4,
        1,
        VIR_TYPE_BOOLEAN_P4,
        VIR_TYPE_BOOLEAN,
        4/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_BOOLEAN,
        16,
        VIR_TY_VECTOR
    },
    {
        "bool_P8",
        VIR_TYPE_BOOLEAN_P8,
        2,
        8,
        1,
        VIR_TYPE_BOOLEAN_P8,
        VIR_TYPE_BOOLEAN,
        8/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_BOOLEAN,
        16,
        VIR_TY_VECTOR
    },
    {
        "bool_P16",
        VIR_TYPE_BOOLEAN_P16,
        4,
        16,
        1,
        VIR_TYPE_BOOLEAN_P16,
        VIR_TYPE_BOOLEAN,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_BOOLEAN,
        16,
        VIR_TY_VECTOR
    },
    {
        "bool_P32",
        VIR_TYPE_BOOLEAN_P32,
        4,
        16,
        2,
        VIR_TYPE_BOOLEAN_P16,
        VIR_TYPE_BOOLEAN,
        32/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_BOOLEAN,
        16,
        VIR_TY_VECTOR
    },

    /* uchar vectors */
    {
        "uchar_P2",
        VIR_TYPE_UINT8_P2,
        1,
        2,
        1,
        VIR_TYPE_UINT8_P2,
        VIR_TYPE_UINT8,
        2/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_UNSIGNED_INT,
        2,
        VIR_TY_VECTOR
    },
    {
        "uchar_P3",
        VIR_TYPE_UINT8_P3,
        1,
        3,
        1,
        VIR_TYPE_UINT8_P3,
        VIR_TYPE_UINT8,
        3/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_UNSIGNED_INT,
        4,
        VIR_TY_VECTOR
    },
    {
        "uchar_P4",
        VIR_TYPE_UINT8_P4,
        1,
        4,
        1,
        VIR_TYPE_UINT8_P4,
        VIR_TYPE_UINT8,
        4/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_UNSIGNED_INT,
        4,
        VIR_TY_VECTOR
    },
    {
        "uchar_P8",
        VIR_TYPE_UINT8_P8,
        2,
        8,
        1,
        VIR_TYPE_UINT8_P8,
        VIR_TYPE_UINT8,
        8/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_UNSIGNED_INT,
        4,
        VIR_TY_VECTOR
    },
    {
        "uchar_P16",
        VIR_TYPE_UINT8_P16,
        4,
        16,
        1,
        VIR_TYPE_UINT8_P16,
        VIR_TYPE_UINT8,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_UNSIGNED_INT,
        4,
        VIR_TY_VECTOR
    },
    {
        "uchar_P32",
        VIR_TYPE_UINT8_P32,
        4,
        16,
        2,
        VIR_TYPE_UINT8_P16,
        VIR_TYPE_UINT8,
        32/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_UNSIGNED_INT,
        4,
        VIR_TY_VECTOR
    },

    /* char vectors */
    {
        "char_P2",
        VIR_TYPE_INT8_P2,
        1,
        2,
        1,
        VIR_TYPE_INT8_P2,
        VIR_TYPE_INT8,
        2/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_SIGNED_INT,
        2,
        VIR_TY_VECTOR
    },
    {
        "char_P3",
        VIR_TYPE_INT8_P3,
        1,
        3,
        1,
        VIR_TYPE_INT8_P3,
        VIR_TYPE_INT8,
        3/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_SIGNED_INT,
        4,
        VIR_TY_VECTOR
    },
    {
        "char_P4",
        VIR_TYPE_INT8_P4,
        1,
        4,
        1,
        VIR_TYPE_INT8_P4,
        VIR_TYPE_INT8,
        4/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_SIGNED_INT,
        4,
        VIR_TY_VECTOR
    },
    {
        "char_P8",
        VIR_TYPE_INT8_P8,
        2,
        8,
        1,
        VIR_TYPE_INT8_P8,
        VIR_TYPE_INT8,
        8/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_SIGNED_INT,
        4,
        VIR_TY_VECTOR
    },
    {
        "char_P16",
        VIR_TYPE_INT8_P16,
        4,
        16,
        1,
        VIR_TYPE_INT8_P16,
        VIR_TYPE_INT8,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_SIGNED_INT,
        4,
        VIR_TY_VECTOR
    },
    {
        "char_P32",
        VIR_TYPE_INT8_P32,
        4,
        16,
        2,
        VIR_TYPE_INT8_P16,
        VIR_TYPE_INT8,
        32/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_SIGNED_INT,
        4,
        VIR_TY_VECTOR
    },
    /* ushort vectors */
    {
        "ushort_P2",
        VIR_TYPE_UINT16_P2,
        1,
        2,
        1,
        VIR_TYPE_UINT16_P2,
        VIR_TYPE_UINT16,
        4/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_UNSIGNED_INT,
        4,
        VIR_TY_VECTOR
    },
    {
        "ushort_P3",
        VIR_TYPE_UINT16_P3,
        2,
        3,
        1,
        VIR_TYPE_UINT16_P3,
        VIR_TYPE_UINT16,
        6/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_UNSIGNED_INT,
        8,
        VIR_TY_VECTOR
    },
    {
        "ushort_P4",
        VIR_TYPE_UINT16_P4,
        2,
        4,
        1,
        VIR_TYPE_UINT16_P4,
        VIR_TYPE_UINT16,
        8/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_UNSIGNED_INT,
        8,
        VIR_TY_VECTOR
    },
    {
        "ushort_P8",
        VIR_TYPE_UINT16_P8,
        4,
        8,
        1,
        VIR_TYPE_UINT16_P8,
        VIR_TYPE_UINT16,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_UNSIGNED_INT,
        8,
        VIR_TY_VECTOR
    },
    {
        "ushort_P16",
        VIR_TYPE_UINT16_P16,
        4,
        8,
        2,
        VIR_TYPE_UINT16_P8,
        VIR_TYPE_UINT16,
        32/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_UNSIGNED_INT,
        8,
        VIR_TY_VECTOR
    },
    {
        "ushort_P32",
        VIR_TYPE_UINT16_P32,
        4,
        8,
        4,
        VIR_TYPE_UINT16_P8,
        VIR_TYPE_UINT16,
        64/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_UNSIGNED_INT,
        8,
        VIR_TY_VECTOR
    },

    /* short vectors */
    {
        "short_P2",
        VIR_TYPE_INT16_P2,
        1,
        2,
        1,
        VIR_TYPE_INT16_P2,
        VIR_TYPE_INT16,
        4/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_SIGNED_INT,
        4,
        VIR_TY_VECTOR
    },
    {
        "short_P3",
        VIR_TYPE_INT16_P3,
        2,
        3,
        1,
        VIR_TYPE_INT16_P3,
        VIR_TYPE_INT16,
        6/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_SIGNED_INT,
        8,
        VIR_TY_VECTOR
    },
    {
        "short_P4",
        VIR_TYPE_INT16_P4,
        2,
        4,
        1,
        VIR_TYPE_INT16_P4,
        VIR_TYPE_INT16,
        8/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_SIGNED_INT,
        8,
        VIR_TY_VECTOR
    },
    {
        "short_P8",
        VIR_TYPE_INT16_P8,
        4,
        8,
        1,
        VIR_TYPE_INT16_P8,
        VIR_TYPE_INT16,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_SIGNED_INT,
        8,
        VIR_TY_VECTOR
    },
    {
        "short_P16",
        VIR_TYPE_INT16_P16,
        4,
        16,
        2,
        VIR_TYPE_INT16_P8,
        VIR_TYPE_INT16,
        32/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_SIGNED_INT,
        8,
        VIR_TY_VECTOR
    },
    {
        "short_P32",
        VIR_TYPE_INT16_P32,
        4,
        16,
        4,
        VIR_TYPE_INT16_P8,
        VIR_TYPE_INT16,
        64/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_PACKED | VIR_TYFLAG_IS_SIGNED_INT,
        8,
        VIR_TY_VECTOR
    },

    /* matrix type: only support float type */
    {
        "mat2",
        VIR_TYPE_FLOAT_2X2,
        2,
        2,
        2,
        VIR_TYPE_FLOAT_X2,
        VIR_TYPE_FLOAT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        8,
        VIR_TY_MATRIX
    },
    {
        "mat3",
        VIR_TYPE_FLOAT_3X3,
        3,
        3,
        3,
        VIR_TYPE_FLOAT_X3,
        VIR_TYPE_FLOAT32,
        36/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        16,
        VIR_TY_MATRIX
    },
    {
        "mat4",
        VIR_TYPE_FLOAT_4X4,
        4,
        4,
        4,
        VIR_TYPE_FLOAT_X4,
        VIR_TYPE_FLOAT32,
        64/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        16,
        VIR_TY_MATRIX
    },
    {
        "mat2X3",
        VIR_TYPE_FLOAT_2X3,
        3,
        3,
        2,
        VIR_TYPE_FLOAT_X3,
        VIR_TYPE_FLOAT32,
        24/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        16,
        VIR_TY_MATRIX
    },
    {
        "mat2X4",
        VIR_TYPE_FLOAT_2X4,
        4,
        4,
        2,
        VIR_TYPE_FLOAT_X4,
        VIR_TYPE_FLOAT32,
        32/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        16,
        VIR_TY_MATRIX
    },
    {
        "mat3X2",
        VIR_TYPE_FLOAT_3X2,
        2,
        2,
        3,
        VIR_TYPE_FLOAT_X2,
        VIR_TYPE_FLOAT32,
        24/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        8,
        VIR_TY_MATRIX
    },
    {
        "mat3X4",
        VIR_TYPE_FLOAT_3X4,
        4,
        4,
        3,
        VIR_TYPE_FLOAT_X4,
        VIR_TYPE_FLOAT32,
        48/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        16,
        VIR_TY_MATRIX
    },
    {
        "mat4X2",
        VIR_TYPE_FLOAT_4X2,
        2,
        2,
        4,
        VIR_TYPE_FLOAT_X2,
        VIR_TYPE_FLOAT32,
        32/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        8,
        VIR_TY_MATRIX
    },
    {
        "mat4X3",
        VIR_TYPE_FLOAT_4X3,
        3,
        3,
        4,
        VIR_TYPE_FLOAT_X3,
        VIR_TYPE_FLOAT32,
        48/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        16,
        VIR_TY_MATRIX
    },
    /* double matrix, fake it as float32 matrix internally,
     * need to change it to real double if HW double is supported */
    {
        "dmat2",
        VIR_TYPE_FLOAT64_2X2,
        2,
        2,
        2,
        VIR_TYPE_FLOAT_X2,
        VIR_TYPE_FLOAT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        8,
        VIR_TY_MATRIX
    },
    {
        "dmat3",
        VIR_TYPE_FLOAT64_3X3,
        3,
        3,
        3,
        VIR_TYPE_FLOAT_X3,
        VIR_TYPE_FLOAT32,
        36/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        16,
        VIR_TY_MATRIX
    },
    {
        "dmat4",
        VIR_TYPE_FLOAT64_4X4,
        4,
        4,
        4,
        VIR_TYPE_FLOAT_X4,
        VIR_TYPE_FLOAT32,
        64/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        16,
        VIR_TY_MATRIX
    },
    {
        "dmat2X3",
        VIR_TYPE_FLOAT64_2X3,
        3,
        3,
        2,
        VIR_TYPE_FLOAT_X3,
        VIR_TYPE_FLOAT32,
        24/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        16,
        VIR_TY_MATRIX
    },
    {
        "dmat2X4",
        VIR_TYPE_FLOAT64_2X4,
        4,
        4,
        2,
        VIR_TYPE_FLOAT_X4,
        VIR_TYPE_FLOAT32,
        32/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        16,
        VIR_TY_MATRIX
    },
    {
        "dmat3X2",
        VIR_TYPE_FLOAT64_3X2,
        2,
        2,
        3,
        VIR_TYPE_FLOAT_X2,
        VIR_TYPE_FLOAT32,
        24/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        8,
        VIR_TY_MATRIX
    },
    {
        "dmat3X4",
        VIR_TYPE_FLOAT64_3X4,
        4,
        4,
        3,
        VIR_TYPE_FLOAT_X4,
        VIR_TYPE_FLOAT32,
        48/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        16,
        VIR_TY_MATRIX
    },
    {
        "dmat4X2",
        VIR_TYPE_FLOAT64_4X2,
        2,
        2,
        4,
        VIR_TYPE_FLOAT_X2,
        VIR_TYPE_FLOAT32,
        32/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        8,
        VIR_TY_MATRIX
    },
    {
        "dmat4X3",
        VIR_TYPE_FLOAT64_4X3,
        3,
        3,
        4,
        VIR_TYPE_FLOAT_X3,
        VIR_TYPE_FLOAT32,
        48/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_ISFLOAT,
        16,
        VIR_TY_MATRIX
    },
    {
        "sampler_generic",
        VIR_TYPE_SAMPLER_GENERIC,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        0,
        0,
        VIR_TY_SAMPLER
    },
    {
        "sampler1D",
        VIR_TYPE_SAMPLER_1D,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_1D,
        0,
        VIR_TY_SAMPLER
    },
    {
        "sampler2D",
        VIR_TYPE_SAMPLER_2D,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_2D,
        0,
        VIR_TY_SAMPLER
    },
    {
        "sampler3D",
        VIR_TYPE_SAMPLER_3D,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_3D,
        0,
        VIR_TY_SAMPLER
    },
    {
        "samplerCube",
        VIR_TYPE_SAMPLER_CUBIC,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_CUBE,
        0,
        VIR_TY_SAMPLER
    },
    {
        "samplerCubeArray",
        VIR_TYPE_SAMPLER_CUBE_ARRAY,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_CUBE | VIR_TYFLAG_IS_SAMPLER_ARRAY,
        0,
        VIR_TY_SAMPLER
    },
    {
        "sampler",
        VIR_TYPE_SAMPLER,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        0,
        0,
        VIR_TY_SAMPLER
    },
    {
        "isampler1D",
        VIR_TYPE_ISAMPLER_1D,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_1D,
        0,
        VIR_TY_SAMPLER
    },
    {
        "isampler2D",
        VIR_TYPE_ISAMPLER_2D,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_2D,
        0,
        VIR_TY_SAMPLER
    },
    {
        "isampler3D",
        VIR_TYPE_ISAMPLER_3D,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_3D,
        0,
        VIR_TY_SAMPLER
    },
    {
        "isamplerCube",
        VIR_TYPE_ISAMPLER_CUBIC,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_CUBE,
        0,
        VIR_TY_SAMPLER
    },
    {
        "isamplerCubeArray",
        VIR_TYPE_ISAMPLER_CUBE_ARRAY,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_CUBE | VIR_TYFLAG_IS_SAMPLER_ARRAY,
        0,
        VIR_TY_SAMPLER
    },
    {
        "usampler1D",
        VIR_TYPE_USAMPLER_1D,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_1D,
        0,
        VIR_TY_SAMPLER
    },
    {
        "usampler2D",
        VIR_TYPE_USAMPLER_2D,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_2D,
        0,
        VIR_TY_SAMPLER
    },
    {
        "usampler3D",
        VIR_TYPE_USAMPLER_3D,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_3D,
        0,
        VIR_TY_SAMPLER
    },
    {
        "usamplerCube",
        VIR_TYPE_USAMPLER_CUBIC,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_CUBE,
        0,
        VIR_TY_SAMPLER
    },
    {
        "usamplerCubeArray",
        VIR_TYPE_USAMPLER_CUBE_ARRAY,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_CUBE | VIR_TYFLAG_IS_SAMPLER_ARRAY,
        0,
        VIR_TY_SAMPLER
    },
    {
        "sampler_exeternal_oes",
        VIR_TYPE_SAMPLER_EXTERNAL_OES,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        0,
        0,
        VIR_TY_SAMPLER
    },
    {
        "sampler_1d_shadow",
        VIR_TYPE_SAMPLER_1D_SHADOW,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_1D | VIR_TYFLAG_IS_SAMPLER_SHADOW,
        0,
        VIR_TY_SAMPLER
    },
    {
        "sampler_2d_shadow",
        VIR_TYPE_SAMPLER_2D_SHADOW,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_2D | VIR_TYFLAG_IS_SAMPLER_SHADOW,
        0,
        VIR_TY_SAMPLER
    },
    {
        "sampler_cube_shadow",
        VIR_TYPE_SAMPLER_CUBE_SHADOW,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_CUBE | VIR_TYFLAG_IS_SAMPLER_SHADOW,
        0,
        VIR_TY_SAMPLER
    },
    {
        "sampler_cube_array_shadow",
        VIR_TYPE_SAMPLER_CUBE_ARRAY_SHADOW,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_CUBE | VIR_TYFLAG_IS_SAMPLER_ARRAY | VIR_TYFLAG_IS_SAMPLER_SHADOW,
        0,
        VIR_TY_SAMPLER
    },
    {
        "sampler_1d_array",
        VIR_TYPE_SAMPLER_1D_ARRAY,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_1D | VIR_TYFLAG_IS_SAMPLER_ARRAY,
        0,
        VIR_TY_SAMPLER
    },
    {
        "sampler_1d_array_shadow",
        VIR_TYPE_SAMPLER_1D_ARRAY_SHADOW,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_1D | VIR_TYFLAG_IS_SAMPLER_ARRAY | VIR_TYFLAG_IS_SAMPLER_SHADOW,
        0,
        VIR_TY_SAMPLER
    },
    {
        "sampler_2d_array",
        VIR_TYPE_SAMPLER_2D_ARRAY,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_2D | VIR_TYFLAG_IS_SAMPLER_ARRAY,
        0,
        VIR_TY_SAMPLER
    },
    {
        "isampler_2d_array",
        VIR_TYPE_ISAMPLER_2D_ARRAY,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_2D | VIR_TYFLAG_IS_SAMPLER_ARRAY,
        0,
        VIR_TY_SAMPLER
    },
    {
        "usampler_2d_array",
        VIR_TYPE_USAMPLER_2D_ARRAY,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_2D | VIR_TYFLAG_IS_SAMPLER_ARRAY,
        0,
        VIR_TY_SAMPLER
    },
    {
        "sampler_2d_array_shadow",
        VIR_TYPE_SAMPLER_2D_ARRAY_SHADOW,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_2D | VIR_TYFLAG_IS_SAMPLER_ARRAY | VIR_TYFLAG_IS_SAMPLER_SHADOW,
        0,
        VIR_TY_SAMPLER
    },
    {
        "sampler_2d_ms",
        VIR_TYPE_SAMPLER_2D_MS,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_MS,
        0,
        VIR_TY_SAMPLER
    },
    {
        "isampler_2d_ms",
        VIR_TYPE_ISAMPLER_2D_MS,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_MS,
        0,
        VIR_TY_SAMPLER
    },
    {
        "usampler_2d_ms",
        VIR_TYPE_USAMPLER_2D_MS,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_MS,
        0,
        VIR_TY_SAMPLER
    },
    {
        "sampler_2d_ms_array",
        VIR_TYPE_SAMPLER_2D_MS_ARRAY,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_MS | VIR_TYFLAG_IS_SAMPLER_ARRAY,
        0,
        VIR_TY_SAMPLER
    },
    {
        "isampler_2d_ms_array",
        VIR_TYPE_ISAMPLER_2D_MS_ARRAY,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_MS | VIR_TYFLAG_IS_SAMPLER_ARRAY,
        0,
        VIR_TY_SAMPLER
    },
    {
        "usampler_2d_ms_array",
        VIR_TYPE_USAMPLER_2D_MS_ARRAY,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_MS | VIR_TYFLAG_IS_SAMPLER_ARRAY,
        0,
        VIR_TY_SAMPLER
    },
    {
        "samplerBuffer",
        VIR_TYPE_SAMPLER_BUFFER,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_BUFFER,
        0,
        VIR_TY_SAMPLER
    },
    {
        "isamplerBuffer",
        VIR_TYPE_ISAMPLER_BUFFER,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_BUFFER,
        0,
        VIR_TY_SAMPLER
    },
    {
        "usamplerBuffer",
        VIR_TYPE_USAMPLER_BUFFER,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_BUFFER,
        0,
        VIR_TY_SAMPLER
    },
    {
        "subpassInput",
        VIR_TYPE_SUBPASSINPUT,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SUBPASS | VIR_TYFLAG_IMAGE_DATA_FLOAT,
        4,
        VIR_TY_IMAGE
    },
    {
        "subpassInputMS",
        VIR_TYPE_SUBPASSINPUTMS,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SUBPASS | VIR_TYFLAG_IMAGE_DATA_FLOAT,
        4,
        VIR_TY_IMAGE
    },
    {
        "isubpassInput",
        VIR_TYPE_ISUBPASSINPUT,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SUBPASS | VIR_TYFLAG_IMAGE_DATA_SIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "isubpassInputMS",
        VIR_TYPE_ISUBPASSINPUTMS,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SUBPASS | VIR_TYFLAG_IMAGE_DATA_SIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "usubpassInput",
        VIR_TYPE_USUBPASSINPUT,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SUBPASS | VIR_TYFLAG_IMAGE_DATA_UNSIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "usubpassInputMS",
        VIR_TYPE_USUBPASSINPUTMS,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_SUBPASS | VIR_TYFLAG_IMAGE_DATA_UNSIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    /* All OCL image types are uvec8 descriptor, need to adjust it at init time */
    {
        "image_1d",
        VIR_TYPE_IMAGE_1D,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_1D | VIR_TYFLAG_IMAGE_DATA_FLOAT,
        4,
        VIR_TY_IMAGE
    },
    {
        "image_1d_depth",
        VIR_TYPE_IMAGE_1D_DEPTH,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_1D | VIR_TYFLAG_IMAGE_DATA_FLOAT,
        4,
        VIR_TY_IMAGE
    },
    {
        "image_1d_array",
        VIR_TYPE_IMAGE_1D_ARRAY,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_1D | VIR_TYFLAG_IS_IMAGE_ARRAY | VIR_TYFLAG_IMAGE_DATA_FLOAT,
        4,
        VIR_TY_IMAGE
    },
    {
        "image_1d_array_depth",
        VIR_TYPE_IMAGE_1D_ARRAY_DEPTH,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_1D | VIR_TYFLAG_IS_IMAGE_ARRAY | VIR_TYFLAG_IMAGE_DATA_FLOAT,
        4,
        VIR_TY_IMAGE
    },
    {
        "image_1d_buffer",
        VIR_TYPE_IMAGE_1D_BUFFER,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_1D | VIR_TYFLAG_IS_IMAGE_BUFFER | VIR_TYFLAG_IMAGE_DATA_FLOAT,
        4,
        VIR_TY_IMAGE
    },
    {
        "iimage_1d",
        VIR_TYPE_IIMAGE_1D,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_1D | VIR_TYFLAG_IMAGE_DATA_SIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "iimage_1d_array",
        VIR_TYPE_IIMAGE_1D_ARRAY,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_1D | VIR_TYFLAG_IS_IMAGE_ARRAY | VIR_TYFLAG_IMAGE_DATA_SIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "uimage_1d",
        VIR_TYPE_UIMAGE_1D,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_1D | VIR_TYFLAG_IMAGE_DATA_UNSIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "uimage_1d_array",
        VIR_TYPE_UIMAGE_1D_ARRAY,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_1D | VIR_TYFLAG_IS_IMAGE_ARRAY | VIR_TYFLAG_IMAGE_DATA_UNSIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "image_2d",
        VIR_TYPE_IMAGE_2D,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_2D | VIR_TYFLAG_IMAGE_DATA_FLOAT,
        4,
        VIR_TY_IMAGE
    },
    {
        "image_2d_array",
        VIR_TYPE_IMAGE_2D_ARRAY,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_2D | VIR_TYFLAG_IS_IMAGE_ARRAY | VIR_TYFLAG_IMAGE_DATA_FLOAT,
        4,
        VIR_TY_IMAGE
    },
    {
        "image_3d",
        VIR_TYPE_IMAGE_3D,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_3D | VIR_TYFLAG_IMAGE_DATA_FLOAT,
        4,
        VIR_TY_IMAGE
    },
    {
        "image_2d_mssa",
        VIR_TYPE_IMAGE_2D_MSSA,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_2D | VIR_TYFLAG_IMAGE_DATA_FLOAT,
        4,
        VIR_TY_IMAGE
    },
    {
        "image_2d_array_mssa",
        VIR_TYPE_IMAGE_2D_ARRAY_MSSA,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_2D | VIR_TYFLAG_IS_IMAGE_ARRAY | VIR_TYFLAG_IMAGE_DATA_FLOAT,
        4,
        VIR_TY_IMAGE
    },
    {
        "image_2d_mssa_depth",
        VIR_TYPE_IMAGE_2D_MSSA_DEPTH,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_2D | VIR_TYFLAG_IMAGE_DATA_FLOAT,
        4,
        VIR_TY_IMAGE
    },
    {
        "image_2d_array_mssa_depth",
        VIR_TYPE_IMAGE_2D_ARRAY_MSSA_DEPTH,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_2D | VIR_TYFLAG_IS_IMAGE_ARRAY | VIR_TYFLAG_IMAGE_DATA_FLOAT,
        4,
        VIR_TY_IMAGE
    },
    {
        "image_2d_depth",
        VIR_TYPE_IMAGE_2D_DEPTH,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_2D | VIR_TYFLAG_IMAGE_DATA_FLOAT,
        4,
        VIR_TY_IMAGE
    },
    {
        "image_2d_array_depth",
        VIR_TYPE_IMAGE_2D_ARRAY_DEPTH,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_2D | VIR_TYFLAG_IS_IMAGE_ARRAY | VIR_TYFLAG_IMAGE_DATA_FLOAT,
        4,
        VIR_TY_IMAGE
    },
    {
        "iimage_2d",
        VIR_TYPE_IIMAGE_2D,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_2D | VIR_TYFLAG_IMAGE_DATA_SIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "iimage_2d_mssa",
        VIR_TYPE_IIMAGE_2D_MSSA,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_2D | VIR_TYFLAG_IMAGE_DATA_SIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "iimage_2d_array_mssa",
        VIR_TYPE_IIMAGE_2D_ARRAY_MSSA,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_2D | VIR_TYFLAG_IS_IMAGE_ARRAY | VIR_TYFLAG_IMAGE_DATA_SIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "uimage_2d",
        VIR_TYPE_UIMAGE_2D,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_2D | VIR_TYFLAG_IMAGE_DATA_UNSIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "uimage_2d_mssa",
        VIR_TYPE_UIMAGE_2D_MSSA,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_2D | VIR_TYFLAG_IMAGE_DATA_UNSIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "uimage_2d_array_mssa",
        VIR_TYPE_UIMAGE_2D_ARRAY_MSSA,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_2D | VIR_TYFLAG_IS_IMAGE_ARRAY | VIR_TYFLAG_IMAGE_DATA_UNSIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "iimage_3d",
        VIR_TYPE_IIMAGE_3D,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_3D | VIR_TYFLAG_IMAGE_DATA_SIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "uimage_3d",
        VIR_TYPE_UIMAGE_3D,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_3D | VIR_TYFLAG_IMAGE_DATA_UNSIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "iimage_2d_array",
        VIR_TYPE_IIMAGE_2D_ARRAY,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_2D | VIR_TYFLAG_IS_IMAGE_ARRAY | VIR_TYFLAG_IMAGE_DATA_SIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "uimage_2d_array",
        VIR_TYPE_UIMAGE_2D_ARRAY,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_2D | VIR_TYFLAG_IS_IMAGE_ARRAY | VIR_TYFLAG_IMAGE_DATA_UNSIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "image_cube",
        VIR_TYPE_IMAGE_CUBE,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_CUBE | VIR_TYFLAG_IMAGE_DATA_FLOAT,
        4,
        VIR_TY_IMAGE
    },
    {
        "image_cube_depth",
        VIR_TYPE_IMAGE_CUBE_DEPTH,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_CUBE | VIR_TYFLAG_IMAGE_DATA_FLOAT,
        4,
        VIR_TY_IMAGE
    },
    {
        "image_cube_array",
        VIR_TYPE_IMAGE_CUBE_ARRAY,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_CUBE | VIR_TYFLAG_IS_IMAGE_ARRAY | VIR_TYFLAG_IMAGE_DATA_FLOAT,
        4,
        VIR_TY_IMAGE
    },
    {
        "image_cube_depth_array",
        VIR_TYPE_IMAGE_CUBE_DEPTH_ARRAY,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_CUBE | VIR_TYFLAG_IS_IMAGE_ARRAY | VIR_TYFLAG_IMAGE_DATA_FLOAT,
        4,
        VIR_TY_IMAGE
    },
    {
        "iimage_cube",
        VIR_TYPE_IIMAGE_CUBE,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_CUBE | VIR_TYFLAG_IMAGE_DATA_SIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "iimage_cube_depth",
        VIR_TYPE_IIMAGE_CUBE_DEPTH,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_CUBE | VIR_TYFLAG_IMAGE_DATA_SIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "iimage_cube_array",
        VIR_TYPE_IIMAGE_CUBE_ARRAY,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_CUBE | VIR_TYFLAG_IS_IMAGE_ARRAY | VIR_TYFLAG_IMAGE_DATA_SIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "uimage_cube",
        VIR_TYPE_UIMAGE_CUBE,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_CUBE | VIR_TYFLAG_IMAGE_DATA_UNSIGNED_INT,
        4,
        VIR_TY_IMAGE
    },

    {
        "uimage_cube_depth",
        VIR_TYPE_UIMAGE_CUBE_DEPTH,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_CUBE | VIR_TYFLAG_IMAGE_DATA_UNSIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "uimage_cube_array",
        VIR_TYPE_UIMAGE_CUBE_ARRAY,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_CUBE | VIR_TYFLAG_IS_IMAGE_ARRAY | VIR_TYFLAG_IMAGE_DATA_UNSIGNED_INT,
        4,
        VIR_TY_IMAGE
    },

    {
        "imageBuffer",
        VIR_TYPE_IMAGE_BUFFER,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_BUFFER | VIR_TYFLAG_IMAGE_DATA_FLOAT,
        4,
        VIR_TY_IMAGE
    },
    {
        "iimageBuffer",
        VIR_TYPE_IIMAGE_BUFFER,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_BUFFER | VIR_TYFLAG_IMAGE_DATA_SIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "uimageBuffer",
        VIR_TYPE_UIMAGE_BUFFER,
        4,
        4,
        1,
        VIR_TYPE_UINT_X4,
        VIR_TYPE_UINT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_IMAGE_BUFFER | VIR_TYFLAG_IMAGE_DATA_UNSIGNED_INT,
        4,
        VIR_TY_IMAGE
    },
    {
        "event_t",
        VIR_TYPE_EVENT,
        1,
        1,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        4/* size */,
        0,
        0,
        4,
        VIR_TY_SAMPLER
    },
    {
        "atomic_uint",
        VIR_TYPE_ATOMIC_UINT,
        1,
        1,
        1,
        VIR_TYPE_INT32,
        VIR_TYPE_INT32,
        4/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        4,
        VIR_TY_SCALAR
    },
    {
        "atomic_uint4",
        VIR_TYPE_ATOMIC_UINT4,
        4,
        4,
        1,
        VIR_TYPE_INTEGER_X4,
        VIR_TYPE_INT32,
        16/* size */,
        0,
        VIR_TYFLAG_SIZED | VIR_TYFLAG_IS_UNSIGNED_INT,
        16,
        VIR_TY_VECTOR
    },
    /* OpenGL 4.0 types */
    {
        "sampler_2d_rect",
        VIR_TYPE_SAMPLER_2D_RECT,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_2D | VIR_TYFLAG_IS_SAMPLER_ARRAY,
        0,
        VIR_TY_SAMPLER
    },
    {
        "isampler_2d_rect",
        VIR_TYPE_ISAMPLER_2D_RECT,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_2D | VIR_TYFLAG_IS_SAMPLER_ARRAY,
        0,
        VIR_TY_SAMPLER
    },
    {
        "usampler_2d_rect",
        VIR_TYPE_USAMPLER_2D_RECT,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_2D | VIR_TYFLAG_IS_SAMPLER_ARRAY,
        0,
        VIR_TY_SAMPLER
    },
    {
        "sampler_2d_rect_shadow",
        VIR_TYPE_SAMPLER_2D_RECT_SHADOW,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_2D | VIR_TYFLAG_IS_SAMPLER_ARRAY | VIR_TYFLAG_IS_SAMPLER_SHADOW,
        0,
        VIR_TY_SAMPLER
    },
    {
        "isampler_1d_array",
        VIR_TYPE_ISAMPLER_1D_ARRAY,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_1D | VIR_TYFLAG_IS_SAMPLER_ARRAY,
        0,
        VIR_TY_SAMPLER
    },
    {
        "usampler_1d_array",
        VIR_TYPE_USAMPLER_1D_ARRAY,
        4,
        4,
        1,
        VIR_TYPE_UNKNOWN,
        VIR_TYPE_UNKNOWN,
        0/* size */,
        0,
        VIR_TYFLAG_IS_SAMPLER_1D | VIR_TYFLAG_IS_SAMPLER_ARRAY,
        0,
        VIR_TY_SAMPLER
    },


    /* !!! Add new types above, below is the last item as end of builtin type marker */
        {
        gcvNULL,
        0
    }

