/****************************************************************************
*
*    Copyright (c) 2005 - 2020 by Vivante Corp.  All rights reserved.
*
*    The material in this file is confidential and contains trade secrets
*    of Vivante Corporation. This is proprietary information owned by
*    Vivante Corporation. No part of this work may be disclosed,
*    reproduced, copied, transmitted, or used in any way for any purpose,
*    without the express written permission of Vivante Corporation.
*
*****************************************************************************/


/* gcMC_OPCODE          Value    F32   F16   I8    I16   I32  Trans  Ctrl  Desc */
vscMC_DEF(NOP, 0x00, 0, 0, 0, 0, 0, 0, 0, "No Operation"                                                             )
vscMC_DEF(ADD, 0x01, 1, 1, 1, 1, 1, 0, 0, "Add"                                                                      )
vscMC_DEF(MAD, 0x02, 1, 1, 0, 0, 0, 0, 0, "Multiply and Add"                                                         )
vscMC_DEF(MUL, 0x03, 1, 1, 1, 1, 1, 0, 0, "Multiply (Unsigned)"                                                      )
vscMC_DEF(DST, 0x04, 1, 1, 0, 0, 0, 0, 0, "Distance Vector"                                                          )
vscMC_DEF(DP3, 0x05, 1, 1, 0, 0, 0, 0, 0, "3 component dot product"                                                  )
vscMC_DEF(DP4, 0x06, 1, 1, 0, 0, 0, 0, 0, "4 component dot product"                                                  )
vscMC_DEF(DSX, 0x07, 1, 1, 0, 0, 0, 0, 0, "Derivative in X"                                                          )
vscMC_DEF(DSY, 0x08, 1, 1, 0, 0, 0, 0, 0, "Derivative in Y"                                                          )
vscMC_DEF(MOV, 0x09, 1, 1, 1, 1, 1, 0, 0, "Move"                                                                     )
vscMC_DEF(MOVAR, 0x0A, 1, 1, 0, 0, 0, 0, 0, "Conditionally move to A0 after round to nearest"                          )
vscMC_DEF(MOVAF, 0x0B, 1, 1, 0, 0, 0, 0, 0, "Conditionally move to A0 after floor"                                     )
vscMC_DEF(RCP, 0x0C, 1, 1, 0, 0, 0, 1, 0, "Reciprocal"                                                               )
vscMC_DEF(RSQ, 0x0D, 1, 1, 0, 0, 0, 1, 0, "Reciprocal square root"                                                   )
vscMC_DEF(LITP, 0x0E, 1, 1, 0, 0, 0, 0, 0, "Partial Direct3D LIT"                                                     )
vscMC_DEF(SELECT, 0x0F, 1, 1, 0, 0, 1, 0, 0, "Select src1 or src2"                                                      )
vscMC_DEF(SET, 0x10, 1, 1, 0, 0, 0, 0, 0, "Output 0 or 1"                                                            )
vscMC_DEF(EXP, 0x11, 1, 1, 0, 0, 0, 1, 0, "Exponential base 2 (approximate)"                                         )
vscMC_DEF(LOG, 0x12, 1, 1, 0, 0, 0, 1, 0, "Logarithm base 2 (approximate)"                                           )
vscMC_DEF(FRC, 0x13, 1, 1, 0, 0, 0, 0, 0, "x - floor(x)"                                                             )
vscMC_DEF(CALL, 0x14, 0, 0, 0, 0, 0, 0, 1, "Function call with a return"                                              )
vscMC_DEF(RET, 0x15, 0, 0, 0, 0, 0, 0, 1, "Return for the 'call'"                                                    )
vscMC_DEF(BRANCH, 0x16, 1, 1, 0, 0, 1, 0, 1, "Conditional jump"                                                         )
vscMC_DEF(TEXKILL, 0x17, 1, 1, 0, 0, 0, 0, 0, "Fragment kill"                                                            )
vscMC_DEF(TEXLD, 0x18, 1, 1, 0, 0, 0, 0, 0, "Texture load"                                                             )
vscMC_DEF(TEXLDB, 0x19, 1, 1, 0, 0, 0, 0, 0, "Texture load with bias"                                                   )
vscMC_DEF(TEXLDL, 0x1B, 1, 1, 0, 0, 0, 0, 0, "Texture load with LOD"                                                    )
vscMC_DEF(TEXLDPCF, 0x1C, 1, 1, 0, 0, 0, 0, 0, "Percentage close filtering"                                               )
vscMC_DEF(REP, 0x1D, 0, 0, 0, 0, 0, 0, 1, "Repeat 'Iter Count' times"                                                )
vscMC_DEF(ENDREP, 0x1E, 0, 0, 0, 0, 0, 0, 1, "End of one Repeat Iter"                                                   )
vscMC_DEF(LOOP, 0x1F, 0, 0, 0, 0, 0, 0, 1, "Loop 'Iter Count' times"                                                  )
vscMC_DEF(ENDLOOP, 0x20, 0, 0, 0, 0, 0, 0, 1, "End of one Loop Iter"                                                     )
vscMC_DEF(SQRT, 0x21, 1, 1, 0, 0, 0, 1, 0, "Square root"                                                              )
vscMC_DEF(SINXHPI, 0x22, 1, 1, 0, 0, 0, 1, 0, "SIN half pi"                                                              )
vscMC_DEF(COSXHPI, 0x23, 1, 1, 0, 0, 0, 1, 0, "COS half pi"                                                              )
vscMC_DEF(FLOOR, 0x25, 1, 1, 0, 0, 0, 0, 0, "Nearest integer <= x"                                                     )
vscMC_DEF(CEIL, 0x26, 1, 1, 0, 0, 0, 0, 0, "Nearest integer >= x"                                                     )
vscMC_DEF(SIGN, 0x27, 1, 1, 0, 0, 0, 0, 0, "Returns -1.0, 0.0, or 1.0"                                                )
vscMC_DEF(ADDLO, 0x28, 0, 1, 0, 0, 0, 0, 0, "Add result, lower part"                                                   )
vscMC_DEF(MULLO, 0x29, 0, 1, 0, 0, 0, 0, 0, "Multiply result, lower part"                                              )
vscMC_DEF(BARRIER, 0x2A, 0, 0, 0, 0, 0, 0, 0, "Synchronize within a work group"                                          )
vscMC_DEF(SWIZZLE, 0x2B, 0, 0, 1, 1, 0, 0, 0, "Swizzle 8/16 bit sources"                                                 )
vscMC_DEF(I2I, 0x2C, 0, 0, 1, 1, 1, 0, 0, "Integer to integer convert"                                               )
vscMC_DEF(I2F, 0x2D, 0, 0, 0, 0, 1, 0, 0, "Integer to float convert"                                                 )
vscMC_DEF(F2I, 0x2E, 0, 1, 0, 0, 0, 0, 0, "Float to integer convert"                                                 )
vscMC_DEF(F2IRND, 0x2F, 0, 1, 0, 0, 0, 0, 0, "Float to integer convert with rounding"                                   )
vscMC_DEF(CMP, 0x31, 1, 1, 0, 0, 1, 0, 0, "Comp each component"                                                      )
vscMC_DEF(LOAD, 0x32, 1, 1, 1, 1, 1, 0, 0, "Load from memory (To LS or Temp)"                                         )
vscMC_DEF(STORE, 0x33, 1, 1, 1, 1, 1, 0, 0, "Store to memory (From LS or Temp)"                                        )
vscMC_DEF(IADDSAT, 0x3B, 0, 0, 1, 1, 1, 0, 0, "Integer add with saturation"                                              )
vscMC_DEF(IMULLO0, 0x3C, 0, 0, 1, 1, 1, 0, 0, "Integer multiply, low result, register 0"                                 )
vscMC_DEF(IMULLO1, 0x3D, 0, 0, 0, 1, 0, 0, 0, "Integer multiply, low result, register 1"                                 )
vscMC_DEF(IMULLOSAT0, 0x3E, 0, 0, 1, 1, 1, 0, 0, "Integer multiply with saturation, low result, register 0"                 )
vscMC_DEF(IMULLOSAT1, 0x3F, 0, 0, 0, 1, 0, 0, 0, "Integer multiply with saturation, low result, register 1"                 )
vscMC_DEF(IMULHI0, 0x40, 0, 0, 1, 1, 1, 0, 0, "Integer multiply, high result, register 0"                                )
vscMC_DEF(IMULHI1, 0x41, 0, 0, 0, 1, 0, 0, 0, "Integer multiply, high result, register 1"                                )
vscMC_DEF(IDIV0, 0x44, 0, 0, 1, 1, 0, 1, 0, "Integer divider"                                                          )
vscMC_DEF(IMOD0, 0x48, 0, 0, 1, 1, 0, 1, 0, "Integer modulus"                                                          )
vscMC_DEF(IMADLO0, 0x4C, 0, 0, 1, 1, 1, 0, 0, "Integer multiply and add, low multiply result, register 0"                )
vscMC_DEF(IMADLO1, 0x4D, 0, 0, 0, 1, 0, 0, 0, "Integer multiply and add, low multiply result, register 1"                )
vscMC_DEF(IMADLOSAT0, 0x4E, 0, 0, 1, 1, 1, 0, 0, "Integer multiply and add with saturation, low multiply result, register 0")
vscMC_DEF(IMADLOSAT1, 0x4F, 0, 0, 0, 1, 0, 0, 0, "Integer multiply and add with saturation, low multiply result, reg 1"     )
vscMC_DEF(IMADHI0, 0x50, 0, 0, 1, 1, 1, 0, 0, "Integer multiply and add, high multiply result, reg 0"                    )
vscMC_DEF(IMADHI1, 0x51, 0, 0, 0, 1, 0, 0, 0, "Integer multiply and add, high multiply result, reg 1"                    )
vscMC_DEF(IMADHISAT0, 0x52, 0, 0, 1, 1, 1, 0, 0, "Integer multiply and add with saturation, high multiply result, reg 0"    )
vscMC_DEF(IMADHISAT1, 0x53, 0, 0, 0, 1, 0, 0, 0, "Integer multiply and add with saturation, high multiply result, reg 1"    )
vscMC_DEF(MOVAI, 0x56, 0, 0, 1, 1, 1, 0, 0, "Move integer to A0"                                                       )
vscMC_DEF(IABS, 0x57, 0, 0, 1, 1, 1, 0, 0, "Integer absolute value"                                                   )
vscMC_DEF(LEADZERO, 0x58, 0, 0, 1, 1, 1, 0, 0, "Leading zero detect"                                                      )
vscMC_DEF(LSHIFT, 0x59, 0, 0, 1, 1, 1, 0, 0, "Left Shifter"                                                             )
vscMC_DEF(RSHIFT, 0x5A, 0, 0, 1, 1, 1, 0, 0, "Right Shifter"                                                            )
vscMC_DEF(ROTATE, 0x5B, 0, 0, 1, 1, 1, 0, 0, "Rotate"                                                                   )
vscMC_DEF(OR, 0x5C, 0, 0, 1, 1, 1, 0, 0, "Bitwise Or"                                                               )
vscMC_DEF(AND, 0x5D, 0, 0, 1, 1, 1, 0, 0, "Bitwise And"                                                              )
vscMC_DEF(XOR, 0x5E, 0, 0, 1, 1, 1, 0, 0, "Bitwise XOR"                                                              )
vscMC_DEF(NOT, 0x5F, 0, 0, 1, 1, 1, 0, 0, "Bitwise Negate"                                                           )
vscMC_DEF(POPCOUNT, 0x61, 0, 0, 1, 1, 1, 0, 0, "Population count"                                                         )
vscMC_DEF(DIV, 0x64, 0, 1, 0, 0, 0, 1, 0, "divider"                                                                  )
vscMC_DEF(ATOM_ADD, 0x65, 0, 0, 0, 0, 1, 0, 0, "Atomic Add"                                                               )
vscMC_DEF(ATOM_XCHG, 0x66, 0, 1, 0, 0, 1, 0, 0, "Atomic Exchange"                                                          )
vscMC_DEF(ATOM_CMP_XCHG, 0x67, 0, 0, 0, 0, 1, 0, 0, "Atomic Compare Exchange"                                                  )
vscMC_DEF(ATOM_MIN, 0x68, 0, 0, 0, 0, 1, 0, 0, "Atomic Minimum"                                                           )
vscMC_DEF(ATOM_MAX, 0x69, 0, 0, 0, 0, 1, 0, 0, "Atomic Maximum"                                                           )
vscMC_DEF(ATOM_OR, 0x6A, 0, 0, 0, 0, 1, 0, 0, "Atomic Or"                                                                )
vscMC_DEF(ATOM_AND, 0x6B, 0, 0, 0, 0, 1, 0, 0, "Atomic And"                                                               )
vscMC_DEF(ATOM_XOR, 0x6C, 0, 0, 0, 0, 1, 0, 0, "Atomic XOR"                                                               )
vscMC_DEF(BIT_REVERSAL, 0x6D, 0, 0, 1, 1, 1, 0, 0, "Bit reversal"                                                             )
vscMC_DEF(BYTE_REVERSAL, 0x6E, 0, 0, 1, 1, 1, 0, 0, "Byte reversal"                                                            )
vscMC_DEF(TEXLD_L_PCF, 0x6F, 1, 1, 0, 0, 0, 0, 0, "Texture load with bias"                                                   )
vscMC_DEF(TEXLD_G_PCF, 0x70, 1, 1, 0, 0, 0, 0, 0, "Texture load with bias"                                                   )
vscMC_DEF(PACK, 0x71, 1, 1, 1, 1, 1, 0, 0, "pack a vector from SRC0, SRC1, SRC2"                                      )
vscMC_DEF(CONV, 0x72, 0, 0, 1, 1, 1, 0, 0, "type conversion, dstType is inst type, fromType is encoded in SRC1 "      )
vscMC_DEF(DP2, 0x73, 1, 1, 0, 0, 0, 0, 0, "2 component dot product"                                                  )
vscMC_DEF(NORM_DP2, 0x74, 1, 1, 0, 0, 0, 0, 0, "2 component pre norm dot product"                                         )
vscMC_DEF(NORM_DP3, 0x75, 1, 1, 0, 0, 0, 0, 0, "3 component pre norm dot product"                                         )
vscMC_DEF(NORM_DP4, 0x76, 1, 1, 0, 0, 0, 0, 0, "4 component pre norm dot product"                                         )
vscMC_DEF(NORM_MUL, 0x77, 1, 1, 0, 0, 0, 0, 0, "pre norm multiply"                                                        )
vscMC_DEF(STORE_ATTR, 0x78, 1, 1, 1, 1, 1, 0, 0, "Store a vector into shared memory"                                        )
vscMC_DEF(IMG_LOAD, 0x79, 1, 1, 0, 0, 0, 0, 0, "Image load"                                                               )
vscMC_DEF(IMG_STORE, 0x7A, 1, 1, 0, 0, 0, 0, 0, "Image store"                                                              )
vscMC_DEF(TEXLD_U, 0x7B, 1, 1, 0, 0, 0, 0, 0, "Texture load with bias"                                                   )
vscMC_DEF(LODQ_G, 0x7C, 1, 1, 0, 0, 0, 0, 0, "Texture load with bias"                                                   )
vscMC_DEF(EXTENDED, 0x7F, 1, 1, 1, 1, 1, 0, 0, "Extended instruction"                                                     )
/* gcMC_OPCODE          Value    F32   F16   I8    I16   I32  Trans  Ctrl  Desc */

/* extended instruction */
vscEMC_DEF(LOAD_ATTR, 0x00, 1, 1, 1, 1, 1, 0, 0, "Load a vector from shared memory"                                         )
vscEMC_DEF(EMIT, 0x01, 1, 1, 1, 1, 1, 0, 0, "Extended instruction"                                                     )
vscEMC_DEF(RESTART, 0x02, 1, 1, 1, 1, 1, 0, 0, "Extended instruction"                                                     )
vscEMC_DEF(FLUSH, 0x03, 1, 1, 1, 1, 1, 0, 0, "Extended instruction"                                                     )
vscEMC_DEF(LODQ, 0x04, 1, 1, 1, 1, 1, 0, 0, "Extended instruction"                                                     )


