/****************************************************************************
*
*    Copyright (c) 2005 - 2015 by Vivante Corp.  All rights reserved.
*
*    The material in this file is confidential and contains trade secrets
*    of Vivante Corporation. This is proprietary information owned by
*    Vivante Corporation. No part of this work may be disclosed,
*    reproduced, copied, transmitted, or used in any way for any purpose,
*    without the express written permission of Vivante Corporation.
*
*****************************************************************************/


/*
** Protocol for the multi-layer input/output conversion.
** Here are some defined protocol for format conversion. For example,
** gcvSURF_A32B32G32R32UI_4_A8R8G8B8 format.
** We always assume:
** 1, Format name indicate the component sequence.  and we always define
**    them from MSB->LSB. That means
**        A32 is MSB, R32 is LSB,
**        A8  is MSB, B8  is LSB.
** 2, For multiple layers, we always assume that mapping
**         layer0..layerer1..layer2..layer3
**    to LSB component to MSB component. That means,
**         layer0 is R32, layer1 is G32,
**         layer2 is B32, layer3 is A32.
** 3, For every layer, its format is A8R8G8B8, so in recompile library
**    function, always A8 is MSB, B8 is LSB. so in shader,
**    sampleResult.w is MSB, sampleResult. z is LSB.
**    because in shader xyzw is mapping to rgba.
**/

#define TEXLDTYPE_NORMAL        0
#define TEXLDTYPE_PROJ          1
#define TEXLDTYPE_GATHER        2
#define TEXLDTYPE_GATHERPCF     3
#define TEXLDTYPE_FETCHMS       4

static gctSTRING gcLibTexFormatConvertHalti2_Header =
"#version 310 es\n"
"#extension GL_VIV_asm: enable\n"
"/* gcLibTexFormatConvertHalti2 */\n"
"precision highp float;\n"
"precision highp int;\n"
"precision highp sampler2D;\n"
"precision highp sampler3D;\n"
"precision highp isampler2D;\n"
"precision highp isampler3D;\n"
"precision highp usampler2D;\n"
"precision highp usampler3D;\n"
"in vec3 texCoord3D;\n"
"uniform sampler3D origSampler3D;\n"
"uniform sampler3D extraSampler3D;\n"
"out vec4 fragColor;\n"
"#define TEXLDTYPE_NORMAL       0\n"
"#define TEXLDTYPE_PROJ         1\n"
"#define TEXLDTYPE_GATHER       2\n"
"#define TEXLDTYPE_GATHERPCF    3\n"
"#define TEXLDTYPE_FETCHMS      4\n"
"#define MOD_NONE               0\n"
"#define MOD_BIAS               1\n"
"#define MOD_LODBIAS            2\n"
"#define MOD_GATHER             3\n"
"#define COMPONENT_X            0\n"
"#define COMPONENT_Y            1\n"
"#define COMPONENT_Z            2\n"
"#define COMPONENT_W            3\n"
"#define COMPONENT_ZERO         4\n"
"#define COMPONENT_ONE          5\n"
"\n"
"#define _4BITS_MAX             15.5\n"
"#define _8BITS_MAX             255.9\n"
"#define _12BITS_MAX            4095.0\n"
"#define _8BITS_SIGNED_MAX      127\n"
"#define _16BITS_SIGNED_MAX     32767\n"
"struct SamplerDesc\n"
"{\n"
"    float  lodMin; \n"
"    float  lodMax; \n"
"    float  height; \n"
"    float  width;  \n"
"\n"
"};\n"
"int viv_getSamplerIndex(sampler2D s)\n"
"{\n"
"    int retVal = 0;\n"
"   _viv_asm(GET_SAMPLER_IDX, retVal, s);\n"
"   return retVal;\n"
"}\n"
"\n"
"uniform SamplerDesc viv_sampler_desc[12];\n"
"int _viv_sampler_format[12];\n"
"\n"
"float getSamplerDescHeight(sampler2D s)\n"
"{\n"
"    int idx = viv_getSamplerIndex(s);\n"
"    return viv_sampler_desc[idx].height;\n"
"}\n"
"int getSamplerFormat(sampler2D s)\n"
"{\n"
"    int idx = viv_getSamplerIndex(s);\n"
"    return _viv_sampler_format[idx];\n"
"}\n"
"\n";

static gctSTRING gcLibTexFormatConvertHalti2_TexCvtUnifiedFunc =
"mediump float _txcvt_single_swizzle_float(in vec4 val, in int swizzle)\n"
"{\n"
"   switch (swizzle)\n"
"   {\n"
"       case 0:\n"
"           return val.x;\n"
"       case 1:\n"
"           return val.y;\n"
"       case 2:\n"
"           return val.z;\n"
"       case 3:\n"
"           return val.w;\n"
"       case 4:\n"
"           return 0.0;\n"
"       default:\n"
"           return 1.0;\n"
"   }\n"
"   return 0.0;\n"
"}\n"
"mediump vec4 _txcvt_swizzle_float(in vec4 val, in int swizzleX, in int swizzleY, in int swizzleZ, in int swizzleW)\n"
"{\n"
"   vec4 outputResult;\n"
"   outputResult.x = _txcvt_single_swizzle_float(val, swizzleX);\n"
"   outputResult.y = _txcvt_single_swizzle_float(val, swizzleY);\n"
"   outputResult.z = _txcvt_single_swizzle_float(val, swizzleZ);\n"
"   outputResult.w = _txcvt_single_swizzle_float(val, swizzleW);\n"
"   return outputResult;\n"
"}\n"
"\n"
"mediump int _txcvt_single_swizzle_int(in ivec4 val, in int swizzle)\n"
"{\n"
"   switch (swizzle)\n"
"   {\n"
"       case 0:\n"
"           return val.x;\n"
"       case 1:\n"
"           return val.y;\n"
"       case 2:\n"
"           return val.z;\n"
"       case 3:\n"
"           return val.w;\n"
"       case 4:\n"
"           return 0;\n"
"       default:\n"
"           return 1;\n"
"   }\n"
"   return 0;\n"
"}\n"
"\n"
"mediump ivec4 _txcvt_swizzle_int(in ivec4 val, in int swizzleX, in int swizzleY, in int swizzleZ, in int swizzleW)\n"
"{\n"
"   ivec4 outputResult;\n"
"   outputResult.x = _txcvt_single_swizzle_int(val, swizzleX);\n"
"   outputResult.y = _txcvt_single_swizzle_int(val, swizzleY);\n"
"   outputResult.z = _txcvt_single_swizzle_int(val, swizzleZ);\n"
"   outputResult.w = _txcvt_single_swizzle_int(val, swizzleW);\n"
"   return outputResult;\n"
"}\n"
"\n"
"mediump uint _txcvt_single_swizzle_uint(in uvec4 val, in int swizzle)\n"
"{\n"
"   switch (swizzle)\n"
"   {\n"
"       case 0:\n"
"           return val.x;\n"
"       case 1:\n"
"           return val.y;\n"
"       case 2:\n"
"           return val.z;\n"
"       case 3:\n"
"           return val.w;\n"
"       case 4:\n"
"           return 0u;\n"
"       default:\n"
"           return 1u;\n"
"   }\n"
"   return 0u;\n"
"}\n"
"\n"
"mediump uvec4 _txcvt_swizzle_uint(in uvec4 val, in int swizzleX, in int swizzleY, in int swizzleZ, in int swizzleW)\n"
"{\n"
"   uvec4 outputResult;\n"
"   outputResult.x = _txcvt_single_swizzle_uint(val, swizzleX);\n"
"   outputResult.y = _txcvt_single_swizzle_uint(val, swizzleY);\n"
"   outputResult.z = _txcvt_single_swizzle_uint(val, swizzleZ);\n"
"   outputResult.w = _txcvt_single_swizzle_uint(val, swizzleW);\n"
"   return outputResult;\n"
"}\n"
"\n"
"ivec4 _txcvt_SIGN_EXT_16(ivec4 color)\n"
"{\n"
"   if (color.x > _16BITS_SIGNED_MAX)\n"
"   {\n"
"       color.x = int(uint(color.x) | 0xffff0000u);\n"
"   }\n"
"   if (color.y > _16BITS_SIGNED_MAX)\n"
"   {\n"
"       color.y = int(uint(color.y) | 0xffff0000u);\n"
"   }\n"
"   if (color.z > _16BITS_SIGNED_MAX)\n"
"   {\n"
"       color.z = int(uint(color.z) | 0xffff0000u);\n"
"   }\n"
"   if (color.w > _16BITS_SIGNED_MAX)\n"
"   {\n"
"       color.w = int(uint(color.w) | 0xffff0000u);\n"
"   }\n"
"   return color;\n"
"}\n"
"ivec4 _txcvt_SIGN_EXT_8(ivec4 color)\n"
"{\n"
"   if (color.x > _8BITS_SIGNED_MAX)\n"
"   {\n"
"       color.x = int(uint(color.x) | 0xffffff00u);\n"
"   }\n"
"   if (color.y > _8BITS_SIGNED_MAX)\n"
"   {\n"
"       color.y = int(uint(color.y) | 0xffffff00u);\n"
"   }\n"
"   if (color.z > _8BITS_SIGNED_MAX)\n"
"   {\n"
"       color.z = int(uint(color.z) | 0xffffff00u);\n"
"   }\n"
"   if (color.w > _8BITS_SIGNED_MAX)\n"
"   {\n"
"       color.w = int(uint(color.w) | 0xffffff00u);\n"
"   }\n"
"   return color;\n"
"}\n"
"\n"
"mediump int _txcvt_RGBA4_to_I8(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp ivec4 itmp = min(ivec4(val * _4BITS_MAX + 0.5), 15);\n"
"   mediump int iret = ((itmp.y << 4) | (itmp.z)) & 0x000000ff;\n"
"   if (iret > _8BITS_SIGNED_MAX)\n"
"   {\n"
"       iret = int(uint(iret) | 0xffffff00u);\n"
"   }\n"
"   return iret;\n"
"}\n"
"\n"
"mediump uint _txcvt_RGBA4_to_UI8(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp uvec4 utmp = min(uvec4(val * _4BITS_MAX + 0.5), 15u);\n"
"   return ((utmp.y << 4) | (utmp.z)) & 0x000000ffu;\n"
"}\n"
"mediump vec4 _texelFetch_float(sampler3D sampler, ivec4 p, int sampleIndex)\n"
"{\n"
"    vec4 result;\n"
"    _viv_asm(TEXFETCH_MS, result, sampler, sampleIndex);\n"
"    _viv_asm(TEXLD, result, sampler, p);\n"
"    return result;\n"
"}\n"
"\n";

static gctSTRING gcLibTexFormatConvertHalti2_TexCvtFunc =
"\n"
"vec4 _txcvt_R32F(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    vec4 color;\n"
"    if (type == TEXLDTYPE_GATHER)\n"
"    {\n"
"        vec4 colorLo;\n"
"        vec4 colorHi;\n"
"        if (mod == COMPONENT_X) {\n"
"            colorLo = viv_textureGather(origSampler, coord, 0);\n"
"            colorHi = viv_textureGather(origSampler, coord, 1);\n"
"            /* combine high and low */\n"
"            highp uvec4 lo = floatBitsToUint(colorLo),\n"
"                  hi = floatBitsToUint(colorHi);\n"
"            lo |= (hi << 16u);\n"
"            color = uintBitsToFloat(lo);\n"
"        } else if (mod == COMPONENT_ONE || mod == COMPONENT_W)  {\n"
"            color = vec4(1.0, 1.0, 1.0, 1.0);\n"
"        } else /* mod == 0, G, B, return 0.0 */  {\n"
"            color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"        }\n"
"    } else {\n"
"         /* should assert, */\n"
"         color.xyz = vec3(0.0, 0.0, 0.0);\n"
"         color.w   = 1.0;\n"
"    }\n"
"    return color;\n"
"}\n"
"\n"
"ivec4 _txcvt_R32I(\n"
"    isampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    ivec4 color;\n"
"    if (type == TEXLDTYPE_GATHER)\n"
"    {\n"
"        ivec4 colorLo;\n"
"        ivec4 colorHi;\n"
"        if (mod == COMPONENT_X) {\n"
"            colorLo = viv_textureGather(origSampler, coord, 0);\n"
"            colorHi = viv_textureGather(origSampler, coord, 1);\n"
"            /* combine high and low */\n"
"            highp uvec4 lo = uvec4(colorLo),\n"
"                  hi = uvec4(colorHi);\n"
"            lo |= (hi << 16u);\n"
"            color = ivec4(lo);\n"
"        } else if (mod == COMPONENT_ONE || mod == COMPONENT_W)  {\n"
"            color = ivec4(1, 1, 1, 1);\n"
"        } else /* mod == 0, G, B, return 0 */  {\n"
"            color = ivec4(0, 0, 0, 0);\n"
"        }\n"
"    } \n"
"    else if (type == TEXLDTYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color  = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color  = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            color  = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"        color.y = 0;\n"
"        color.z = 0;\n"
"        color.w = 1;\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color  = viv_texture(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color  = viv_texture(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            color  = viv_textureLod(origSampler, coord, lod_bias);\n"
"        }\n"
"        color.y = 0;\n"
"        color.z = 0;\n"
"        color.w = 1;\n"
"    }\n"
"    return color;\n"
"}\n"
"\n"
"uvec4 _txcvt_R32UI(\n"
"    usampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    uvec4 color;\n"
"    if (type == TEXLDTYPE_GATHER)\n"
"    {\n"
"        highp uvec4 colorLo;\n"
"        highp uvec4 colorHi;\n"
"        if (mod == COMPONENT_X) {\n"
"            colorLo = viv_textureGather(origSampler, coord, 0);\n"
"            colorHi = viv_textureGather(origSampler, coord, 1);\n"
"            /* combine high and low */\n"
"            colorLo |= (colorHi << 16u);\n"
"            color = colorLo;\n"
"        } else if (mod == COMPONENT_ONE || mod == COMPONENT_W)  {\n"
"            color = uvec4(1u, 1u, 1u, 1u);\n"
"        } else /* mod == 0, G, B, return 0 */  {\n"
"            color = uvec4(0, 0, 0, 0);\n"
"        }\n"
"    } \n"
"    else if (type == TEXLDTYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color  = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color  = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            color  = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"        color.y = 0u;\n"
"        color.z = 0u;\n"
"        color.w = 1u;\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color  = viv_texture(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color  = viv_texture(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            color  = viv_textureLod(origSampler, coord, lod_bias);\n"
"        }\n"
"        color.y = 0u;\n"
"        color.z = 0u;\n"
"        color.w = 1u;\n"
"    }\n"
"    return color;\n"
"}\n"
"\n"
"vec4 _txcvt_G32R32F(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    vec4 color;\n"
"    if (type == TEXLDTYPE_GATHER)\n"
"    {\n"
"        vec4 colorLo;\n"
"        vec4 colorHi;\n"
"        if (mod == COMPONENT_X) {\n"
"            colorLo = viv_textureGather(origSampler, coord, 0);\n"
"            colorHi = viv_textureGather(origSampler, coord, 1);\n"
"            /* combine high and low */\n"
"            highp uvec4 lo = floatBitsToUint(colorLo),\n"
"                  hi = floatBitsToUint(colorHi);\n"
"            lo |= (hi << 16u);\n"
"            color = uintBitsToFloat(lo);\n"
"        } else if (mod == COMPONENT_Y) {\n"
"            colorLo = viv_textureGather(origSampler, coord, 2);\n"
"            colorHi = viv_textureGather(origSampler, coord, 3);\n"
"            /* combine high and low */\n"
"            highp uvec4 lo = floatBitsToUint(colorLo),\n"
"                  hi = floatBitsToUint(colorHi);\n"
"            lo |= (hi << 16u);\n"
"            color = uintBitsToFloat(lo);\n"
"        } else if (mod == COMPONENT_ONE || mod == COMPONENT_W)  {\n"
"            color = vec4(1.0, 1.0, 1.0, 1.0);\n"
"        } else /* mod == 0, G, B, return 0.0 */  {\n"
"            color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"        }\n"
"    } else {\n"
"         /* should assert, */\n"
"         color.xyz = vec3(0.0);\n"
"         color.w   = 1.0;\n"
"    }\n"
"    return color;\n"
"}\n"
"\n"
"ivec4 _txcvt_G32R32I(\n"
"    isampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    ivec4 color;\n"
"    if (type == TEXLDTYPE_GATHER)\n"
"    {\n"
"        ivec4 colorLo;\n"
"        ivec4 colorHi;\n"
"        if (mod == COMPONENT_X) {\n"
"            colorLo = viv_textureGather(origSampler, coord, 0);\n"
"            colorHi = viv_textureGather(origSampler, coord, 1);\n"
"            /* combine high and low */\n"
"            highp  uvec4 lo = uvec4(colorLo),\n"
"                  hi = uvec4(colorHi);\n"
"            lo |= (hi << 16u);\n"
"            color = ivec4(lo);\n"
"        } else if (mod == COMPONENT_Y) {\n"
"            colorLo = viv_textureGather(origSampler, coord, 2);\n"
"            colorHi = viv_textureGather(origSampler, coord, 3);\n"
"            /* combine high and low */\n"
"            highp uvec4 lo = uvec4(colorLo),\n"
"                  hi = uvec4(colorHi);\n"
"            lo |= (hi << 16u);\n"
"            color = ivec4(lo);\n"
"        } else if (mod == COMPONENT_ONE || mod == COMPONENT_W)  {\n"
"            color = ivec4(1, 1, 1, 1);\n"
"        } else /* mod == 0, G, B, return 0 */  {\n"
"            color = ivec4(0, 0, 0, 0);\n"
"        }\n"
"    } else {\n"
"         /* should assert, */\n"
"         color.xyz = ivec3(0, 0, 0);\n"
"         color.w   = 1;\n"
"    }\n"
"    return color;\n"
"}\n"
"\n"
"uvec4 _txcvt_G32R32UI(\n"
"    usampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    uvec4 color;\n"
"    if (type == TEXLDTYPE_GATHER)\n"
"    {\n"
"        highp uvec4 colorLo;\n"
"        highp uvec4 colorHi;\n"
"        if (mod == COMPONENT_X) {\n"
"            colorLo = viv_textureGather(origSampler, coord, 0);\n"
"            colorHi = viv_textureGather(origSampler, coord, 1);\n"
"            /* combine high and low */\n"
"            colorLo |= (colorHi << 16u);\n"
"            color = colorLo;\n"
"        } else if (mod == COMPONENT_Y) {\n"
"            colorLo = viv_textureGather(origSampler, coord, 2);\n"
"            colorHi = viv_textureGather(origSampler, coord, 3);\n"
"            /* combine high and low */\n"
"            colorLo |= (colorHi << 16u);\n"
"            color = colorLo;\n"
"        } else if (mod == COMPONENT_ONE || mod == COMPONENT_W)  {\n"
"            color = uvec4(1u, 1u, 1u, 1u);\n"
"        } else /* mod == 0, G, B, return 0 */  {\n"
"            color = uvec4(0, 0, 0, 0);\n"
"        }\n"
"    } else {\n"
"         /* should assert, */\n"
"         color.xyz = uvec3(0, 0 ,0);\n"
"         color.w   = 1u;\n"
"    }\n"
"    return color;\n"
"}\n"
"\n"
"vec4 _txcvt_A32B32G32R32F_2_G32R32F(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler\n"
"    )\n"
"{\n"
"    vec4 color;\n"
"    if (type == TEXLDTYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord).xyxy;\n"
"            color.xy = textureProj(origSampler, coord).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord, lod_bias).xyxy;\n"
"            color.xy = textureProj(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = textureProjLod(extraSampler, coord, lod_bias).xyxy;\n"
"            color.xy = textureProjLod(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"    }\n"
"    else if (type == TEXLDTYPE_GATHER)\n"
"    {\n"
"        vec4 colorLo;\n"
"        vec4 colorHi;\n"
"        if (mod == COMPONENT_X) {\n"
"            colorLo = viv_textureGather(origSampler, coord, 0);\n"
"            colorHi = viv_textureGather(origSampler, coord, 1);\n"
"        } else if (mod == COMPONENT_Y) {\n"
"            colorLo = viv_textureGather(origSampler, coord, 2);\n"
"            colorHi = viv_textureGather(origSampler, coord, 3);\n"
"        } else if (mod == COMPONENT_Z) {\n"
"            colorLo = viv_textureGather(extraSampler, coord, 0);\n"
"            colorHi = viv_textureGather(extraSampler, coord, 1);\n"
"        } else if (mod == COMPONENT_W)  {\n"
"            colorLo = viv_textureGather(extraSampler, coord, 2);\n"
"            colorHi = viv_textureGather(extraSampler, coord, 3);\n"
"        } else if (mod == COMPONENT_ZERO)  {\n"
"            color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"        } else {\n"
"            color = vec4(1.0, 1.0, 1.0, 1.0);\n"
"        }\n"
"        /* combine high and low */\n"
"        if (mod <= COMPONENT_W)\n"
"        {\n"
"            highp uvec4 lo = floatBitsToUint(colorLo),\n"
"                  hi = floatBitsToUint(colorHi);\n"
"            lo |= (hi << 16u);\n"
"            color = uintBitsToFloat(lo);\n"
"        }\n"
"    }\n"
"    else if (type == TEXLDTYPE_GATHERPCF)\n"
"    {\n"
"        /* the mod is overloaded as swizzle */\n"
"        /* use special vivante built-in to avoid sampler type check */\n"
"        color.zw = viv_textureGather(extraSampler, coord, lod_bias).xy;\n"
"        color.xy = viv_textureGather(origSampler, coord, lod_bias).xy;\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = viv_texture(extraSampler, coord).xyxy;\n"
"            color.xy = viv_texture(origSampler, coord).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = viv_texture(extraSampler, coord, lod_bias).xyxy;\n"
"            color.xy = viv_texture(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = viv_textureLod(extraSampler, coord, lod_bias).xyxy;\n"
"            color.xy = viv_textureLod(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"    }\n"
"    return color;\n"
"}\n"
"\n"
"vec4 _txcvt_A32B32G32R32F_2_G32R32F_grad(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    vec3 gradientX,\n"
"    vec3 gradientY,\n"
"    int type,\n"
"    sampler3D extraSampler\n"
"    )\n"
"{\n"
"    vec4 color;\n"
"    if (type == 1)\n"
"    {\n"
"        color    = textureProjGrad(extraSampler, coord, gradientX, gradientY).xyxy;\n"
"        color.xy = textureProjGrad(origSampler, coord, gradientX, gradientY).xy;\n"
"    }\n"
"    else\n"
"    {\n"
"        color    = viv_textureGrad(extraSampler, coord, gradientX, gradientY).xyxy;\n"
"        color.xy = viv_textureGrad(origSampler, coord, gradientX, gradientY).xy;\n"
"    }\n"
"    return color;\n"
"}\n"
"\n"
"vec4 _txcvt_X32B32G32R32F_2_G32R32F(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler\n"
"    )\n"
"{\n"
"    vec4 color;\n"
"    if (type == 1 /* textureProj */)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord).xxxx;\n"
"            color.xy = textureProj(origSampler, coord).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord, lod_bias).xxxx;\n"
"            color.xy = textureProj(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = textureProjLod(extraSampler, coord, lod_bias).xxxx;\n"
"            color.xy = textureProjLod(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        color.w = 1.0f;\n"
"    }\n"
"    else if (type == TEXLDTYPE_GATHER)\n"
"    {\n"
"        vec4 colorLo;\n"
"        vec4 colorHi;\n"
"        if (mod == COMPONENT_X) {\n"
"            colorLo = viv_textureGather(origSampler, coord, 0);\n"
"            colorHi = viv_textureGather(origSampler, coord, 1);\n"
"        } else if (mod == COMPONENT_Y) {\n"
"            colorLo = viv_textureGather(origSampler, coord, 2);\n"
"            colorHi = viv_textureGather(origSampler, coord, 3);\n"
"        } else if (mod == COMPONENT_Z) {\n"
"            colorLo = viv_textureGather(extraSampler, coord, 0);\n"
"            colorHi = viv_textureGather(extraSampler, coord, 1);\n"
"        } else if (mod == COMPONENT_ZERO)  {\n"
"            color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"        } else {\n"
"            /* W and component_one both return 1.0 */\n"
"            color = vec4(1.0, 1.0, 1.0, 1.0);\n"
"        }\n"
"        /* combine high and low */\n"
"        if (mod <= COMPONENT_Z)\n"
"        {\n"
"            highp uvec4 lo = floatBitsToUint(colorLo),\n"
"                  hi = floatBitsToUint(colorHi);\n"
"            lo |= (hi << 16u);\n"
"            color = uintBitsToFloat(lo);\n"
"        }\n"
"    }\n"
"    else if (type == TEXLDTYPE_GATHERPCF)\n"
"    {\n"
"        /* the mod is overloaded as swizzle */\n"
"        /* use special vivante built-in to avoid sampler type check */\n"
"        color.zw = viv_textureGather(extraSampler, coord, lod_bias).xy;\n"
"        color.xy = viv_textureGather(origSampler, coord, lod_bias).xy;\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = viv_texture(extraSampler, coord).xxxx;\n"
"            color.xy = viv_texture(origSampler, coord).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = viv_texture(extraSampler, coord, lod_bias).xxxx;\n"
"            color.xy = viv_texture(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = viv_textureLod(extraSampler, coord, lod_bias).xxxx;\n"
"            color.xy = viv_textureLod(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        color.w = 1.0f;\n"
"    }\n"
"    return color;\n"
"}\n"
"\n"
"vec4 _txcvt_X32B32G32R32F_2_G32R32F_grad(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    vec3 gradientX,\n"
"    vec3 gradientY,\n"
"    int type,\n"
"    sampler3D extraSampler\n"
"    )\n"
"{\n"
"    vec4 color;\n"
"    if (type == 1)\n"
"    {\n"
"        color    = textureProjGrad(extraSampler, coord, gradientX, gradientY).xxxx;\n"
"        color.xy = textureProjGrad(origSampler, coord, gradientX, gradientY).xy;\n"
"    }\n"
"    else\n"
"    {\n"
"        color    = viv_textureGrad(extraSampler, coord, gradientX, gradientY).xxxx;\n"
"        color.xy = viv_textureGrad(origSampler, coord, gradientX, gradientY).xy;\n"
"    }\n"
"    color.w = 1.0f;\n"
"    return color;\n"
"}\n"
"\n"
"ivec4 _txcvt_A32B32G32R32I_2_G32R32I(\n"
"    isampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    isampler3D extraSampler\n"
"    )\n"
"{\n"
"    ivec4 color;\n"
"    if (type == 1)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord).xyxy;\n"
"            color.xy = textureProj(origSampler, coord).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord, lod_bias).xyxy;\n"
"            color.xy = textureProj(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = textureProjLod(extraSampler, coord, lod_bias).xyxy;\n"
"            color.xy = textureProjLod(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"    }\n"
"    else if (type == TEXLDTYPE_GATHER)\n"
"    {\n"
"        highp ivec4 colorLo;\n"
"        highp ivec4 colorHi;\n"
"        if (mod == COMPONENT_X) {\n"
"            colorLo = viv_textureGather(origSampler, coord, 0);\n"
"            colorHi = viv_textureGather(origSampler, coord, 1);\n"
"        } else if (mod == COMPONENT_Y) {\n"
"            colorLo = viv_textureGather(origSampler, coord, 2);\n"
"            colorHi = viv_textureGather(origSampler, coord, 3);\n"
"        } else if (mod == COMPONENT_Z) {\n"
"            colorLo = viv_textureGather(extraSampler, coord, 0);\n"
"            colorHi = viv_textureGather(extraSampler, coord, 1);\n"
"        } else if (mod == COMPONENT_W)  {\n"
"            colorLo = viv_textureGather(extraSampler, coord, 2);\n"
"            colorHi = viv_textureGather(extraSampler, coord, 3);\n"
"        } else if (mod == COMPONENT_ZERO)  {\n"
"            color = ivec4(0, 0, 0, 0);\n"
"        } else {\n"
"            color = ivec4(1, 1, 1, 1);\n"
"        }\n"
"        /* combine high and low */\n"
"        if (mod <= COMPONENT_W)\n"
"        {\n"
"            colorLo |= colorHi << 16;\n"
"            color = colorLo;\n"
"        }\n"
"    }\n"
"    else if (type == TEXLDTYPE_GATHERPCF)\n"
"    {\n"
"        /* the mod is overloaded as swizzle */\n"
"        /* use special vivante built-in to avoid sampler type check */\n"
"        color.zw = viv_textureGather(extraSampler, coord, lod_bias).xy;\n"
"        color.xy = viv_textureGather(origSampler, coord, lod_bias).xy;\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = viv_texture(extraSampler, coord).xyxy;\n"
"            color.xy = viv_texture(origSampler, coord).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = viv_texture(extraSampler, coord, lod_bias).xyxy;\n"
"            color.xy = viv_texture(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = viv_textureLod(extraSampler, coord, lod_bias).xyxy;\n"
"            color.xy = viv_textureLod(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"    }\n"
"    return color;\n"
"}\n"
"\n"
"ivec4 _txcvt_A32B32G32R32I_2_G32R32I_grad(\n"
"    isampler3D origSampler,\n"
"    vec4 coord,\n"
"    vec3 gradientX,\n"
"    vec3 gradientY,\n"
"    int type,\n"
"    isampler3D extraSampler\n"
"    )\n"
"{\n"
"    ivec4 color;\n"
"    if (type == 1)\n"
"    {\n"
"        color    = textureProjGrad(extraSampler, coord, gradientX, gradientY).xyxy;\n"
"        color.xy = textureProjGrad(origSampler, coord, gradientX, gradientY).xy;\n"
"    }\n"
"    else\n"
"    {\n"
"        color    = viv_textureGrad(extraSampler, coord, gradientX, gradientY).xyxy;\n"
"        color.xy = viv_textureGrad(origSampler, coord, gradientX, gradientY).xy;\n"
"    }\n"
"    return color;\n"
"}\n"
"\n"
"ivec4 _txcvt_X32B32G32R32I_2_G32R32I(\n"
"    isampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    isampler3D extraSampler\n"
"    )\n"
"{\n"
"    ivec4 color;\n"
"    if (type == 1)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord).xxxx;\n"
"            color.xy = textureProj(origSampler, coord).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord, lod_bias).xxxx;\n"
"            color.xy = textureProj(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = textureProjLod(extraSampler, coord, lod_bias).xxxx;\n"
"            color.xy = textureProjLod(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        color.w = 1;\n"
"    }\n"
"    else if (type == TEXLDTYPE_GATHER)\n"
"    {\n"
"        highp ivec4 colorLo;\n"
"        highp ivec4 colorHi;\n"
"        if (mod == COMPONENT_X) {\n"
"            colorLo = viv_textureGather(origSampler, coord, 0);\n"
"            colorHi = viv_textureGather(origSampler, coord, 1);\n"
"        } else if (mod == COMPONENT_Y) {\n"
"            colorLo = viv_textureGather(origSampler, coord, 2);\n"
"            colorHi = viv_textureGather(origSampler, coord, 3);\n"
"        } else if (mod == COMPONENT_Z) {\n"
"            colorLo = viv_textureGather(extraSampler, coord, 0);\n"
"            colorHi = viv_textureGather(extraSampler, coord, 1);\n"
"        } else if (mod == COMPONENT_ZERO)  {\n"
"            color = ivec4(0, 0, 0, 0);\n"
"        } else {\n"
"            color = ivec4(1, 1, 1, 1);\n"
"        }\n"
"        /* combine high and low */\n"
"        if (mod <= COMPONENT_Z)\n"
"        {\n"
"            colorLo |= colorHi << 16;\n"
"            color = colorLo;\n"
"        }\n"
"    }\n"
"    else if (type == TEXLDTYPE_GATHERPCF)\n"
"    {\n"
"        /* the mod is overloaded as swizzle */\n"
"        /* use special vivante built-in to avoid sampler type check */\n"
"        color.zw = viv_textureGather(extraSampler, coord, lod_bias).xy;\n"
"        color.xy = viv_textureGather(origSampler, coord, lod_bias).xy;\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = viv_texture(extraSampler, coord).xxxx;\n"
"            color.xy = viv_texture(origSampler, coord).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = viv_texture(extraSampler, coord, lod_bias).xxxx;\n"
"            color.xy = viv_texture(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = viv_textureLod(extraSampler, coord, lod_bias).xxxx;\n"
"            color.xy = viv_textureLod(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        color.w = 1;\n"
"    }\n"
"    return color;\n"
"}\n"
"\n"
"ivec4 _txcvt_X32B32G32R32I_2_G32R32I_grad(\n"
"    isampler3D origSampler,\n"
"    vec4 coord,\n"
"    vec3 gradientX,\n"
"    vec3 gradientY,\n"
"    int type,\n"
"    isampler3D extraSampler\n"
"    )\n"
"{\n"
"    ivec4 color;\n"
"    if (type == 1)\n"
"    {\n"
"        color    = textureProjGrad(extraSampler, coord, gradientX, gradientY).xxxx;\n"
"        color.xy = textureProjGrad(origSampler, coord, gradientX, gradientY).xy;\n"
"    }\n"
"    else\n"
"    {\n"
"        color    = viv_textureGrad(extraSampler, coord, gradientX, gradientY).xxxx;\n"
"        color.xy = viv_textureGrad(origSampler, coord, gradientX, gradientY).xy;\n"
"    }\n"
"    color.w = 1;\n"
"    return color;\n"
"}\n"
"\n"
"uvec4 _txcvt_A32B32G32R32UI_2_G32R32UI(\n"
"    usampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    usampler3D extraSampler\n"
"    )\n"
"{\n"
"    uvec4 color;\n"
"    if (type == TEXLDTYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord).xyxy;\n"
"            color.xy = textureProj(origSampler, coord).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord, lod_bias).xyxy;\n"
"            color.xy = textureProj(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = textureProjLod(extraSampler, coord, lod_bias).xyxy;\n"
"            color.xy = textureProjLod(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"    }\n"
"    else if (type == TEXLDTYPE_GATHER)\n"
"    {\n"
"        highp uvec4 colorLo;\n"
"        highp uvec4 colorHi;\n"
"        if (mod == COMPONENT_X) {\n"
"            colorLo = viv_textureGather(origSampler, coord, 0);\n"
"            colorHi = viv_textureGather(origSampler, coord, 1);\n"
"        } else if (mod == COMPONENT_Y) {\n"
"            colorLo = viv_textureGather(origSampler, coord, 2);\n"
"            colorHi = viv_textureGather(origSampler, coord, 3);\n"
"        } else if (mod == COMPONENT_Z) {\n"
"            colorLo = viv_textureGather(extraSampler, coord, 0);\n"
"            colorHi = viv_textureGather(extraSampler, coord, 1);\n"
"        } else if (mod == COMPONENT_W) {\n"
"            colorLo = viv_textureGather(extraSampler, coord, 2);\n"
"            colorHi = viv_textureGather(extraSampler, coord, 3);\n"
"        } else if (mod == COMPONENT_ZERO)  {\n"
"            color = uvec4(0, 0, 0, 0);\n"
"        } else {\n"
"            color = uvec4(1u, 1u, 1u, 1u);\n"
"        }\n"
"        /* combine high and low */\n"
"        if (mod <= COMPONENT_W)\n"
"        {\n"
"            colorLo |= colorHi << 16;\n"
"            color = colorLo;\n"
"        }\n"
"    }\n"
"    else if (type == TEXLDTYPE_GATHERPCF)\n"
"    {\n"
"        /* the mod is overloaded as swizzle */\n"
"        /* use special vivante built-in to avoid sampler type check */\n"
"        color.zw = viv_textureGather(extraSampler, coord, lod_bias).xy;\n"
"        color.xy = viv_textureGather(origSampler, coord, lod_bias).xy;\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = viv_texture(extraSampler, coord).xyxy;\n"
"            color.xy = viv_texture(origSampler, coord).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = viv_texture(extraSampler, coord, lod_bias).xyxy;\n"
"            color.xy = viv_texture(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = viv_textureLod(extraSampler, coord, lod_bias).xyxy;\n"
"            color.xy = viv_textureLod(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"    }\n"
"    return color;\n"
"}\n"
"\n"
"uvec4 _txcvt_A32B32G32R32UI_2_G32R32UI_grad(\n"
"    usampler3D origSampler,\n"
"    vec4 coord,\n"
"    vec3 gradientX,\n"
"    vec3 gradientY,\n"
"    int type,\n"
"    usampler3D extraSampler\n"
"    )\n"
"{\n"
"    uvec4 color;\n"
"    if (type == 1)\n"
"    {\n"
"        color    = textureProjGrad(extraSampler, coord, gradientX, gradientY).xyxy;\n"
"        color.xy = textureProjGrad(origSampler, coord, gradientX, gradientY).xy;\n"
"    }\n"
"    else\n"
"    {\n"
"        color    = viv_textureGrad(extraSampler, coord, gradientX, gradientY).xyxy;\n"
"        color.xy = viv_textureGrad(origSampler, coord, gradientX, gradientY).xy;\n"
"    }\n"
"    return color;\n"
"}\n"
"\n"
"uvec4 _txcvt_X32B32G32R32UI_2_G32R32UI(\n"
"    usampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    usampler3D extraSampler\n"
"    )\n"
"{\n"
"    uvec4 color;\n"
"    if (type == 1)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord).xxxx;\n"
"            color.xy = textureProj(origSampler, coord).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord, lod_bias).xxxx;\n"
"            color.xy = textureProj(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = textureProjLod(extraSampler, coord, lod_bias).xxxx;\n"
"            color.xy = textureProjLod(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        color.w = 1u;\n"
"    }\n"
"    else if (type == TEXLDTYPE_GATHER)\n"
"    {\n"
"        highp uvec4 colorLo;\n"
"        highp uvec4 colorHi;\n"
"        if (mod == COMPONENT_X) {\n"
"            colorLo = viv_textureGather(origSampler, coord, 0);\n"
"            colorHi = viv_textureGather(origSampler, coord, 1);\n"
"        } else if (mod == COMPONENT_Y) {\n"
"            colorLo = viv_textureGather(origSampler, coord, 2);\n"
"            colorHi = viv_textureGather(origSampler, coord, 3);\n"
"        } else if (mod == COMPONENT_Z) {\n"
"            colorLo = viv_textureGather(extraSampler, coord, 0);\n"
"            colorHi = viv_textureGather(extraSampler, coord, 1);\n"
"        } else if (mod == COMPONENT_W) {\n"
"            colorLo = viv_textureGather(extraSampler, coord, 2);\n"
"            colorHi = viv_textureGather(extraSampler, coord, 3);\n"
"        } else if (mod == COMPONENT_ZERO)  {\n"
"            color = uvec4(0, 0, 0, 0);\n"
"        } else {\n"
"            color = uvec4(1u, 1u, 1u, 1u);\n"
"        }\n"
"        /* combine high and low */\n"
"        if (mod <= COMPONENT_W)\n"
"        {\n"
"            colorLo |= colorHi << 16;\n"
"            color = colorLo;\n"
"        }\n"
"    }\n"
"    else if (type == TEXLDTYPE_GATHERPCF)\n"
"    {\n"
"        /* the mod is overloaded as swizzle */\n"
"        /* use special vivante built-in to avoid sampler type check */\n"
"        color.zw = viv_textureGather(extraSampler, coord, lod_bias).xy;\n"
"        color.xy = viv_textureGather(origSampler, coord, lod_bias).xy;\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = viv_texture(extraSampler, coord).xxxx;\n"
"            color.xy = viv_texture(origSampler, coord).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = viv_texture(extraSampler, coord, lod_bias).xxxx;\n"
"            color.xy = viv_texture(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = viv_textureLod(extraSampler, coord, lod_bias).xxxx;\n"
"            color.xy = viv_textureLod(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        color.w = 1u;\n"
"    }\n"
"    return color;\n"
"}\n"
"\n"
"uvec4 _txcvt_X32B32G32R32UI_2_G32R32UI_grad(\n"
"    usampler3D origSampler,\n"
"    vec4 coord,\n"
"    vec3 gradientX,\n"
"    vec3 gradientY,\n"
"    int type,\n"
"    usampler3D extraSampler\n"
"    )\n"
"{\n"
"    uvec4 color;\n"
"    if (type == 1)\n"
"    {\n"
"        color    = textureProjGrad(extraSampler, coord, gradientX, gradientY).xxxx;\n"
"        color.xy = textureProjGrad(origSampler, coord, gradientX, gradientY).xy;\n"
"    }\n"
"    else\n"
"    {\n"
"        color    = viv_textureGrad(extraSampler, coord, gradientX, gradientY).xxxx;\n"
"        color.xy = viv_textureGrad(origSampler, coord, gradientX, gradientY).xy;\n"
"    }\n"
"    color.w = 1u;\n"
"    return color;\n"
"}\n"
"\n"
"vec4 _txcvt_S8D32F_1_G32R32F(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    vec4 color;\n"
"    if (type == TEXLDTYPE_PROJ)\n"
"    {\n"
"        color.xyz = vec3(0.0, 0.0, 0.0);\n"
"        color.w   = 1.0;\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color.x = textureProj(origSampler, coord).x;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color.x = textureProj(origSampler, coord, lod_bias).x;\n"
"        }\n"
"        else\n"
"        {\n"
"            color.x = textureProjLod(origSampler, coord, lod_bias).x;\n"
"        }\n"
"    }\n"
"    else if (type == TEXLDTYPE_GATHER)\n"
"    {\n"
"        vec4 colorLo;\n"
"        vec4 colorHi;\n"
"        if (mod == COMPONENT_X) {\n"
"            vec4 colorLo = viv_textureGather(origSampler, coord, 0);\n"
"            vec4 colorHi = viv_textureGather(origSampler, coord, 1);\n"
"            highp uvec4 lo = floatBitsToUint(colorLo),\n"
"                  hi = floatBitsToUint(colorHi);\n"
"            /* combine high and low */\n"
"            lo |= (hi << 16u);\n"
"            color = uintBitsToFloat(lo);\n"
"        } else if (mod == COMPONENT_ONE)  {\n"
"            color = vec4(1.0, 1.0, 1.0, 1.0);\n"
"        } else {\n"
"            color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        color.xyz = vec3(0.0, 0.0, 0.0);\n"
"        color.w   = 1.0;\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color.x = viv_texture(origSampler, coord).x;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color.x = viv_texture(origSampler, coord, lod_bias).x;\n"
"        }\n"
"        else\n"
"        {\n"
"            color.x = viv_textureLod(origSampler, coord, lod_bias).x;\n"
"        }\n"
"    }\n"
"    return color;\n"
"}\n"
"uvec4 _txcvt_S8D32F_1_G32R32F_u(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    vec4 color;\n"
"    if (type == TEXLDTYPE_PROJ)\n"
"    {\n"
"        color.xyz = vec3(0.0, 0.0, 0.0);\n"
"        color.w   = 1.0;\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color.x = textureProj(origSampler, coord).y;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color.x = textureProj(origSampler, coord, lod_bias).y;\n"
"        }\n"
"        else\n"
"        {\n"
"            color.x = textureProjLod(origSampler, coord, lod_bias).y;\n"
"        }\n"
"    }\n"
"    else if (type == TEXLDTYPE_GATHER)\n"
"    {\n"
"        if (mod == COMPONENT_X) {\n"
"            color = viv_textureGather(origSampler, coord, 2);\n"
"        } else if (mod == COMPONENT_ONE)  {\n"
"            color = vec4(1.0, 1.0, 1.0, 1.0);\n"
"        } else {\n"
"            color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        color.xyz = vec3(0.0, 0.0, 0.0);\n"
"        color.w   = 1.0;\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color.x = viv_texture(origSampler, coord).y;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color.x = viv_texture(origSampler, coord, lod_bias).y;\n"
"        }\n"
"        else\n"
"        {\n"
"            color.x = viv_textureLod(origSampler, coord, lod_bias).y;\n"
"        }\n"
"    }\n"
"    return uvec4(color);\n"
"}\n"
"\n"
"uvec4 _txcvt_D24S8_1_A8B8G8R8UI(\n"
"    usampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    uvec4 color;\n"
"    color.xyz = uvec3(0);\n"
"    color.w   = 1u;\n"
"    if (mod == MOD_NONE)\n"
"    {\n"
"        color.x = viv_texture(origSampler, coord).x;\n"
"    }\n"
"    else if (mod == MOD_BIAS)\n"
"    {\n"
"        color.x = viv_texture(origSampler, coord, lod_bias).x;\n"
"    }\n"
"    else\n"
"    {\n"
"        color.x = viv_textureLod(origSampler, coord, lod_bias).x;\n"
"    }\n"
"    return color;\n"
"}\n"
"\n"
"mediump ivec4 _txcvt_R8I_1_A4R4G4B4(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    mediump vec4 ftmp;\n"
"    if (type == TEXLDTYPE_FETCHMS)"
"    {\n"
"        ivec4 intCoord = floatBitsToInt(coord);\n"
"        ftmp = _texelFetch_float(origSampler, intCoord, mod);\n"
"    }\n"
"    else if (type == TEXLDTYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return ivec4(_txcvt_RGBA4_to_I8(ftmp), 0, 0, 1);\n"
"}\n"
"\n"
"mediump uvec4 _txcvt_R8UI_1_A4R4G4B4(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    mediump vec4 ftmp;\n"
"    if (type == TEXLDTYPE_FETCHMS)"
"    {\n"
"        ivec4 intCoord = floatBitsToInt(coord);\n"
"        ftmp = _texelFetch_float(origSampler, intCoord, mod);\n"
"    }\n"
"    else if (type == TEXLDTYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return uvec4(_txcvt_RGBA4_to_UI8(ftmp), 0u, 0u, 1u);\n"
"}\n"
"\n";

static gctSTRING gcLibTexFormatConvertHalti2_TexCvtFunc1 =
"highp vec4 _txcvt_R8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 rgVal = vec4(1.0);\n"
"    if (type == TEXLDTYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            rgVal  = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            rgVal  = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            rgVal  = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            rgVal  = viv_texture(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            rgVal  = viv_texture(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            rgVal  = viv_textureLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    return vec4(rgVal.x, 0.0, 0.0, 1.0);\n"
"}\n"
"\n"
"highp vec4 _txcvt_G8R8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 rgVal = vec4(1.0);\n"
"    if (type == TEXLDTYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            rgVal  = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            rgVal  = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            rgVal  = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            rgVal  = viv_texture(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            rgVal  = viv_texture(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            rgVal  = viv_textureLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    return vec4(rgVal.x, rgVal.y, 0.0, 1.0);\n"
"}\n"
"\n"
"highp ivec4 _txcvt_A16B16G16R16I(\n"
"    isampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp ivec4 itmp;\n"
"    if (type == TEXLDTYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            itmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            itmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            itmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            itmp = viv_texture(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            itmp = viv_texture(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            itmp = viv_textureLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    return _txcvt_SIGN_EXT_16(itmp);\n"
"}\n"
"highp ivec4 _txcvt_G16R16I(\n"
"    isampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp ivec4 itmp;\n"
"    if (type == TEXLDTYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            itmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            itmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            itmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            itmp = viv_texture(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            itmp = viv_texture(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            itmp = viv_textureLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    return _txcvt_SIGN_EXT_16(itmp);\n"
"}\n"
"highp ivec4 _txcvt_R16I(\n"
"    isampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp ivec4 itmp;\n"
"    if (type == TEXLDTYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            itmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            itmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            itmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            itmp = viv_texture(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            itmp = viv_texture(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            itmp = viv_textureLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    return _txcvt_SIGN_EXT_16(itmp);\n"
"}\n"
"highp ivec4 _txcvt_A8B8G8R8I(\n"
"    isampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp ivec4 itmp;\n"
"    if (type == TEXLDTYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            itmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            itmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            itmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            itmp = viv_texture(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            itmp = viv_texture(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            itmp = viv_textureLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    return _txcvt_SIGN_EXT_8(itmp);\n"
"}\n"
"highp ivec4 _txcvt_A8B8G8R8I_grad(\n"
"    isampler3D origSampler,\n"
"    vec4 coord,\n"
"    vec3 gradientX,\n"
"    vec3 gradientY,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp ivec4 itmp;\n"
"    if (type == TEXLDTYPE_PROJ)\n"
"    {\n"
"        itmp    = textureProjGrad(origSampler, coord, gradientX, gradientY);\n"
"    }\n"
"    else\n"
"    {\n"
"        itmp    = viv_textureGrad(origSampler, coord, gradientX, gradientY);\n"
"    }\n"
"    return _txcvt_SIGN_EXT_8(itmp);\n"
"}\n"
"highp ivec4 _txcvt_G8R8I(\n"
"    isampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp ivec4 itmp;\n"
"    if (type == TEXLDTYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            itmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            itmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            itmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            itmp = viv_texture(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            itmp = viv_texture(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            itmp = viv_textureLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    return _txcvt_SIGN_EXT_8(itmp);\n"
"}\n"
"highp ivec4 _txcvt_R8I(\n"
"    isampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp ivec4 itmp;\n"
"    if (type == TEXLDTYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            itmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            itmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            itmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            itmp = viv_texture(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            itmp = viv_texture(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            itmp = viv_textureLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    return _txcvt_SIGN_EXT_8(itmp);\n"
"}\n"
"highp ivec4 _txcvt_X16B16G16R16I(\n"
"    isampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp ivec4 itmp;\n"
"    if (type == TEXLDTYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            itmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            itmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            itmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            itmp = viv_texture(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            itmp = viv_texture(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            itmp = viv_textureLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    return _txcvt_SIGN_EXT_16(itmp);\n"
"}\n"
"highp ivec4 _txcvt_X8B8G8R8I(\n"
"    isampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp ivec4 itmp;\n"
"    if (type == TEXLDTYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            itmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            itmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            itmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            itmp = viv_texture(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            itmp = viv_texture(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            itmp = viv_textureLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    return _txcvt_SIGN_EXT_8(itmp);\n"
"}\n"
"\n";

static gctSTRING gcLibTexFormatConvertHalti2_TexPcfCvtFunc =
"float _txpcfcvt_2DCoord(\n"
"    sampler2D  sampler,\n"
"    vec4       coord,\n"
"    int        mod,\n"
"    float      lod_bias,\n"
"    int        type,\n"
"    int        compareMode,\n"
"    int        compareFunc\n"
"    )\n"
"{\n"
"    vec4  color;\n"
"    float ref;\n"
"    float result;\n"
"    if (type == TEXLDTYPE_PROJ)\n"
"    {\n"
"        vec4 projCoord = coord / coord.w;\n"
"        ref = projCoord.z;\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color = viv_texture(sampler, projCoord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color = viv_texture(sampler, projCoord, lod_bias);\n"
"        }\n"
"        else if (mod == MOD_LODBIAS)\n"
"        {\n"
"            color = viv_textureLod(sampler, projCoord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_GATHER */\n"
"            /* use special vivante built-in to avoid sampler type check */\n"
"            color = viv_textureGather(sampler, projCoord, lod_bias);\n"
"        }\n"
"    }\n"
"    else if (type == TEXLDTYPE_GATHER)\n"
"    {\n"
"        ref = coord.z;\n"
"        vec4 colorLo;\n"
"        vec4 colorHi;\n"
"        colorLo = viv_textureGather(sampler, coord, 0);\n"
"        colorHi = viv_textureGather(sampler, coord, 1);\n"
"        /* combine high and low */\n"
"        highp uvec4 lo = floatBitsToUint(colorLo),\n"
"              hi = floatBitsToUint(colorHi);\n"
"        lo |= (hi << 16u);\n"
"        color = uintBitsToFloat(lo);\n"
"    }\n"
"    else /* TEXLDPCF */\n"
"    {\n"
"        ref = coord.z;\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color = viv_texture(sampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color = viv_texture(sampler, coord, lod_bias);\n"
"        }\n"
"        else if (mod == MOD_LODBIAS)\n"
"        {\n"
"            color = viv_textureLod(sampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_GATHER */\n"
"            /* use special vivante built-in to avoid sampler type check */\n"
"            color = viv_textureGather(sampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    if (compareMode == 1)\n"
"    {\n"
"        result = color.x;\n"
"    }\n"
"    else\n"
"    {\n"
"        if (compareFunc == 1)\n"
"        {\n"
"            result = 0.0f;\n"
"        }\n"
"        else if (compareFunc == 2)\n"
"        {\n"
"            result = (ref != color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 3)\n"
"        {\n"
"            result = (ref < color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 4)\n"
"        {\n"
"            result = (ref <= color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 5)\n"
"        {\n"
"            result = (ref == color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 6)\n"
"        {\n"
"            result = (ref > color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 7)\n"
"        {\n"
"            result = (ref >= color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else\n"
"        {\n"
"            result = 1.0f;\n"
"        }\n"
"    }\n"
"    return result;\n"
"}\n"
"\n"
"float _txpcfcvt_3DCoord(\n"
"    sampler3D  sampler,\n"
"    vec4       coord,\n"
"    int        mod,\n"
"    float      lod_bias,\n"
"    int        type,\n"
"    int        compareMode,\n"
"    int        compareFunc\n"
"    )\n"
"{\n"
"    vec4  color;\n"
"    float result;\n"
"    int type0 = type & 7; \n"
"    int type1 = type & 8; \n"
"    if (type0 == TEXLDTYPE_GATHER)\n"
"    {\n"
"        vec4 colorLo;\n"
"        vec4 colorHi;\n"
"        colorLo = viv_textureGather(sampler, coord, 0);\n"
"        colorHi = viv_textureGather(sampler, coord, 1);\n"
"        /* combine high and low */\n"
"        highp uvec4 lo = floatBitsToUint(colorLo),\n"
"              hi = floatBitsToUint(colorHi);\n"
"        lo |= (hi << 16u);\n"
"        color = uintBitsToFloat(lo);\n"
"    }\n"
"    else /* TEXLDPCF */\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color = viv_texture(sampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color = viv_texture(sampler, coord, lod_bias);\n"
"        }\n"
"        else if (mod == MOD_LODBIAS)\n"
"        {\n"
"            color = viv_textureLod(sampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_GATHER */\n"
"            /* use special vivante built-in to avoid sampler type check */\n"
"            color = viv_textureGather(sampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    if (compareMode == 1)\n"
"    {\n"
"        result = color.x;\n"
"    }\n"
"    else\n"
"    {\n"
"        float ref = coord.w;\n"
"        if (type1 != 0) \n"
"        {\n"
"            ref = lod_bias;\n"
"        }\n"
"        if (compareFunc == 1)\n"
"        {\n"
"            result = 0.0f;\n"
"        }\n"
"        else if (compareFunc == 2)\n"
"        {\n"
"            result = (ref != color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 3)\n"
"        {\n"
"            result = (ref < color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 4)\n"
"        {\n"
"            result = (ref <= color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 5)\n"
"        {\n"
"            result = (ref == color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 6)\n"
"        {\n"
"            result = (ref > color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 7)\n"
"        {\n"
"            result = (ref >= color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else\n"
"        {\n"
"            result = 1.0f;\n"
"        }\n"
"    }\n"
"    return result;\n"
"}\n"
"\n"
"float _txpcfcvt_2DCoord_grad(\n"
"    sampler2D  sampler,\n"
"    vec4       coord,\n"
"    vec2       gradientX,\n"
"    vec2       gradientY,\n"
"    int        type,\n"
"    int        compareMode,\n"
"    int        compareFunc\n"
"    )\n"
"{\n"
"    vec4  color;\n"
"    float ref;\n"
"    float result;\n"
"    if (type == TEXLDTYPE_PROJ)\n"
"    {\n"
"        vec4 projCoord = coord / coord.w;\n"
"        ref = projCoord.z;\n"
"        color = viv_textureGrad(sampler, projCoord, gradientX, gradientY);\n"
"    }\n"
"    else\n"
"    {\n"
"        ref = coord.z;\n"
"        color = viv_textureGrad(sampler, coord, gradientX, gradientY);\n"
"    }\n"
"    if (compareMode == 1)\n"
"    {\n"
"        result = color.x;\n"
"    }\n"
"    else\n"
"    {\n"
"        if (compareFunc == 1)\n"
"        {\n"
"            result = 0.0f;\n"
"        }\n"
"        else if (compareFunc == 2)\n"
"        {\n"
"            result = (ref != color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 3)\n"
"        {\n"
"            result = (ref < color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 4)\n"
"        {\n"
"            result = (ref <= color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 5)\n"
"        {\n"
"            result = (ref == color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 6)\n"
"        {\n"
"            result = (ref > color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 7)\n"
"        {\n"
"            result = (ref >= color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else\n"
"        {\n"
"            result = 1.0f;\n"
"        }\n"
"    }\n"
"    return result;\n"
"}\n"
"\n"
"float _txpcfcvt_3DCoord_grad(\n"
"    sampler3D  sampler,\n"
"    vec4       coord,\n"
"    vec3       gradientX,\n"
"    vec3       gradientY,\n"
"    int        type,\n"
"    int        compareMode,\n"
"    int        compareFunc\n"
"    )\n"
"{\n"
"    vec4  color;\n"
"    float result;\n"
"    color = viv_textureGrad(sampler, coord, gradientX, gradientY);\n"
"    if (compareMode == 1)\n"
"    {\n"
"        result = color.x;\n"
"    }\n"
"    else\n"
"    {\n"
"        if (compareFunc == 1)\n"
"        {\n"
"            result = 0.0f;\n"
"        }\n"
"        else if (compareFunc == 2)\n"
"        {\n"
"            result = (coord.w != color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 3)\n"
"        {\n"
"            result = (coord.w < color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 4)\n"
"        {\n"
"            result = (coord.w <= color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 5)\n"
"        {\n"
"            result = (coord.w == color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 6)\n"
"        {\n"
"            result = (coord.w > color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 7)\n"
"        {\n"
"            result = (coord.w >= color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else\n"
"        {\n"
"            result = 1.0f;\n"
"        }\n"
"    }\n"
"    return result;\n"
"}\n"
"\n"
"vec4 _txpcfcvt_gather(\n"
"    sampler3D  sampler,\n"
"    vec4       coord,\n"
"    int        mod,\n"
"    float      lod_bias,\n"
"    int        type,\n"
"    int        compareMode,\n"
"    int        compareFunc\n"
"    )\n"
"{\n"
"    vec4 color;\n"
"    vec4 result;\n"
"    vec4 colorLo;\n"
"    vec4 colorHi;\n"
"    colorLo = viv_textureGather(sampler, coord, 0);\n"
"    colorHi = viv_textureGather(sampler, coord, 1);\n"
"    /* combine high and low */\n"
"    highp uvec4 lo = floatBitsToUint(colorLo),\n"
"          hi = floatBitsToUint(colorHi);\n"
"    lo |= (hi << 16u);\n"
"    color = uintBitsToFloat(lo);\n"
"    vec4 ref = vec4(lod_bias);\n"
"    if (compareMode == 1)\n"
"    {\n"
"        result = color;\n"
"    }\n"
"    else\n"
"    {\n"
"        if (compareFunc == 1)\n"
"        {\n"
"            result = vec4(0.0f);\n"
"        }\n"
"        else if (compareFunc == 2)\n"
"        {\n"
"            result = vec4(notEqual(ref, color));\n"
"        }\n"
"        else if (compareFunc == 3)\n"
"        {\n"
"            result = vec4(lessThan(ref, color));\n"
"        }\n"
"        else if (compareFunc == 4)\n"
"        {\n"
"            result = vec4(lessThanEqual(ref, color));\n"
"        }\n"
"        else if (compareFunc == 5)\n"
"        {\n"
"            result = vec4(equal(ref, color));\n"
"        }\n"
"        else if (compareFunc == 6)\n"
"        {\n"
"            result = vec4(greaterThan(ref, color));\n"
"        }\n"
"        else if (compareFunc == 7)\n"
"        {\n"
"            result = vec4(greaterThanEqual(ref, color));\n"
"        }\n"
"        else\n"
"        {\n"
"            result = vec4(1.0f);\n"
"        }\n"
"    }\n"
"    return result;\n"
"}\n"
"\n";

static gctSTRING gcLibTexFormatConvertHalti2_OutputCvtUnifiedFunc =
"uint _alphaToMask(float alphaValue)  \n"
"{  \n"
"    uint mask;  \n"
"    if (alphaValue > 0.75)  \n"
"        mask = 0x0fu;  \n"
"    else if (alphaValue > 0.5)  \n"
"        mask = 0x07u;  \n"
"    else if (alphaValue > 0.25)  \n"
"        mask = 0x03u;  \n"
"    else if (alphaValue > 0.0)  \n"
"        mask = 0x01u;  \n"
"    else  \n"
"        mask = 0x00u;  \n"
"  \n"
"    return mask;  \n"
"}  \n"
"\n"
"void _viv_sampleMask(in    float alphaValue, \n"
"                     in    int   sampleConverageEnabled, \n"
"                     in    vec2  sampleConverage_Invert, \n"
"                     in    uint  sampleMask, \n"
"                     inout uvec4 subsampleDepthReg)       \n"
"{\n"
"    uint mask; \n"
"    mask = _alphaToMask(alphaValue);  \n"
"\n"
"    /* sample converage */  \n"
"    if (sampleConverageEnabled != 0)  \n"
"    {  \n"
"        uint mask0;  \n"
"        mask0 = _alphaToMask(sampleConverage_Invert.x);  \n"
"        if (sampleConverage_Invert.y != 0.0)  \n"
"        {  \n"
"            mask0 = (~mask0) & 0x0fu;  \n"
"        }  \n"
"        mask &= mask0;  \n"
"    }  \n"
"\n"
"    mask &= sampleMask;  \n"
"    if ((mask & 0x01u) == 0u) \n"
"    {\n"
"        subsampleDepthReg.x |= 0x80000000u;;\n"
"    }\n"
"    if ((mask & 0x02u) == 0u) \n"
"    {\n"
"        subsampleDepthReg.y |= 0x80000000u;;\n"
"    }\n"
"    if ((mask & 0x04u) == 0u) \n"
"    {\n"
"        subsampleDepthReg.z |= 0x80000000u;;\n"
"    }\n"
"    if ((mask & 0x08u) == 0u) \n"
"    {\n"
"        subsampleDepthReg.w |= 0x80000000u;;\n"
"    }\n"
"    return ;  \n"
"}\n"
"\n"
"highp vec4 _outputcvt_R16I_to_ARGB4(highp int r16i)\n"
"{\n"
"    vec4 val;\n"
"    val.x  = float((r16i >> 8 ) & 0xf)/_4BITS_MAX;\n"
"    val.y  = float((r16i >> 4 ) & 0xf)/_4BITS_MAX;\n"
"    val.z  = float((r16i      ) & 0xf)/_4BITS_MAX;\n"
"    val.w  = float((r16i >> 12) & 0xf)/_4BITS_MAX;\n"
"    return val;\n"
"}\n"
"highp vec4 _outputcvt_R16UI_to_ARGB4(highp uint r16ui)\n"
"{\n"
"    vec4 val;\n"
"    val.x  = float((r16ui >> 8 ) & 0xfu)/_4BITS_MAX;\n"
"    val.y  = float((r16ui >> 4 ) & 0xfu)/_4BITS_MAX;\n"
"    val.z  = float((r16ui      ) & 0xfu)/_4BITS_MAX;\n"
"    val.w  = float((r16ui >> 12) & 0xfu)/_4BITS_MAX;\n"
"    return val;\n"
"}\n"
"\n";

static gctSTRING gcLibTexFormatConvertHalti2_OutputCvtFunc =
"highp vec4 _outputcvt_R8_1_X8R8G8B8(highp vec4 val)\n"
"{\n"
"    return vec4(val.x, 0.0, 0.0, 1.0);\n"
"}\n"
"highp vec4 _outputcvt_G8R8_1_X8R8G8B8(highp vec4 val)\n"
"{\n"
"    return vec4(val.x, val.y, 0.0, 1.0);\n"
"}\n"
"highp uvec4[2] _outputcvt_A32B32G32R32UI_2_G32R32UI(highp uvec4 uintval)\n"
"{\n"
"    uvec4 uret[2];\n"
"    uret[0] = uvec4(uintval.rg, 0u, 1u);\n"
"    uret[1] = uvec4(uintval.ba, 0u, 1u);\n"
"    return uret;\n"
"}\n"
"highp ivec4[2] _outputcvt_A32B32G32R32I_2_G32R32I(highp ivec4 intval)\n"
"{\n"
"    ivec4 iret[2];\n"
"    iret[0] = ivec4(intval.rg, 0, 1);\n"
"    iret[1] = ivec4(intval.ba, 0, 1);\n"
"    return iret;\n"
"}\n"
"mediump vec4[2] _outputcvt_A8B12G12R12_2_A8R8G8B8(highp vec4 outval)\n"
"{\n"
"    vec4 val[2];\n"
"    ivec3 _12bit_val;\n"
"    _12bit_val = ivec3(outval.xyz * _12BITS_MAX + 0.5);\n"
"    val[0].x  = float((_12bit_val.x >> 4) & 0xf0)/_8BITS_MAX; /* upper 4 bits (0xF0) */\n"
"    val[0].y  = float((_12bit_val.y >> 4) & 0xf0)/_8BITS_MAX; /* upper 4 bits (0xF0) */\n"
"    val[0].z  = float((_12bit_val.z >> 4) & 0xf0)/_8BITS_MAX; /* upper 4 bits (0xF0) */\n"
"    val[0].w  = outval.w;                                     /* copy alpha */\n"
"    val[1].x  = float(_12bit_val.x & 0xff)/_8BITS_MAX;        /* lower 8 bits (0xFF) */\n"
"    val[1].y  = float(_12bit_val.y & 0xff)/_8BITS_MAX;        /* lower 8 bits (0xFF) */\n"
"    val[1].z  = float(_12bit_val.z & 0xff)/_8BITS_MAX;        /* lower 8 bits (0xFF) */\n"
"    val[1].w  = outval.w;                                     /* copy alpha */\n"
"    return val;\n"
"}\n"
"highp vec4[2] _outputcvt_A16B16G16R16F_2_G16R16F(highp vec4 intval)\n"
"{\n"
"    vec4 fret[2];\n"
"    fret[0] = vec4(intval.rg, 0.0, 1.0);\n"
"    fret[1] = vec4(intval.ba, 0.0, 1.0);\n"
"    return fret;\n"
"}\n"
"highp vec4 _outputcvt_R8I_1_A4R4G4B4(highp ivec4 intval)\n"
"{\n"
"    vec4 fret = _outputcvt_R16I_to_ARGB4(intval.x & 0xff);\n"
"    fret.w = 1.0;\n"
"    return fret;\n"
"}\n"
"highp vec4 _outputcvt_R8UI_1_A4R4G4B4(highp uvec4 uintval)\n"
"{\n"
"    vec4 fret = _outputcvt_R16UI_to_ARGB4(uintval.x & 0xffu);\n"
"    fret.w = 1.0;\n"
"    return fret;\n"
"}\n"
"highp vec4 _outputcvt_A16B16G16R16I_1_G32R32F(highp ivec4 inval)\n"
"{\n"
"    highp int x = (inval.x & 0xffff) | ((inval.y & 0xffff) << 16);\n"
"    highp int y = (inval.z & 0xffff) | ((inval.w & 0xffff) << 16);\n"
"    return vec4(intBitsToFloat(x), intBitsToFloat(y), 0.0, 1.0);\n"
"}\n"
"\n"
"highp vec4 _outputcvt_A16B16G16R16UI_1_G32R32F(highp uvec4 inval)\n"
"{\n"
"    highp uint x = (inval.x & 0xffffu) | ((inval.y & 0xffffu) << 16);\n"
"    highp uint y = (inval.z & 0xffffu) | ((inval.w & 0xffffu) << 16);\n"
"    return vec4(uintBitsToFloat(x), uintBitsToFloat(y), 0.0, 1.0);\n"
"}\n";

static gctSTRING gcLibTexFormatConvertHalti2_MainFunc =
"void main(void)\n"
"{\n"
"    fragColor = vec4(0.0,0.0,0.0, 0.0);\n"
"}" ;

static gctSTRING gcLibTexFormatConvertHalti1_Header =
"#version 300 es\n"
"/* gcLibTexFormatConvertHalti1 */\n"
"#define TYPE_NONE    0\n"
"#define TYPE_PROJ    1\n"
"#define MOD_NONE     0\n"
"#define MOD_BIAS     1\n"
"#define MOD_LODBIAS  2\n"
"#define F16ToF32_BIAS_UI 939524096u\n"
"#define _4BITS_MAX 15.5\n"
"#define _8BITS_MAX 255.9\n"
"#define _8BITS_SIGNED_MAX 127\n"
"#define _16BITS_SIGNED_MAX 32767\n"
"#define MAX_UINT24_AS_FLOAT 16777215.0\n"
"precision highp float;\n"
"precision highp sampler2D;\n"
"precision highp sampler3D;\n"
"precision highp isampler2D;\n"
"precision highp isampler3D;\n"
"precision highp usampler2D;\n"
"precision highp usampler3D;\n"
"in vec3 texCoord3D;\n"
"uniform sampler3D origSampler3D;\n"
"uniform sampler3D extraSampler3D;\n"
"out vec4 fragColor;\n"
"\n";

static gctSTRING gcLibTexFormatConvertHalti1_SinglePipe_Header =
"#version 310 es\n"
"/* gcLibTexFormatConvertHalti1_SinglePipe */\n"
"#define TYPE_NONE      0\n"
"#define TYPE_PROJ      1\n"
"#define TYPE_GATHER    2\n"
"#define MOD_NONE       0\n"
"#define MOD_BIAS       1\n"
"#define MOD_LODBIAS    2\n"
"#define COMPONENT_X    0\n"
"#define COMPONENT_Y    1\n"
"#define COMPONENT_Z    2\n"
"#define COMPONENT_W    3\n"
"#define COMPONENT_ZERO 4\n"
"#define COMPONENT_ONE  5\n"
"#define F16ToF32_BIAS_UI 939524096u\n"
"#define _4BITS_MAX 15.0\n"
"#define _8BITS_MAX 255.0\n"
"#define _8BITS_SIGNED_MAX 127\n"
"#define _16BITS_SIGNED_MAX 32767\n"
"#define MAX_UINT24_AS_FLOAT 16777215.0\n"
"precision highp float;\n"
"precision highp sampler2D;\n"
"precision highp sampler3D;\n"
"precision highp isampler2D;\n"
"precision highp isampler3D;\n"
"precision highp usampler2D;\n"
"precision highp usampler3D;\n"
"in vec3 texCoord3D;\n"
"uniform sampler3D origSampler3D;\n"
"uniform sampler3D extraSampler3D;\n"
"out vec4 fragColor;\n"
"\n";


static gctSTRING gcLibTexFormatConvertHalti1_TexCvtUnifiedFunc =
"mediump float _txcvt_single_swizzle_float(in vec4 val, in int swizzle)\n"
"{\n"
"   switch (swizzle)\n"
"   {\n"
"       case 0:\n"
"           return val.x;\n"
"       case 1:\n"
"           return val.y;\n"
"       case 2:\n"
"           return val.z;\n"
"       case 3:\n"
"           return val.w;\n"
"       case 4:\n"
"           return 0.0;\n"
"       default:\n"
"           return 1.0;\n"
"   }\n"
"   return 0.0;\n"
"}\n"
"mediump vec4 _txcvt_swizzle_float(in vec4 val, in int swizzleX, in int swizzleY, in int swizzleZ, in int swizzleW)\n"
"{\n"
"   vec4 outputResult;\n"
"   outputResult.x = _txcvt_single_swizzle_float(val, swizzleX);\n"
"   outputResult.y = _txcvt_single_swizzle_float(val, swizzleY);\n"
"   outputResult.z = _txcvt_single_swizzle_float(val, swizzleZ);\n"
"   outputResult.w = _txcvt_single_swizzle_float(val, swizzleW);\n"
"   return outputResult;\n"
"}\n"
"\n"
"mediump int _txcvt_single_swizzle_int(in ivec4 val, in int swizzle)\n"
"{\n"
"   switch (swizzle)\n"
"   {\n"
"       case 0:\n"
"           return val.x;\n"
"       case 1:\n"
"           return val.y;\n"
"       case 2:\n"
"           return val.z;\n"
"       case 3:\n"
"           return val.w;\n"
"       case 4:\n"
"           return 0;\n"
"       default:\n"
"           return 1;\n"
"   }\n"
"   return 0;\n"
"}\n"
"\n"
"mediump ivec4 _txcvt_swizzle_int(in ivec4 val, in int swizzleX, in int swizzleY, in int swizzleZ, in int swizzleW)\n"
"{\n"
"   ivec4 outputResult;\n"
"   outputResult.x = _txcvt_single_swizzle_int(val, swizzleX);\n"
"   outputResult.y = _txcvt_single_swizzle_int(val, swizzleY);\n"
"   outputResult.z = _txcvt_single_swizzle_int(val, swizzleZ);\n"
"   outputResult.w = _txcvt_single_swizzle_int(val, swizzleW);\n"
"   return outputResult;\n"
"}\n"
"\n"
"mediump uint _txcvt_single_swizzle_uint(in uvec4 val, in int swizzle)\n"
"{\n"
"   switch (swizzle)\n"
"   {\n"
"       case 0:\n"
"           return val.x;\n"
"       case 1:\n"
"           return val.y;\n"
"       case 2:\n"
"           return val.z;\n"
"       case 3:\n"
"           return val.w;\n"
"       case 4:\n"
"           return 0u;\n"
"       default:\n"
"           return 1u;\n"
"   }\n"
"   return 0u;\n"
"}\n"
"\n"
"mediump uvec4 _txcvt_swizzle_uint(in uvec4 val, in int swizzleX, in int swizzleY, in int swizzleZ, in int swizzleW)\n"
"{\n"
"   uvec4 outputResult;\n"
"   outputResult.x = _txcvt_single_swizzle_uint(val, swizzleX);\n"
"   outputResult.y = _txcvt_single_swizzle_uint(val, swizzleY);\n"
"   outputResult.z = _txcvt_single_swizzle_uint(val, swizzleZ);\n"
"   outputResult.w = _txcvt_single_swizzle_uint(val, swizzleW);\n"
"   return outputResult;\n"
"}\n"
"\n"
"highp int _txcvt_i16_to_i32(in int val)\n"
"{\n"
"   highp int ret = val & 0xffff;\n"
"   if (ret > _16BITS_SIGNED_MAX)\n"
"   {\n"
"       ret = int(uint(ret) | 0xffff0000u);\n"
"   }\n"
"   return ret;\n"
"}\n"
"\n"
"highp float _txcvt_fp16Bits_to_fp32(uint uval)\n"
"{\n"
"   highp uint fp32Bits = ((uval & 0x8000u) << 16) /* sign bit */\n"
"                       | (((uval & 0x7C00u) << 13) + F16ToF32_BIAS_UI) /* exponent bits */\n"
"                       | ((uval & 0x3FFu) << 13);\n"
"   highp float fp32Val = uintBitsToFloat(fp32Bits);\n"
"   return fp32Val;\n"
"}\n"
"\n"
"highp float _txcvt_fp11Bits_to_fp32(uint uval)\n"
"{\n"
"   highp uint fp32Bits = 0u;    /* sign bit is always 0*/ \n"
"   fp32Bits = (((uval & 0x7C0u) << 17) + F16ToF32_BIAS_UI) /* exponent bits */\n"
"            |  ((uval & 0x3Fu ) << 17);\n"
"   highp float fp32Val = uintBitsToFloat(fp32Bits);\n"
"   return fp32Val;\n"
"}\n"
"\n"
"highp float _txcvt_fp10Bits_to_fp32(uint uval)\n"
"{\n"
"   highp uint fp32Bits = 0u;    /* sign bit is always 0*/ \n"
"   fp32Bits = (((uval & 0x3E0u) << 18) + F16ToF32_BIAS_UI) /* exponent bits */\n"
"            |  ((uval & 0x1Fu ) << 18);\n"
"   highp float fp32Val = uintBitsToFloat(fp32Bits);\n"
"   return fp32Val;\n"
"}\n"
"\n"
"mediump vec2 _txcvt_RGBA8_to_F16_vec2(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   mediump vec2 fret;\n"
"   highp uvec4 utmp = min(uvec4(val * _8BITS_MAX + 0.5), 255u);\n"
"   fret.x = _txcvt_fp16Bits_to_fp32((utmp.y << 8) | (utmp.z));\n"
"   fret.y = _txcvt_fp16Bits_to_fp32((utmp.w << 8) | (utmp.x));\n"
"   return fret;\n"
"}\n"
"\n"
"mediump ivec2 _txcvt_RGBA4_to_I8_vec2(in vec4 val)\n"
"{\n"
"   mediump ivec2 iret;"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp ivec4 itmp = min(ivec4(val * _4BITS_MAX + 0.5), 15);\n"
"   iret.x = ((itmp.y << 4) | (itmp.z)) & 0x000000ff;\n"
"   iret.y = ((itmp.w << 4) | (itmp.x)) & 0x000000ff;\n"
"   if (iret.x > _8BITS_SIGNED_MAX)\n"
"   {\n"
"       iret.x = int(uint(iret.x) | 0xffffff00u);\n"
"   }\n"
"   if (iret.y > _8BITS_SIGNED_MAX)\n"
"   {\n"
"       iret.y = int(uint(iret.y) | 0xffffff00u);\n"
"   }\n"
"   return iret;\n"
"}\n"
"\n"
"mediump uvec2 _txcvt_RGBA4_to_UI8_vec2(in vec4 val)\n"
"{\n"
"   mediump uvec4 utmp = min(uvec4(val * _4BITS_MAX + 0.5), 15u);\n"
"   return uvec2((utmp.y << 4) | (utmp.z), (utmp.w << 4) | (utmp.x));\n"
"}\n"
"\n"
"mediump int _txcvt_RGBA4_to_I8(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp ivec4 itmp = min(ivec4(val * _4BITS_MAX + 0.5), 15);\n"
"   mediump int iret = ((itmp.y << 4) | (itmp.z)) & 0x000000ff;\n"
"   if (iret > _8BITS_SIGNED_MAX)\n"
"   {\n"
"       iret = int(uint(iret) | 0xffffff00u);\n"
"   }\n"
"   return iret;\n"
"}\n"
"\n"
"mediump uint _txcvt_RGBA4_to_UI8(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp uvec4 utmp = min(uvec4(val * _4BITS_MAX + 0.5), 15u);\n"
"   return ((utmp.y << 4) | (utmp.z)) & 0x000000ffu;\n"
"}\n"
"\n"
"mediump int _txcvt_RGBA4_to_I16(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp ivec4 itmp = min(ivec4(val * _4BITS_MAX + 0.5), 15);\n"
"   return _txcvt_i16_to_i32((itmp.w << 12) | (itmp.x << 8) | (itmp.y << 4) | (itmp.z));\n"
"}\n"
"\n"
"mediump uint _txcvt_RGBA4_to_UI16(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp uvec4 utmp = min(uvec4(val * _4BITS_MAX + 0.5), 15u);\n"
"   mediump uint uret = (utmp.w << 12) | (utmp.x << 8) | (utmp.y << 4) | (utmp.z);\n"
"   return uret & 0x0000ffffu;\n"
"}\n"
"\n"
"highp float _txcvt_RGBA8_to_F32(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp uvec4 utmp = min(uvec4(val * _8BITS_MAX + 0.5), 255u);\n"
"   highp uint uval = uint((utmp.w << 24) | (utmp.x << 16) | (utmp.y << 8) | (utmp.z));\n"
"   return uintBitsToFloat(uval);\n"
"}\n"
"\n"
"highp ivec2 _txcvt_RGBA8_to_I16_vec2(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp ivec2 iret;"
"   highp ivec4 itmp = min(ivec4(val * _8BITS_MAX + 0.5), 255);\n"
"   iret.x = _txcvt_i16_to_i32((itmp.y << 8) | (itmp.z));\n"
"   iret.y = _txcvt_i16_to_i32((itmp.w << 8) | (itmp.x));\n"
"   return iret;\n"
"}\n"
"\n"
"highp uvec2 _txcvt_RGBA8_to_UI16_vec2(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp uvec4 utmp = min(uvec4(val * _8BITS_MAX + 0.5), 255u);\n"
"   return uvec2((utmp.y << 8) | (utmp.z), (utmp.w << 8) | (utmp.x));\n"
"}\n"
"\n"
"highp int _cvt_8I_32I(highp int r32i)\n"
"{\n"
"    highp int iret = r32i & 0x000000ff;\n"
"    if (iret > _8BITS_SIGNED_MAX)\n"
"    {\n"
"        iret = int(uint(iret) | 0xffffff00u);\n"
"    }\n"
"    return iret;\n"
"}\n"
"\n"
"highp int _txcvt_RGBA8_to_I32(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp ivec4 itmp = min(ivec4(val * _8BITS_MAX + 0.5), 255);\n"
"   return (itmp.w << 24) | (itmp.x << 16) | (itmp.y << 8) | (itmp.z);\n"
"}\n"
"\n"
"highp uint _txcvt_RGBA8_to_UI32(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp uvec4 utmp = min(uvec4(val * _8BITS_MAX + 0.5), 255u);\n"
"   return (utmp.w << 24) | (utmp.x << 16) | (utmp.y << 8) | (utmp.z);\n"
"}\n"
"\n"
"highp uint _txcvt_A8R8G8_to_UI32(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp uvec4 utmp = min(uvec4(val * _8BITS_MAX + 0.5), 255u);\n"
"   return (utmp.w << 16) | (utmp.x << 8) | (utmp.y);\n"
"}\n"
"\n"
"mediump float _txcvt_RGBA8_to_F24(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp uvec4 utmp = min(uvec4(val * _8BITS_MAX + 0.5), 255u);\n"
"   return float((utmp.w << 16) | (utmp.x << 8) | (utmp.y)) / MAX_UINT24_AS_FLOAT;\n"
"}\n"
"\n"
"highp uvec4 _txcvt_RGBA8_to_R10G10B10A2UI(in vec4 val)\n"
"{\n"
"   highp uint utmp = _txcvt_RGBA8_to_UI32(val);\n"
"   highp uvec4 uret;\n"
"   uret.x = (utmp      ) & 0x000003ffu;\n"
"   uret.y = (utmp >> 10) & 0x000003ffu;\n"
"   uret.z = (utmp >> 20) & 0x000003ffu;\n"
"   uret.w = (utmp >> 30) & 0x00000003u;\n"
"   return uret;\n"
"}\n"
"\n"
"highp vec4 _txcvt_RGBA8_to_B10G11R11F(in vec4 val)\n"
"{\n"
"   highp vec4 fret;\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp uvec4 utmp = min(uvec4(val * _8BITS_MAX + 0.5), 255u);\n"
"   fret.x = _txcvt_fp11Bits_to_fp32((utmp.z     )          | ((utmp.y & 0x7u ) << 8));\n"
"   fret.y = _txcvt_fp11Bits_to_fp32(((utmp.y >> 3) & 0x1fu) | ((utmp.x & 0x3fu) << 5));\n"
"   fret.z = _txcvt_fp10Bits_to_fp32(((utmp.x >> 6) & 0x3u ) | (utmp.w          << 2));\n"
"   fret.w = 1.0;\n"
"   return fret;\n"
"}\n"
"\n";

static gctSTRING gcLibTexFormatConvertHalti1_TexCvtFunc0 =
"mediump vec4 _txcvt_B16G16R16F_2_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1\n"
"    )\n"
"{\n"
"    mediump vec4 fret;\n"
"    mediump vec4 ftmpRG;\n"
"    mediump vec4 ftmpBA;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpRG = textureProj(origSampler, coord);\n"
"            ftmpBA = textureProj(extraSampler1, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpRG = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpBA = textureProj(extraSampler1, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpRG = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpBA = textureProjLod(extraSampler1, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpRG = texture(origSampler, coord.xyz);\n"
"            ftmpBA = texture(extraSampler1, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpRG = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpBA = texture(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpRG = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpBA = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    fret.rg = _txcvt_RGBA8_to_F16_vec2(ftmpRG);\n"
"    fret.ba = _txcvt_RGBA8_to_F16_vec2(ftmpBA);\n"
"    fret.a = 1.0;\n"
"    return fret;\n"
"}\n"
"\n"
"mediump ivec4 _txcvt_G8R8I_1_A4R4G4B4(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    mediump vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return ivec4(_txcvt_RGBA4_to_I8_vec2(ftmp), 0, 1);\n"
"}\n"
"\n"
"mediump uvec4 _txcvt_G8R8UI_1_A4R4G4B4(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    mediump vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return uvec4(_txcvt_RGBA4_to_UI8_vec2(ftmp), 0u, 1u);\n"
"}\n"
"\n"
"mediump ivec4 _txcvt_R16I_1_A4R4G4B4(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    mediump vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return ivec4(_txcvt_RGBA4_to_I16(ftmp), 0, 0, 1);\n"
"}\n"
"\n"
"mediump uvec4 _txcvt_R16UI_1_A4R4G4B4(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    mediump vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return uvec4(_txcvt_RGBA4_to_UI16(ftmp), 0u, 0u, 1u);\n"
"}\n"
"\n"
"mediump ivec4 _txcvt_R8I_1_A4R4G4B4(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    mediump vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return ivec4(_txcvt_RGBA4_to_I8(ftmp), 0, 0, 1);\n"
"}\n"
"\n"
"mediump uvec4 _txcvt_R8UI_1_A4R4G4B4(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    mediump vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return uvec4(_txcvt_RGBA4_to_UI8(ftmp), 0u, 0u, 1u);\n"
"}\n"
"\n"
"highp uvec4 _txcvt_A8B8G8R8UI_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return min(uvec4(ftmp * _8BITS_MAX + 0.5), 255u);\n"
"}\n"
"\n"
"highp ivec4 _txcvt_A8B8G8R8I_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    highp ivec4 iret;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"   highp ivec4 itmp = min(ivec4(ftmp * _8BITS_MAX + 0.5), 255);\n"
"   iret.x = _cvt_8I_32I(itmp.x);\n"
"   iret.y = _cvt_8I_32I(itmp.y);\n"
"   iret.z = _cvt_8I_32I(itmp.z);\n"
"   iret.w = _cvt_8I_32I(itmp.w);\n"
"   return iret;\n"
"}\n"
"\n"
"highp uvec4 _txcvt_B8G8R8UI_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp uvec4 color;\n"
"    color = _txcvt_A8B8G8R8UI_1_A8R8G8B8(origSampler, coord, mod, lod_bias, type);\n"
"    color.a = 1u;\n"
"    return color;\n"
"}\n"
"\n"
"highp ivec4 _txcvt_B8G8R8I_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp ivec4 color;\n"
"    color = _txcvt_A8B8G8R8I_1_A8R8G8B8(origSampler, coord, mod, lod_bias, type);\n"
"    color.a = 1;\n"
"    return color;\n"
"}\n"
"\n"
"highp ivec4 _txcvt_R32I_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return ivec4(_txcvt_RGBA8_to_I32(ftmp), 0, 0, 1);\n"
"}\n"
"\n"
"highp uvec4 _txcvt_R32UI_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return uvec4(_txcvt_RGBA8_to_UI32(ftmp), 0u, 0u, 1u);\n"
"}\n"
"\n"
"vec4 _txcvt_A32B32G32R32F_2_G32R32F(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler\n"
"    )\n"
"{\n"
"    vec4 color;\n"
"    if (type == 1)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord).xyxy;\n"
"            color.xy = textureProj(origSampler, coord).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord, lod_bias).xyxy;\n"
"            color.xy = textureProj(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = textureProjLod(extraSampler, coord, lod_bias).xyxy;\n"
"            color.xy = textureProjLod(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = texture(extraSampler, coord.xyz).xyxy;\n"
"            color.xy = texture(origSampler, coord.xyz).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = texture(extraSampler, coord.xyz, lod_bias).xyxy;\n"
"            color.xy = texture(origSampler, coord.xyz, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = textureLod(extraSampler, coord.xyz, lod_bias).xyxy;\n"
"            color.xy = textureLod(origSampler, coord.xyz, lod_bias).xy;\n"
"        }\n"
"    }\n"
"    return color;\n"
"}\n"
"\n"
"vec4 _txcvt_X32B32G32R32F_2_G32R32F(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler\n"
"    )\n"
"{\n"
"    vec4 color;\n"
"    if (type == 1)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord).xxxx;\n"
"            color.xy = textureProj(origSampler, coord).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord, lod_bias).xxxx;\n"
"            color.xy = textureProj(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = textureProjLod(extraSampler, coord, lod_bias).xxxx;\n"
"            color.xy = textureProjLod(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = texture(extraSampler, coord.xyz).xxxx;\n"
"            color.xy = texture(origSampler, coord.xyz).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = texture(extraSampler, coord.xyz, lod_bias).xxxx;\n"
"            color.xy = texture(origSampler, coord.xyz, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = textureLod(extraSampler, coord.xyz, lod_bias).xxxx;\n"
"            color.xy = textureLod(origSampler, coord.xyz, lod_bias).xy;\n"
"        }\n"
"    }\n"
"    color.w  = 1.0f;\n"
"    return color;\n"
"}\n"
"\n"
"ivec4 _txcvt_A32B32G32R32I_2_G32R32I(\n"
"    isampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    isampler3D extraSampler\n"
"    )\n"
"{\n"
"    ivec4 color;\n"
"    if (type == 1)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord).xyxy;\n"
"            color.xy = textureProj(origSampler, coord).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord, lod_bias).xyxy;\n"
"            color.xy = textureProj(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = textureProjLod(extraSampler, coord, lod_bias).xyxy;\n"
"            color.xy = textureProjLod(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = texture(extraSampler, coord.xyz).xyxy;\n"
"            color.xy = texture(origSampler, coord.xyz).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = texture(extraSampler, coord.xyz, lod_bias).xyxy;\n"
"            color.xy = texture(origSampler, coord.xyz, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = textureLod(extraSampler, coord.xyz, lod_bias).xyxy;\n"
"            color.xy = textureLod(origSampler, coord.xyz, lod_bias).xy;\n"
"        }\n"
"    }\n"
"    return color;\n"
"}\n"
"\n"
"ivec4 _txcvt_X32B32G32R32I_2_G32R32I(\n"
"    isampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    isampler3D extraSampler\n"
"    )\n"
"{\n"
"    ivec4 color;\n"
"    if (type == 1)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord).xxxx;\n"
"            color.xy = textureProj(origSampler, coord).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord, lod_bias).xxxx;\n"
"            color.xy = textureProj(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = textureProjLod(extraSampler, coord, lod_bias).xxxx;\n"
"            color.xy = textureProjLod(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = texture(extraSampler, coord.xyz).xxxx;\n"
"            color.xy = texture(origSampler, coord.xyz).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = texture(extraSampler, coord.xyz, lod_bias).xxxx;\n"
"            color.xy = texture(origSampler, coord.xyz, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = textureLod(extraSampler, coord.xyz, lod_bias).xxxx;\n"
"            color.xy = textureLod(origSampler, coord.xyz, lod_bias).xy;\n"
"        }\n"
"    }\n"
"    color.w  = 1;\n"
"    return color;\n"
"}\n"
"\n"
"uvec4 _txcvt_A32B32G32R32UI_2_G32R32UI(\n"
"    usampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    usampler3D extraSampler\n"
"    )\n"
"{\n"
"    uvec4 color;\n"
"    if (type == 1)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord).xyxy;\n"
"            color.xy = textureProj(origSampler, coord).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord, lod_bias).xyxy;\n"
"            color.xy = textureProj(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = textureProjLod(extraSampler, coord, lod_bias).xyxy;\n"
"            color.xy = textureProjLod(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = texture(extraSampler, coord.xyz).xyxy;\n"
"            color.xy = texture(origSampler, coord.xyz).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = texture(extraSampler, coord.xyz, lod_bias).xyxy;\n"
"            color.xy = texture(origSampler, coord.xyz, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = textureLod(extraSampler, coord.xyz, lod_bias).xyxy;\n"
"            color.xy = textureLod(origSampler, coord.xyz, lod_bias).xy;\n"
"        }\n"
"    }\n"
"    return color;\n"
"}\n"
"\n"
"uvec4 _txcvt_X32B32G32R32UI_2_G32R32UI(\n"
"    usampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    usampler3D extraSampler\n"
"    )\n"
"{\n"
"    uvec4 color;\n"
"    if (type == 1)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord).xxxx;\n"
"            color.xy = textureProj(origSampler, coord).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = textureProj(extraSampler, coord, lod_bias).xxxx;\n"
"            color.xy = textureProj(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = textureProjLod(extraSampler, coord, lod_bias).xxxx;\n"
"            color.xy = textureProjLod(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color    = texture(extraSampler, coord.xyz).xxxx;\n"
"            color.xy = texture(origSampler, coord.xyz).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color    = texture(extraSampler, coord.xyz, lod_bias).xxxx;\n"
"            color.xy = texture(origSampler, coord.xyz, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            color    = textureLod(extraSampler, coord.xyz, lod_bias).xxxx;\n"
"            color.xy = textureLod(origSampler, coord.xyz, lod_bias).xy;\n"
"        }\n"
"    }\n"
"    color.w  = 1u;\n"
"    return color;\n"
"}\n"
"\n"
"highp ivec4 _txcvt_A16B16G16R16I_2_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1\n"
"    )\n"
"{\n"
"    highp vec4 ftmpRG;\n"
"    highp vec4 ftmpBA;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpRG = textureProj(origSampler, coord);\n"
"            ftmpBA = textureProj(extraSampler1, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpRG = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpBA = textureProj(extraSampler1, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpRG = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpBA = textureProjLod(extraSampler1, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpRG = texture(origSampler, coord.xyz);\n"
"            ftmpBA = texture(extraSampler1, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpRG = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpBA = texture(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpRG = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpBA = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return ivec4(_txcvt_RGBA8_to_I16_vec2(ftmpRG), _txcvt_RGBA8_to_I16_vec2(ftmpBA));\n"
"}\n"
"\n"
"highp ivec4 _txcvt_B16G16R16I_2_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1\n"
"    )\n"
"{\n"
"    highp ivec4 color;\n"
"    color = _txcvt_A16B16G16R16I_2_A8R8G8B8(origSampler, coord, mod, lod_bias, type, extraSampler1);\n"
"    color.a = 1;\n"
"    return color;\n"
"}\n"
"\n"
"highp ivec4 _txcvt_G16R16I_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return ivec4(_txcvt_RGBA8_to_I16_vec2(ftmp), 0, 1);\n"
"}\n"
"\n"
"highp uvec4 _txcvt_A16B16G16R16UI_2_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1\n"
"    )\n"
"{\n"
"    highp vec4 ftmpRG;\n"
"    highp vec4 ftmpBA;\n"
"    highp uvec4 color;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpRG = textureProj(origSampler, coord);\n"
"            ftmpBA = textureProj(extraSampler1, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpRG = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpBA = textureProj(extraSampler1, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpRG = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpBA = textureProjLod(extraSampler1, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpRG = texture(origSampler, coord.xyz);\n"
"            ftmpBA = texture(extraSampler1, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpRG = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpBA = texture(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpRG = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpBA = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return uvec4(_txcvt_RGBA8_to_UI16_vec2(ftmpRG), _txcvt_RGBA8_to_UI16_vec2(ftmpBA));\n"
"}\n"
"\n"
"highp uvec4 _txcvt_B16G16R16UI_2_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1\n"
"    )\n"
"{\n"
"    highp uvec4 color;\n"
"    color = _txcvt_A16B16G16R16UI_2_A8R8G8B8(origSampler, coord, mod, lod_bias, type, extraSampler1);\n"
"    color.a = 1u;\n"
"    return color;\n"
"}\n"
"\n"
"highp uvec4 _txcvt_G16R16UI_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return uvec4(_txcvt_RGBA8_to_UI16_vec2(ftmp), 0u, 1u);\n"
"}\n"
"\n"
"highp vec4 _txcvt_A32B32G32R32F_4_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1,\n"
"    sampler3D extraSampler2,\n"
"    sampler3D extraSampler3\n"
"    )\n"
"{\n"
"    highp vec4 ftmpR;\n"
"    highp vec4 ftmpG;\n"
"    highp vec4 ftmpB;\n"
"    highp vec4 ftmpA;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord);\n"
"            ftmpG = textureProj(extraSampler1, coord);\n"
"            ftmpB = textureProj(extraSampler2, coord);\n"
"            ftmpA = textureProj(extraSampler3, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProj(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProj(extraSampler2, coord, lod_bias);\n"
"            ftmpA = textureProj(extraSampler3, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProjLod(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProjLod(extraSampler2, coord, lod_bias);\n"
"            ftmpA = textureProjLod(extraSampler3, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz);\n"
"            ftmpG = texture(extraSampler1, coord.xyz);\n"
"            ftmpB = texture(extraSampler2, coord.xyz);\n"
"            ftmpA = texture(extraSampler3, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = texture(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = texture(extraSampler2, coord.xyz, lod_bias);\n"
"            ftmpA = texture(extraSampler3, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = textureLod(extraSampler2, coord.xyz, lod_bias);\n"
"            ftmpA = textureLod(extraSampler3, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return vec4(_txcvt_RGBA8_to_F32(ftmpR), _txcvt_RGBA8_to_F32(ftmpG),\n"
"                _txcvt_RGBA8_to_F32(ftmpB), _txcvt_RGBA8_to_F32(ftmpA));\n"
"}\n"
"\n"
"highp vec4 _txcvt_G32R32F_2_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1\n"
"    )\n"
"{\n"
"    highp vec4 ftmpR;\n"
"    highp vec4 ftmpG;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord);\n"
"            ftmpG = textureProj(extraSampler1, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProj(extraSampler1, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProjLod(extraSampler1, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz);\n"
"            ftmpG = texture(extraSampler1, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = texture(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return vec4(_txcvt_RGBA8_to_F32(ftmpR), _txcvt_RGBA8_to_F32(ftmpG), 0.0, 1.0);\n"
"}\n"
"\n"
"highp vec4 _txcvt_R32F_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmpR;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return vec4(_txcvt_RGBA8_to_F32(ftmpR), 0.0, 0.0, 1.0);\n"
"}\n"
"\n"
"highp ivec4 _txcvt_A32B32G32R32I_4_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1,\n"
"    sampler3D extraSampler2,\n"
"    sampler3D extraSampler3\n"
"    )\n"
"{\n"
"    highp vec4 ftmpR;\n"
"    highp vec4 ftmpG;\n"
"    highp vec4 ftmpB;\n"
"    highp vec4 ftmpA;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord);\n"
"            ftmpG = textureProj(extraSampler1, coord);\n"
"            ftmpB = textureProj(extraSampler2, coord);\n"
"            ftmpA = textureProj(extraSampler3, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProj(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProj(extraSampler2, coord, lod_bias);\n"
"            ftmpA = textureProj(extraSampler3, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProjLod(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProjLod(extraSampler2, coord, lod_bias);\n"
"            ftmpA = textureProjLod(extraSampler3, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz);\n"
"            ftmpG = texture(extraSampler1, coord.xyz);\n"
"            ftmpB = texture(extraSampler2, coord.xyz);\n"
"            ftmpA = texture(extraSampler3, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = texture(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = texture(extraSampler2, coord.xyz, lod_bias);\n"
"            ftmpA = texture(extraSampler3, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = textureLod(extraSampler2, coord.xyz, lod_bias);\n"
"            ftmpA = textureLod(extraSampler3, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return ivec4(_txcvt_RGBA8_to_I32(ftmpR), _txcvt_RGBA8_to_I32(ftmpG),\n"
"                 _txcvt_RGBA8_to_I32(ftmpB), _txcvt_RGBA8_to_I32(ftmpA));\n"
"}\n"
"\n"
"highp ivec4 _txcvt_B32G32R32I_3_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1,\n"
"    sampler3D extraSampler2\n"
"    )\n"
"{\n"
"    highp vec4 ftmpR;\n"
"    highp vec4 ftmpG;\n"
"    highp vec4 ftmpB;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord);\n"
"            ftmpG = textureProj(extraSampler1, coord);\n"
"            ftmpB = textureProj(extraSampler2, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProj(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProj(extraSampler2, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProjLod(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProjLod(extraSampler2, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz);\n"
"            ftmpG = texture(extraSampler1, coord.xyz);\n"
"            ftmpB = texture(extraSampler2, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = texture(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = texture(extraSampler2, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = textureLod(extraSampler2, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return ivec4(_txcvt_RGBA8_to_I32(ftmpR), _txcvt_RGBA8_to_I32(ftmpG),\n"
"                 _txcvt_RGBA8_to_I32(ftmpB), 1);\n"
"}\n"
"\n"
"highp ivec4 _txcvt_G32R32I_2_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1\n"
"    )\n"
"{\n"
"    highp vec4 ftmpR;\n"
"    highp vec4 ftmpG;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord);\n"
"            ftmpG = textureProj(extraSampler1, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProj(extraSampler1, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProjLod(extraSampler1, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz);\n"
"            ftmpG = texture(extraSampler1, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = texture(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return ivec4(_txcvt_RGBA8_to_I32(ftmpR), _txcvt_RGBA8_to_I32(ftmpG), 0, 1);\n"
"}\n"
"\n"
"highp uvec4 _txcvt_A32B32G32R32UI_4_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1,\n"
"    sampler3D extraSampler2,\n"
"    sampler3D extraSampler3\n"
"    )\n"
"{\n"
"    highp vec4 ftmpR;\n"
"    highp vec4 ftmpG;\n"
"    highp vec4 ftmpB;\n"
"    highp vec4 ftmpA;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord);\n"
"            ftmpG = textureProj(extraSampler1, coord);\n"
"            ftmpB = textureProj(extraSampler2, coord);\n"
"            ftmpA = textureProj(extraSampler3, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProj(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProj(extraSampler2, coord, lod_bias);\n"
"            ftmpA = textureProj(extraSampler3, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProjLod(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProjLod(extraSampler2, coord, lod_bias);\n"
"            ftmpA = textureProjLod(extraSampler3, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz);\n"
"            ftmpG = texture(extraSampler1, coord.xyz);\n"
"            ftmpB = texture(extraSampler2, coord.xyz);\n"
"            ftmpA = texture(extraSampler3, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = texture(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = texture(extraSampler2, coord.xyz, lod_bias);\n"
"            ftmpA = texture(extraSampler3, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = textureLod(extraSampler2, coord.xyz, lod_bias);\n"
"            ftmpA = textureLod(extraSampler3, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return uvec4(_txcvt_RGBA8_to_UI32(ftmpR), _txcvt_RGBA8_to_UI32(ftmpG),\n"
"                 _txcvt_RGBA8_to_UI32(ftmpB), _txcvt_RGBA8_to_UI32(ftmpA));\n"
"}\n"
"\n"
"highp uvec4 _txcvt_B32G32R32UI_3_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1,\n"
"    sampler3D extraSampler2\n"
"    )\n"
"{\n"
"    highp vec4 ftmpR;\n"
"    highp vec4 ftmpG;\n"
"    highp vec4 ftmpB;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord);\n"
"            ftmpG = textureProj(extraSampler1, coord);\n"
"            ftmpB = textureProj(extraSampler2, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProj(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProj(extraSampler2, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProjLod(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProjLod(extraSampler2, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz);\n"
"            ftmpG = texture(extraSampler1, coord.xyz);\n"
"            ftmpB = texture(extraSampler2, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = texture(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = texture(extraSampler2, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = textureLod(extraSampler2, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return uvec4(_txcvt_RGBA8_to_UI32(ftmpR), _txcvt_RGBA8_to_UI32(ftmpG),\n"
"                 _txcvt_RGBA8_to_UI32(ftmpB), 1u);\n"
"}\n"
"\n"
"highp uvec4 _txcvt_G32R32UI_2_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1\n"
"    )\n"
"{\n"
"    highp vec4 ftmpR;\n"
"    highp vec4 ftmpG;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord);\n"
"            ftmpG = textureProj(extraSampler1, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProj(extraSampler1, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProjLod(extraSampler1, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz);\n"
"            ftmpG = texture(extraSampler1, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = texture(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return uvec4(_txcvt_RGBA8_to_UI32(ftmpR), _txcvt_RGBA8_to_UI32(ftmpG), 0u, 1u);\n"
"}\n"
"\n"
"highp vec4 _txcvt_X32B32G32R32F_4_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1,\n"
"    sampler3D extraSampler2,\n"
"    sampler3D extraSampler3\n"
"    )\n"
"{\n"
"    highp vec4 ftmpR;\n"
"    highp vec4 ftmpG;\n"
"    highp vec4 ftmpB;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord);\n"
"            ftmpG = textureProj(extraSampler1, coord);\n"
"            ftmpB = textureProj(extraSampler2, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProj(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProj(extraSampler2, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProjLod(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProjLod(extraSampler2, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz);\n"
"            ftmpG = texture(extraSampler1, coord.xyz);\n"
"            ftmpB = texture(extraSampler2, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = texture(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = texture(extraSampler2, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = textureLod(extraSampler2, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return vec4(_txcvt_RGBA8_to_F32(ftmpR), _txcvt_RGBA8_to_F32(ftmpG),\n"
"                _txcvt_RGBA8_to_F32(ftmpB), 1.0);\n"
"}\n"
"\n"
"mediump vec4 _txcvt_S8D32F_2_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1\n"
"    )\n"
"{\n"
"    mediump vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return vec4(_txcvt_RGBA8_to_F32(ftmp), 0.0, 0.0, 1.0);\n"
"}\n"
"\n"
"mediump vec4 _txcvt_D24S8_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    mediump vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return vec4(_txcvt_RGBA8_to_F24(ftmp), 0.0, 0.0, 1.0);\n"
"}\n"
"\n"
"highp uvec4 _txcvt_A2B10G10R10UI_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return _txcvt_RGBA8_to_R10G10B10A2UI(ftmp);\n"
"}\n"
"\n";

static gctSTRING gcLibTexFormatConvertHalti1_TexCvtFunc1 =
"highp vec4 _txcvt_R8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp  = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp  = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp  = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp  = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp  = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp  = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return vec4(ftmp.x, 0.0, 0.0, 1.0);\n"
"}\n"
"\n"
"highp vec4 _txcvt_G8R8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp  = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp  = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp  = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp  = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp  = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp  = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return vec4(ftmp.x, ftmp.y, 0.0, 1.0);\n"
"}\n"
"\n"
"highp vec4 _txcvt_B10G11R11F_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return _txcvt_RGBA8_to_B10G11R11F(ftmp);\n"
"}\n"
"\n"
"highp ivec4 _txcvt_G32R32I_1_G32R32F(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return ivec4(floatBitsToInt(ftmp.x), floatBitsToInt(ftmp.y), 0, 1);\n"
"}\n"
"\n"
"highp uvec4 _txcvt_G32R32UI_1_G32R32F(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return uvec4(floatBitsToUint(ftmp.x), floatBitsToUint(ftmp.y), 0u, 1u);\n"
"}\n"
"\n"
"highp ivec4 _txcvt_A16B16G16R16I_1_G32R32F(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp ivec4 iret;\n"
"    highp ivec2 itmp;\n"
"    highp vec4  ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    itmp.x = floatBitsToInt(ftmp.x);\n"
"    itmp.y = floatBitsToInt(ftmp.y);\n"
"    iret.x = _txcvt_i16_to_i32(itmp.x      );\n"
"    iret.y = _txcvt_i16_to_i32(itmp.x >> 16);\n"
"    iret.z = _txcvt_i16_to_i32(itmp.y      );\n"
"    iret.w = _txcvt_i16_to_i32(itmp.y >> 16);\n"
"    return iret;\n"
"}\n"
"\n"
"highp ivec4 _txcvt_X16B16G16R16I_1_G32R32F(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp ivec4 color = _txcvt_A16B16G16R16I_1_G32R32F(origSampler, coord, mod, lod_bias, type);\n"
"    color.w = 1;"
"    return color;\n"
"}\n"
"\n"
"highp ivec4 _txcvt_B16G16R16I_1_G32R32F(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp ivec4 color = _txcvt_A16B16G16R16I_1_G32R32F(origSampler, coord, mod, lod_bias, type);\n"
"    color.w = 1;"
"    return color;\n"
"}\n"
"\n"
"highp uvec4 _txcvt_A16B16G16R16UI_1_G32R32F(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp uvec4 uret;\n"
"    highp uvec2 utmp;\n"
"    highp vec4  ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    utmp.x = floatBitsToUint(ftmp.x);\n"
"    utmp.y = floatBitsToUint(ftmp.y);\n"
"    uret.x = (utmp.x      ) & 0xffffu;\n"
"    uret.y = (utmp.x >> 16) & 0xffffu;\n"
"    uret.z = (utmp.y      ) & 0xffffu;\n"
"    uret.w = (utmp.y >> 16) & 0xffffu;\n"
"    return uret;\n"
"}\n"
"\n"
"highp uvec4 _txcvt_X16B16G16R16UI_1_G32R32F(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp uvec4 color = _txcvt_A16B16G16R16UI_1_G32R32F(origSampler, coord, mod, lod_bias, type);\n"
"    color.w = 1u;"
"    return color;\n"
"}\n"
"\n"
"highp uvec4 _txcvt_B16G16R16UI_1_G32R32F(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp uvec4 color = _txcvt_A16B16G16R16UI_1_G32R32F(origSampler, coord, mod, lod_bias, type);\n"
"    color.w = 1u;"
"    return color;\n"
"}\n"
"\n"
"highp ivec4 _txcvt_A32B32G32R32I_2_G32R32F(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == 1)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp    = textureProj(extraSampler, coord).xyxy;\n"
"            ftmp.xy = textureProj(origSampler, coord).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp    = textureProj(extraSampler, coord, lod_bias).xyxy;\n"
"            ftmp.xy = textureProj(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            ftmp    = textureProjLod(extraSampler, coord, lod_bias).xyxy;\n"
"            ftmp.xy = textureProjLod(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp    = texture(extraSampler, coord.xyz).xyxy;\n"
"            ftmp.xy = texture(origSampler, coord.xyz).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp    = texture(extraSampler, coord.xyz, lod_bias).xyxy;\n"
"            ftmp.xy = texture(origSampler, coord.xyz, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            ftmp    = textureLod(extraSampler, coord.xyz, lod_bias).xyxy;\n"
"            ftmp.xy = textureLod(origSampler, coord.xyz, lod_bias).xy;\n"
"        }\n"
"    }\n"
"    return floatBitsToInt(ftmp);\n"
"}\n"
"\n"
"highp uvec4 _txcvt_A32B32G32R32UI_2_G32R32F(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == 1)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp    = textureProj(extraSampler, coord).xyxy;\n"
"            ftmp.xy = textureProj(origSampler, coord).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp    = textureProj(extraSampler, coord, lod_bias).xyxy;\n"
"            ftmp.xy = textureProj(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            ftmp    = textureProjLod(extraSampler, coord, lod_bias).xyxy;\n"
"            ftmp.xy = textureProjLod(origSampler, coord, lod_bias).xy;\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp    = texture(extraSampler, coord.xyz).xyxy;\n"
"            ftmp.xy = texture(origSampler, coord.xyz).xy;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp    = texture(extraSampler, coord.xyz, lod_bias).xyxy;\n"
"            ftmp.xy = texture(origSampler, coord.xyz, lod_bias).xy;\n"
"        }\n"
"        else\n"
"        {\n"
"            ftmp    = textureLod(extraSampler, coord.xyz, lod_bias).xyxy;\n"
"            ftmp.xy = textureLod(origSampler, coord.xyz, lod_bias).xy;\n"
"        }\n"
"    }\n"
"    return floatBitsToUint(ftmp);\n"
"}\n"
"\n";

static gctSTRING gcLibTexFormatConvertHalti1_TexCvtFunc_SinglePipe =
"highp uvec4 _txcvt_D24S8_1_A8R8G8B8_stencilMode(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4  ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    uint stencil = min(uint(ftmp.x * _8BITS_MAX + 0.5), 255u);\n"
"    return uvec4(stencil, 0u, 0u, 1u);\n"
"}\n"
"\n"
"vec4 _txcvt_S8D32F_1_G32R32F(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color.x = textureProj(origSampler, coord).x;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color.x = textureProj(origSampler, coord, lod_bias).x;\n"
"        }\n"
"        else\n"
"        {\n"
"            color.x = textureProjLod(origSampler, coord, lod_bias).x;\n"
"        }\n"
"    }\n"
"    else if (type == TYPE_GATHER)\n"
"    {\n"
"        vec4 colorLo;\n"
"        vec4 colorHi;\n"
"        if (mod == COMPONENT_X) {\n"
"            vec4 colorLo = viv_textureGather(origSampler, coord.xyz, 0);\n"
"            vec4 colorHi = viv_textureGather(origSampler, coord.xyz, 1);\n"
"            highp uvec4 lo = floatBitsToUint(colorLo),\n"
"                  hi = floatBitsToUint(colorHi);\n"
"            /* combine high and low */\n"
"            lo |= (hi << 16u);\n"
"            color = uintBitsToFloat(lo);\n"
"        } else if (mod == COMPONENT_ONE)  {\n"
"            color = vec4(1.0, 1.0, 1.0, 1.0);\n"
"        } else {\n"
"            color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color.x = texture(origSampler, coord.xyz).x;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color.x = texture(origSampler, coord.xyz, lod_bias).x;\n"
"        }\n"
"        else\n"
"        {\n"
"            color.x = textureLod(origSampler, coord.xyz, lod_bias).x;\n"
"        }\n"
"    }\n"
"    return color;\n"
"}\n"
"uvec4 _txcvt_S8D32F_1_G32R32F_u(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color.x = textureProj(origSampler, coord).y;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color.x = textureProj(origSampler, coord, lod_bias).y;\n"
"        }\n"
"        else\n"
"        {\n"
"            color.x = textureProjLod(origSampler, coord, lod_bias).y;\n"
"        }\n"
"    }\n"
"    else if (type == TYPE_GATHER)\n"
"    {\n"
"        if (mod == COMPONENT_X) {\n"
"            color = viv_textureGather(origSampler, coord.xyz, 2);\n"
"        } else if (mod == COMPONENT_ONE)  {\n"
"            color = vec4(1.0, 1.0, 1.0, 1.0);\n"
"        } else {\n"
"            color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color.x = texture(origSampler, coord.xyz).y;\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color.x = texture(origSampler, coord.xyz, lod_bias).y;\n"
"        }\n"
"        else\n"
"        {\n"
"            color.x = textureLod(origSampler, coord.xyz, lod_bias).y;\n"
"        }\n"
"    }\n"
"    return uvec4(color);\n"
"}\n"
"\n";

static gctSTRING gcLibTexFormatConvertHalti1_TexPcfCvtFunc =
"float _txpcfcvt_D24S8_3DCoord(\n"
"    sampler3D sampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    int compareMode,\n"
"    int compareFunc\n"
"    )\n"
"{\n"
"\n"
"    vec4  color;\n"
"    float result;\n"
"    if (mod == MOD_NONE)\n"
"    {\n"
"        color = texture(sampler, coord.xyz);\n"
"    }\n"
"    else if (mod == MOD_BIAS)\n"
"    {\n"
"        color = texture(sampler, coord.xyz, lod_bias);\n"
"    }\n"
"    else\n"
"    {\n"
"        color = textureLod(sampler, coord.xyz, lod_bias);\n"
"    }\n"
"    /* do Clamp */\n"
"    {\n"
"        /* for non D24S8 format, need to do clamp for reference depth value: ES3.0 spec 3.8.15  */\n"
"        coord.w = clamp(coord.w, 0.0, 1.0);\n"
"    }\n"
"    /* convert A8R8G8 to D24, and normalize the 24 bit to [0.0, 1.0] */\n"
"    color.x = _txcvt_RGBA8_to_F24(color);\n"
"    if (compareMode == 1)\n"
"    {\n"
"        result = color.x;\n"
"    }\n"
"    else\n"
"    {\n"
"        if (compareFunc == 1)\n"
"        {\n"
"            result = 0.0f;\n"
"        }\n"
"        else if (compareFunc == 2)\n"
"        {\n"
"            result = (coord.w != color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 3)\n"
"        {\n"
"            result = (coord.w < color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 4)\n"
"        {\n"
"            result = (coord.w <= color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 5)\n"
"        {\n"
"            result = (coord.w == color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 6)\n"
"        {\n"
"            result = (coord.w > color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 7)\n"
"        {\n"
"            result = (coord.w >= color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else\n"
"        {\n"
"            result = 1.0f;\n"
"        }\n"
"    }\n"
"    return result;\n"
"}\n"
"\n"
"float _txpcfcvt_2DCoord_all(\n"
"    sampler2D sampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    int compareMode,\n"
"    int compareFunc,\n"
"    int doClamp\n"
"    )\n"
"{\n"
"    vec4  color;\n"
"    float ref;\n"
"    float result;\n"
"    if (type == 1)\n"
"    {\n"
"        vec4 projCoord = coord / coord.w;\n"
"        ref = projCoord.z;\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color = texture(sampler, projCoord.xy);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color = texture(sampler, projCoord.xy, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            color = textureLod(sampler, projCoord.xy, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        ref = coord.z;\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color = texture(sampler, coord.xy);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color = texture(sampler, coord.xy, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            color = textureLod(sampler, coord.xy, lod_bias);\n"
"        }\n"
"    }\n"
"    if (doClamp != 0)\n"
"    {\n"
"        /* for non D32F format, need to do clamp for reference depth value: ES3.0 spec 3.8.15  */\n"
"        ref = clamp(ref, 0.0, 1.0);\n"
"    }\n"
"    if (compareMode == 1)\n"
"    {\n"
"        result = color.x;\n"
"    }\n"
"    else\n"
"    {\n"
"        if (compareFunc == 1)\n"
"        {\n"
"            result = 0.0f;\n"
"        }\n"
"        else if (compareFunc == 2)\n"
"        {\n"
"            result = (ref != color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 3)\n"
"        {\n"
"            result = (ref < color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 4)\n"
"        {\n"
"            result = (ref <= color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 5)\n"
"        {\n"
"            result = (ref == color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 6)\n"
"        {\n"
"            result = (ref > color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 7)\n"
"        {\n"
"            result = (ref >= color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else\n"
"        {\n"
"            result = 1.0f;\n"
"        }\n"
"    }\n"
"    return result;\n"
"}\n"
"\n"
"float _txpcfcvt_3DCoord_all(\n"
"    sampler3D sampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    int compareMode,\n"
"    int compareFunc,\n"
"    int clampOrConvert\n"
"    )\n"
"{\n"
"    vec4  color;\n"
"    float result;\n"
"    if (mod == MOD_NONE)\n"
"    {\n"
"        color = texture(sampler, coord.xyz);\n"
"    }\n"
"    else if (mod == MOD_BIAS)\n"
"    {\n"
"        color = texture(sampler, coord.xyz, lod_bias);\n"
"    }\n"
"    else\n"
"    {\n"
"        color = textureLod(sampler, coord.xyz, lod_bias);\n"
"    }\n"
"    if (clampOrConvert == 1)\n"
"    {\n"
"        /* no convert, but clamp  */\n"
"        coord.w = clamp(coord.w, 0.0, 1.0);\n"
"    }\n"
"    else if (clampOrConvert == 2)\n"
"    {\n"
"       /* convert, but no clamp */\n"
"       color.x = _txcvt_RGBA8_to_F32(color);\n"
"    }/*else no clamp, no convert */\n"
"\n"
"    if (compareMode == 1)\n"
"    {\n"
"        result = color.x;\n"
"    }\n"
"    else\n"
"    {\n"
"        if (compareFunc == 1)\n"
"        {\n"
"            result = 0.0f;\n"
"        }\n"
"        else if (compareFunc == 2)\n"
"        {\n"
"            result = (coord.w != color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 3)\n"
"        {\n"
"            result = (coord.w < color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 4)\n"
"        {\n"
"            result = (coord.w <= color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 5)\n"
"        {\n"
"            result = (coord.w == color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 6)\n"
"        {\n"
"            result = (coord.w > color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 7)\n"
"        {\n"
"            result = (coord.w >= color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else\n"
"        {\n"
"            result = 1.0f;\n"
"        }\n"
"    }\n"
"    return result;\n"
"}\n"
"\n"
"float _txpcfcvt_2DCoord(\n"
"    sampler2D sampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    int compareMode,\n"
"    int compareFunc\n"
"    )\n"
"{\n"
"    return _txpcfcvt_2DCoord_all(sampler,\n"
"                                 coord,\n"
"                                 mod,\n"
"                                 lod_bias,\n"
"                                 type,\n"
"                                 compareMode,\n"
"                                 compareFunc,\n"
"                                 1 /* do reference depth clamp */);\n"
"}\n"
"\n"
"float _txpcfcvt_3DCoord(\n"
"    sampler3D sampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    int compareMode,\n"
"    int compareFunc\n"
"    )\n"
"{\n"
"    return _txpcfcvt_3DCoord_all(sampler,\n"
"                                 coord,\n"
"                                 mod,\n"
"                                 lod_bias,\n"
"                                 type,\n"
"                                 compareMode,\n"
"                                 compareFunc,\n"
"                                 1 /* clamp, but no convert */);\n"
"}\n"
"\n"
"float _txpcfcvt_S8D32F_1_G32R32F_2DCoord(\n"
"    sampler2D sampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    int compareMode,\n"
"    int compareFunc\n"
"    )\n"
"{\n"
"    return _txpcfcvt_2DCoord_all(sampler,\n"
"                                 coord,\n"
"                                 mod,\n"
"                                 lod_bias,\n"
"                                 type,\n"
"                                 compareMode,\n"
"                                 compareFunc,\n"
"                                 0 /* no clamp */);\n"
"}\n"
"\n"
"float _txpcfcvt_S8D32F_2_A8R8G8B8_3DCoord(\n"
"    sampler3D sampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    int compareMode,\n"
"    int compareFunc\n"
"    )\n"
"{\n"
"    return _txpcfcvt_3DCoord_all(sampler,\n"
"                                 coord,\n"
"                                 mod,\n"
"                                 lod_bias,\n"
"                                 type,\n"
"                                 compareMode,\n"
"                                 compareFunc,\n"
"                                 2 /* convert to D32F, but no clamp */);\n"
"}\n"
"\n"
"float _txpcfcvt_S8D32F_1_G32R32F_3DCoord(\n"
"    sampler3D sampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    int compareMode,\n"
"    int compareFunc\n"
"    )\n"
"{\n"
"    return _txpcfcvt_3DCoord_all(sampler,\n"
"                                 coord,\n"
"                                 mod,\n"
"                                 lod_bias,\n"
"                                 type,\n"
"                                 compareMode,\n"
"                                 compareFunc,\n"
"                                 0 /* no convert, no clamp */);\n"
"}\n"
"\n";

static gctSTRING gcLibTexFormatConvertHalti1_OutputCvtUnifiedFunc =
"uint _alphaToMask(float alphaValue)  \n"
"{  \n"
"    uint mask;  \n"
"    if (alphaValue > 0.75)  \n"
"        mask = 0x0fu;  \n"
"    else if (alphaValue > 0.5)  \n"
"        mask = 0x07u;  \n"
"    else if (alphaValue > 0.25)  \n"
"        mask = 0x03u;  \n"
"    else if (alphaValue > 0.0)  \n"
"        mask = 0x01u;  \n"
"    else  \n"
"        mask = 0x00u;  \n"
"  \n"
"    return mask;  \n"
"}  \n"
"\n"
"void _viv_sampleMask(in    float alphaValue, \n"
"                     in    int   sampleConverageEnabled, \n"
"                     in    vec2  sampleConverage_Invert, \n"
"                     in    uint  sampleMask, \n"
"                     inout mediump uvec4 subsampleDepthReg)       \n"
"{\n"
"    uint mask; \n"
"    mask = _alphaToMask(alphaValue);  \n"
"\n"
"    /* sample converage */  \n"
"    if (sampleConverageEnabled != 0)  \n"
"    {  \n"
"        uint mask0;  \n"
"        mask0 = _alphaToMask(sampleConverage_Invert.x);  \n"
"        if (sampleConverage_Invert.y != 0.0)  \n"
"        {  \n"
"            mask0 = (~mask0) & 0x0fu;  \n"
"        }  \n"
"        mask &= mask0;  \n"
"    }  \n"
"\n"
"    mask &= sampleMask;  \n"
"    if ((mask & 0x01u) == 0u) \n"
"    {\n"
"        subsampleDepthReg.x |= 0x80000000u;;\n"
"    }\n"
"    if ((mask & 0x02u) == 0u) \n"
"    {\n"
"        subsampleDepthReg.y |= 0x80000000u;;\n"
"    }\n"
"    if ((mask & 0x04u) == 0u) \n"
"    {\n"
"        subsampleDepthReg.z |= 0x80000000u;;\n"
"    }\n"
"    if ((mask & 0x08u) == 0u) \n"
"    {\n"
"        subsampleDepthReg.w |= 0x80000000u;;\n"
"    }\n"
"    return ;  \n"
"}\n"
"\n"
"highp vec4 _outputcvt_R32UI_to_ARGB8(highp uint r32ui)\n"
"{\n"
"    vec4 val;\n"
"    val.x  = float((r32ui >> 16) & 0xffu)/_8BITS_MAX;\n"
"    val.y  = float((r32ui >> 8 ) & 0xffu)/_8BITS_MAX;\n"
"    val.z  = float((r32ui      ) & 0xffu)/_8BITS_MAX;\n"
"    val.w  = float((r32ui >> 24) & 0xffu)/_8BITS_MAX;\n"
"    return val;\n"
"}\n"
"\n"
"highp vec4 _outputcvt_R32I_to_ARGB8(highp int r32i)\n"
"{\n"
"    vec4 val;\n"
"    val.x  = float((r32i >> 16) & 0xff)/_8BITS_MAX;\n"
"    val.y  = float((r32i >> 8 ) & 0xff)/_8BITS_MAX;\n"
"    val.z  = float((r32i      ) & 0xff)/_8BITS_MAX;\n"
"    val.w  = float((r32i >> 24) & 0xff)/_8BITS_MAX;\n"
"    return val;\n"
"}\n"
"\n"
"highp vec4 _outputcvt_RG16UI_to_ARGB8(highp uvec2 r16uvec2)\n"
"{\n"
"    vec4 val;\n"
"    highp uint r32ui = (r16uvec2.x & 0xffffu) | ((r16uvec2.y & 0xffffu) << 16);\n"
"    val.x  = float((r32ui >> 16) & 0xffu)/_8BITS_MAX;\n"
"    val.y  = float((r32ui >> 8 ) & 0xffu)/_8BITS_MAX;\n"
"    val.z  = float((r32ui      ) & 0xffu)/_8BITS_MAX;\n"
"    val.w  = float((r32ui >> 24) & 0xffu)/_8BITS_MAX;\n"
"    return val;\n"
"}\n"
"\n"
"highp vec4 _outputcvt_RG16I_to_ARGB8(highp ivec2 r16ivec2)\n"
"{\n"
"    vec4 val;\n"
"    val.x  = float((r16ivec2.y     ) & 0xff) / _8BITS_MAX;\n"
"    val.y  = float((r16ivec2.x >> 8) & 0xff) / _8BITS_MAX;\n"
"    val.z  = float((r16ivec2.x     ) & 0xff) / _8BITS_MAX;\n"
"    val.w  = float((r16ivec2.y >> 8) & 0xff) / _8BITS_MAX;\n"
"    return val;\n"
"}\n"
"\n"
"highp vec4 _outputcvt_R16UI_to_ARGB4(highp uint r16ui)\n"
"{\n"
"    vec4 val;\n"
"    val.x  = float((r16ui >> 8 ) & 0xfu)/_4BITS_MAX;\n"
"    val.y  = float((r16ui >> 4 ) & 0xfu)/_4BITS_MAX;\n"
"    val.z  = float((r16ui      ) & 0xfu)/_4BITS_MAX;\n"
"    val.w  = float((r16ui >> 12) & 0xfu)/_4BITS_MAX;\n"
"    return val;\n"
"}\n"
"\n"
"highp vec4 _outputcvt_R16I_to_ARGB4(highp int r16i)\n"
"{\n"
"    vec4 val;\n"
"    val.x  = float((r16i >> 8 ) & 0xf)/_4BITS_MAX;\n"
"    val.y  = float((r16i >> 4 ) & 0xf)/_4BITS_MAX;\n"
"    val.z  = float((r16i      ) & 0xf)/_4BITS_MAX;\n"
"    val.w  = float((r16i >> 12) & 0xf)/_4BITS_MAX;\n"
"    return val;\n"
"}\n"
"\n";

static gctSTRING gcLibTexFormatConvertHalti1_OutputCvtFunc =
"highp vec4 _outputcvt_R8_1_X8R8G8B8(highp vec4 val)\n"
"{\n"
"    return vec4(val.x, 0.0, 0.0, 1.0);\n"
"}\n"
"highp vec4 _outputcvt_G8R8_1_X8R8G8B8(highp vec4 val)\n"
"{\n"
"    return vec4(val.x, val.y, 0.0, 1.0);\n"
"}\n"
"highp vec4 _outputcvt_R32UI_1_A8R8G8B8(highp uvec4 uintval)\n"
"{\n"
"    return _outputcvt_R32UI_to_ARGB8(uintval.x);\n"
"}\n"
"\n"
"highp vec4 _outputcvt_R32I_1_A8R8G8B8(highp ivec4 intval)\n"
"{\n"
"    return _outputcvt_R32I_to_ARGB8(intval.x);\n"
"}\n"
"\n"
"highp vec4 _outputcvt_R16UI_1_A4R4G4B4(highp uvec4 uintval)\n"
"{\n"
"    return _outputcvt_R16UI_to_ARGB4(uintval.x & 0xffffu);\n"
"}\n"
"\n"
"highp vec4 _outputcvt_R16I_1_A4R4G4B4(highp ivec4 intval)\n"
"{\n"
"    return _outputcvt_R16I_to_ARGB4(intval.x & 0xffff);\n"
"}\n"
"\n"
"highp vec4 _outputcvt_R8UI_1_A4R4G4B4(highp uvec4 uintval)\n"
"{\n"
"    vec4 fret = _outputcvt_R16UI_to_ARGB4(uintval.x & 0xffu);\n"
"    fret.w = 1.0;\n"
"    return fret;\n"
"}\n"
"\n"
"highp vec4 _outputcvt_R8I_1_A4R4G4B4(highp ivec4 intval)\n"
"{\n"
"    vec4 fret = _outputcvt_R16I_to_ARGB4(intval.x & 0xff);\n"
"    fret.w = 1.0;\n"
"    return fret;\n"
"}\n"
"\n"
"highp vec4 _outputcvt_A2B10G10R10UI_1_A8R8G8B8(highp uvec4 uintval)\n"
"{\n"
"    uint utmp = (uintval.x & 0x3ffu)         | ((uintval.y & 0x3ffu) << 10) |\n"
"                ((uintval.z & 0x3ffu) << 20) | ((uintval.w & 0x3u) << 30);\n"
"    return _outputcvt_R32UI_to_ARGB8(utmp);\n"
"}\n"
"\n"
"highp vec4[4] _outputcvt_A32B32G32R32UI_4_A8R8G8B8(highp uvec4 inval)\n"
"{\n"
"    vec4[4] fret;\n"
"    fret[0] = _outputcvt_R32UI_to_ARGB8(inval.x);\n"
"    fret[1] = _outputcvt_R32UI_to_ARGB8(inval.y);\n"
"    fret[2] = _outputcvt_R32UI_to_ARGB8(inval.z);\n"
"    fret[3] = _outputcvt_R32UI_to_ARGB8(inval.w);\n"
"    return fret;\n"
"}\n"
"\n"
"highp vec4[4] _outputcvt_A32B32G32R32I_4_A8R8G8B8(highp ivec4 inval)\n"
"{\n"
"    vec4[4] fret;\n"
"    fret[0] = _outputcvt_R32I_to_ARGB8(inval.x);\n"
"    fret[1] = _outputcvt_R32I_to_ARGB8(inval.y);\n"
"    fret[2] = _outputcvt_R32I_to_ARGB8(inval.z);\n"
"    fret[3] = _outputcvt_R32I_to_ARGB8(inval.w);\n"
"    return fret;\n"
"}\n"
"\n"
"highp vec4[2] _outputcvt_A16B16G16R16UI_2_A8R8G8B8(highp uvec4 inval)\n"
"{\n"
"    vec4[2] fret;\n"
"    fret[0] = _outputcvt_RG16UI_to_ARGB8(inval.xy);\n"
"    fret[1] = _outputcvt_RG16UI_to_ARGB8(inval.zw);\n"
"    return fret;\n"
"}\n"
"\n"
"highp vec4[2] _outputcvt_A16B16G16R16I_2_A8R8G8B8(highp ivec4 inval)\n"
"{\n"
"    vec4[2] fret;\n"
"    fret[0] = _outputcvt_RG16I_to_ARGB8(inval.xy);\n"
"    fret[1] = _outputcvt_RG16I_to_ARGB8(inval.zw);\n"
"    return fret;\n"
"}\n"
"\n"
"highp vec4 _outputcvt_A8B8G8R8UI_1_A8R8G8B8(highp uvec4 inval)\n"
"{\n"
"    vec4 ftmp;\n"
"    ftmp.x = float(inval.x & 0xffu)/_8BITS_MAX;\n"
"    ftmp.y = float(inval.y & 0xffu)/_8BITS_MAX;\n"
"    ftmp.z = float(inval.z & 0xffu)/_8BITS_MAX;\n"
"    ftmp.w = float(inval.w & 0xffu)/_8BITS_MAX;\n"
"    return ftmp;\n"
"}\n"
"\n"
"highp vec4 _outputcvt_A8B8G8R8I_1_A8R8G8B8(highp ivec4 inval)\n"
"{\n"
"    vec4 ftmp;\n"
"    ftmp.x = float(inval.x & 0x000000ff)/_8BITS_MAX;\n"
"    ftmp.y = float(inval.y & 0x000000ff)/_8BITS_MAX;\n"
"    ftmp.z = float(inval.z & 0x000000ff)/_8BITS_MAX;\n"
"    ftmp.w = float(inval.w & 0x000000ff)/_8BITS_MAX;\n"
"    return ftmp;\n"
"}\n"
"\n"
"highp vec4[2] _outputcvt_G32R32UI_2_A8R8G8B8(highp uvec4 inval)\n"
"{\n"
"    vec4[2] ftmp;\n"
"    ftmp[0] = _outputcvt_R32UI_to_ARGB8(inval.x);\n"
"    ftmp[1] = _outputcvt_R32UI_to_ARGB8(inval.y);\n"
"    return ftmp;\n"
"}\n"
"\n"
"highp vec4[2] _outputcvt_G32R32I_2_A8R8G8B8(highp ivec4 inval)\n"
"{\n"
"    vec4[2] ftmp;\n"
"    ftmp[0] = _outputcvt_R32I_to_ARGB8(inval.x);\n"
"    ftmp[1] = _outputcvt_R32I_to_ARGB8(inval.y);\n"
"    return ftmp;\n"
"}\n"
"\n"
"highp vec4 _outputcvt_G16R16UI_1_A8R8G8B8(highp uvec4 inval)\n"
"{\n"
"    return _outputcvt_RG16UI_to_ARGB8(inval.xy);\n"
"}\n"
"\n"
"highp vec4 _outputcvt_G16R16I_1_A8R8G8B8(highp ivec4 inval)\n"
"{\n"
"    return _outputcvt_RG16I_to_ARGB8(inval.xy);\n"
"}\n"
"\n"
"highp vec4 _outputcvt_G8R8UI_1_A4R4G4B4(highp uvec4 inval)\n"
"{\n"
"    uint utmp = (inval.x & 0xffu) | ((inval.y & 0xffu) << 8);\n"
"    return _outputcvt_R16UI_to_ARGB4(utmp);\n"
"}\n"
"\n"
"highp vec4 _outputcvt_G8R8I_1_A4R4G4B4(highp ivec4 inval)\n"
"{\n"
"    int itmp = (inval.x & 0xff) | ((inval.y & 0xff) << 8);\n"
"    return _outputcvt_R16I_to_ARGB4(itmp);\n"
"}\n"
"\n"
"highp vec4 _outputcvt_G32R32I_1_G32R32F(highp ivec4 inval)\n"
"{\n"
"    return vec4(intBitsToFloat(inval.x), intBitsToFloat(inval.y), 0.0, 1.0);\n"
"}\n"
"\n"
"highp vec4 _outputcvt_G32R32UI_1_G32R32F(highp uvec4 inval)\n"
"{\n"
"    return vec4(uintBitsToFloat(inval.x), uintBitsToFloat(inval.y), 0.0, 1.0);\n"
"}\n"
"highp vec4 _outputcvt_A16B16G16R16I_1_G32R32F(highp ivec4 inval)\n"
"{\n"
"    highp int x = (inval.x & 0xffff) | ((inval.y & 0xffff) << 16);\n"
"    highp int y = (inval.z & 0xffff) | ((inval.w & 0xffff) << 16);\n"
"    return vec4(intBitsToFloat(x), intBitsToFloat(y), 0.0, 1.0);\n"
"}\n"
"\n"
"highp vec4 _outputcvt_A16B16G16R16UI_1_G32R32F(highp uvec4 inval)\n"
"{\n"
"    highp uint x = (inval.x & 0xffffu) | ((inval.y & 0xffffu) << 16);\n"
"    highp uint y = (inval.z & 0xffffu) | ((inval.w & 0xffffu) << 16);\n"
"    return vec4(uintBitsToFloat(x), uintBitsToFloat(y), 0.0, 1.0);\n"
"}\n"
"\n"
"highp vec4[2] _outputcvt_A32B32G32R32I_2_G32R32F(highp ivec4 inval)\n"
"{\n"
"    vec4[2] fret;\n"
"    fret[0] = vec4(intBitsToFloat(inval.x), intBitsToFloat(inval.y), 0.0, 1.0);\n"
"    fret[1] = vec4(intBitsToFloat(inval.z), intBitsToFloat(inval.w), 0.0, 1.0);\n"
"    return fret;\n"
"}\n"
"\n"
"highp vec4[2] _outputcvt_A32B32G32R32UI_2_G32R32F(highp uvec4 inval)\n"
"{\n"
"    vec4[2] fret;\n"
"    fret[0] = vec4(uintBitsToFloat(inval.x), uintBitsToFloat(inval.y), 0.0, 1.0);\n"
"    fret[1] = vec4(uintBitsToFloat(inval.z), uintBitsToFloat(inval.w), 0.0, 1.0);\n"
"    return fret;\n"
"}\n"
"\n"
"highp vec4[2] _outputcvt_A16B16G16R16F_2_G16R16F(highp vec4 intval)\n"
"{\n"
"    vec4 fret[2];\n"
"    fret[0] = vec4(intval.rg, 0.0, 1.0);\n"
"    fret[1] = vec4(intval.ba, 0.0, 1.0);\n"
"    return fret;\n"
"}\n";

static gctSTRING gcLibTexFormatConvertHalti1_MainFunc =
"void main(void)\n"
"{\n"
"    vec4 fcolor1 = _txcvt_A32B32G32R32F_2_G32R32F(origSampler3D, vec4(texCoord3D, 1.0f), 0, 0.0, 0, extraSampler3D);\n"
"    vec4 fcolor2 = _txcvt_A32B32G32R32F_2_G32R32F(origSampler3D, vec4(texCoord3D, 1.0f), 1, 0.0, 0, extraSampler3D);\n"
"    vec4 fcolor3 = _txcvt_A32B32G32R32F_2_G32R32F(origSampler3D, vec4(texCoord3D, 1.0f), 2, 0.0, 0, extraSampler3D);\n"
"    vec3 coordDSX3D = dFdx(texCoord3D);\n"
"    vec3 coordDSY3D = dFdy(texCoord3D);\n"
"    vec4 fcolor4;\n"
"    fcolor4   = textureGrad(extraSampler3D, vec4(texCoord3D, 1.0F).xyz, coordDSX3D, coordDSY3D).xyxy;\n"
"    fragColor = fcolor1 * fcolor2  * fcolor3  * fcolor4;\n"
"}\n"
"\n";


static gctSTRING gcLibTexFormatConvertHalti0_Header =
"#version 300 es\n"
"/* gcLibTexFormatConvertHalti0 */\n"
"#define TYPE_NONE    0\n"
"#define TYPE_PROJ    1\n"
"#define MOD_NONE     0\n"
"#define MOD_BIAS     1\n"
"#define MOD_LODBIAS  2\n"
"#define F16ToF32_BIAS_UI   939524096u\n"
"#define _4BITS_MAX         15.5\n"
"#define _8BITS_MAX         255.9\n"
"#define _12BITS_MAX        4095.0\n"
"#define _8BITS_SIGNED_MAX  127\n"
"#define _16BITS_SIGNED_MAX 32767\n"
"precision highp float;\n"
"precision highp sampler2D;\n"
"precision highp sampler3D;\n"
"precision highp isampler2D;\n"
"precision highp isampler3D;\n"
"precision highp usampler2D;\n"
"precision highp usampler3D;\n"
"in vec3 texCoord3D;\n"
"uniform sampler3D gOrigSampler3D;\n"
"uniform sampler3D gExtraSampler3D1;\n"
"uniform sampler3D gExtraSampler3D2;\n"
"uniform sampler3D gExtraSampler3D3;\n"
"out vec4 fragColor;\n"
"\n";

static gctSTRING gcLibTexFormatConvertHalti0_TexCvtUnifiedFunc =
"mediump float _txcvt_single_swizzle_float(in vec4 val, in int swizzle)\n"
"{\n"
"   switch (swizzle)\n"
"   {\n"
"       case 0:\n"
"           return val.x;\n"
"       case 1:\n"
"           return val.y;\n"
"       case 2:\n"
"           return val.z;\n"
"       case 3:\n"
"           return val.w;\n"
"       case 4:\n"
"           return 0.0;\n"
"       default:\n"
"           return 1.0;\n"
"   }\n"
"   return 0.0;\n"
"}\n"
"mediump vec4 _txcvt_swizzle_float(in vec4 val, in int swizzleX, in int swizzleY, in int swizzleZ, in int swizzleW)\n"
"{\n"
"   vec4 outputResult;\n"
"   outputResult.x = _txcvt_single_swizzle_float(val, swizzleX);\n"
"   outputResult.y = _txcvt_single_swizzle_float(val, swizzleY);\n"
"   outputResult.z = _txcvt_single_swizzle_float(val, swizzleZ);\n"
"   outputResult.w = _txcvt_single_swizzle_float(val, swizzleW);\n"
"   return outputResult;\n"
"}\n"
"\n"
"mediump int _txcvt_single_swizzle_int(in ivec4 val, in int swizzle)\n"
"{\n"
"   switch (swizzle)\n"
"   {\n"
"       case 0:\n"
"           return val.x;\n"
"       case 1:\n"
"           return val.y;\n"
"       case 2:\n"
"           return val.z;\n"
"       case 3:\n"
"           return val.w;\n"
"       case 4:\n"
"           return 0;\n"
"       default:\n"
"           return 1;\n"
"   }\n"
"   return 0;\n"
"}\n"
"\n"
"mediump ivec4 _txcvt_swizzle_int(in ivec4 val, in int swizzleX, in int swizzleY, in int swizzleZ, in int swizzleW)\n"
"{\n"
"   ivec4 outputResult;\n"
"   outputResult.x = _txcvt_single_swizzle_int(val, swizzleX);\n"
"   outputResult.y = _txcvt_single_swizzle_int(val, swizzleY);\n"
"   outputResult.z = _txcvt_single_swizzle_int(val, swizzleZ);\n"
"   outputResult.w = _txcvt_single_swizzle_int(val, swizzleW);\n"
"   return outputResult;\n"
"}\n"
"\n"
"mediump uint _txcvt_single_swizzle_uint(in uvec4 val, in int swizzle)\n"
"{\n"
"   switch (swizzle)\n"
"   {\n"
"       case 0:\n"
"           return val.x;\n"
"       case 1:\n"
"           return val.y;\n"
"       case 2:\n"
"           return val.z;\n"
"       case 3:\n"
"           return val.w;\n"
"       case 4:\n"
"           return 0u;\n"
"       default:\n"
"           return 1u;\n"
"   }\n"
"   return 0u;\n"
"}\n"
"\n"
"mediump uvec4 _txcvt_swizzle_uint(in uvec4 val, in int swizzleX, in int swizzleY, in int swizzleZ, in int swizzleW)\n"
"{\n"
"   uvec4 outputResult;\n"
"   outputResult.x = _txcvt_single_swizzle_uint(val, swizzleX);\n"
"   outputResult.y = _txcvt_single_swizzle_uint(val, swizzleY);\n"
"   outputResult.z = _txcvt_single_swizzle_uint(val, swizzleZ);\n"
"   outputResult.w = _txcvt_single_swizzle_uint(val, swizzleW);\n"
"   return outputResult;\n"
"}\n"
"\n"
"mediump ivec2 _txcvt_RGBA4_to_I8_vec2(in vec4 val)\n"
"{\n"
"   mediump ivec2 iret;"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp ivec4 itmp = ivec4(val * _4BITS_MAX);\n"
"   iret.x = ((itmp.y << 4) | (itmp.z)) & 0x000000ff;\n"
"   iret.y = ((itmp.w << 4) | (itmp.x)) & 0x000000ff;\n"
"   if (iret.x > _8BITS_SIGNED_MAX)\n"
"   {\n"
"       iret.x = int(uint(iret.x) | 0xffffff00u);\n"
"   }\n"
"   if (iret.y > _8BITS_SIGNED_MAX)\n"
"   {\n"
"       iret.y = int(uint(iret.y) | 0xffffff00u);\n"
"   }\n"
"   return iret;\n"
"}\n"
"\n"
"mediump uvec2 _txcvt_RGBA4_to_UI8_vec2(in vec4 val)\n"
"{\n"
"   mediump uvec4 utmp = uvec4(val * _4BITS_MAX);\n"
"   return uvec2((utmp.y << 4) | (utmp.z), (utmp.w << 4) | (utmp.x));\n"
"}\n"
"\n"
"highp float _txcvt_RGBA8_to_F32(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp uvec4 utmp = uvec4(val * _8BITS_MAX);\n"
"   highp uint uval = (utmp.w << 24) | (utmp.x << 16) | (utmp.y << 8) | (utmp.z);\n"
"   return uintBitsToFloat(uval);\n"
"}\n"
"\n"
"highp int _txcvt_i16_to_i32(in int val)\n"
"{\n"
"   highp int ret = val & 0xffff;\n"
"   if (ret > _16BITS_SIGNED_MAX)\n"
"   {\n"
"       ret = int(uint(ret) | 0xffff0000u);\n"
"   }\n"
"   return ret;\n"
"}\n"
"\n"
"highp float _txcvt_fp16Bits_to_fp32(uint uval)\n"
"{\n"
"   highp uint fp32Bits = ((uval & 0x8000u) << 16) /* sign bit */\n"
"                       | (((uval & 0x7C00u) << 13) + F16ToF32_BIAS_UI) /* exponent bits */\n"
"                       | ((uval & 0x3FFu) << 13);\n"
"   highp float fp32Val = uintBitsToFloat(fp32Bits);\n"
"   return fp32Val;\n"
"}\n"
"\n"
"highp float _txcvt_fp11Bits_to_fp32(uint uval)\n"
"{\n"
"   highp uint fp32Bits = 0u;    /* sign bit is always 0*/ \n"
"   fp32Bits = (((uval & 0x7C0u) << 17) + F16ToF32_BIAS_UI) /* exponent bits */\n"
"            |  ((uval & 0x3Fu ) << 17);\n"
"   highp float fp32Val = uintBitsToFloat(fp32Bits);\n"
"   return fp32Val;\n"
"}\n"
"\n"
"highp float _txcvt_fp10Bits_to_fp32(uint uval)\n"
"{\n"
"   highp uint fp32Bits = 0u;    /* sign bit is always 0*/ \n"
"   fp32Bits = (((uval & 0x3E0u) << 18) + F16ToF32_BIAS_UI) /* exponent bits */\n"
"            |  ((uval & 0x1Fu ) << 18);\n"
"   highp float fp32Val = uintBitsToFloat(fp32Bits);\n"
"   return fp32Val;\n"
"}\n"
"\n"
"mediump vec2 _txcvt_RGBA8_to_F16_vec2(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   mediump vec2 fret;\n"
"   highp uvec4 utmp = uvec4(val * _8BITS_MAX);\n"
"   fret.x = _txcvt_fp16Bits_to_fp32((utmp.y << 8) | (utmp.z));\n"
"   fret.y = _txcvt_fp16Bits_to_fp32((utmp.w << 8) | (utmp.x));\n"
"   return fret;\n"
"}\n"
"\n"
"highp ivec2 _txcvt_RGBA8_to_I16_vec2(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp ivec2 iret;"
"   highp ivec4 itmp = ivec4(val * _8BITS_MAX);\n"
"   iret.x = _txcvt_i16_to_i32((itmp.y << 8) | (itmp.z));\n"
"   iret.y = _txcvt_i16_to_i32((itmp.w << 8) | (itmp.x));\n"
"   return iret;\n"
"}\n"
"\n"
"highp uvec2 _txcvt_RGBA8_to_UI16_vec2(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp uvec4 utmp = uvec4(val * _8BITS_MAX);\n"
"   return uvec2((utmp.y << 8) | (utmp.z), (utmp.w << 8) | (utmp.x));\n"
"}\n"
"\n"
"highp int _cvt_8I_32I(highp int r32i)\n"
"{\n"
"    highp int iret = r32i & 0x000000ff;\n"
"    if (iret > _8BITS_SIGNED_MAX)\n"
"    {\n"
"        iret = int(uint(iret) | 0xffffff00u);\n"
"    }\n"
"    return iret;\n"
"}\n"
"\n"
"highp int _txcvt_RGBA8_to_I32(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp ivec4 itmp = ivec4(val * _8BITS_MAX);\n"
"   return (itmp.w << 24) | (itmp.x << 16) | (itmp.y << 8) | (itmp.z);\n"
"}\n"
"\n"
"highp uint _txcvt_RGBA8_to_UI32(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp uvec4 utmp = uvec4(val * _8BITS_MAX);\n"
"   return (utmp.w << 24) | (utmp.x << 16) | (utmp.y << 8) | (utmp.z);\n"
"}\n"
"\n"
"/* FP16: SE5M10; FP32: SE8M23 */\n"
"/* FP16 bias: 15; FP32 bias: 127; f16 to f32 adjust bias: 127 - 15 */\n"
"mediump float _txcvt_ARGB4_to_F16(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp uvec4 utmp = uvec4(val * _4BITS_MAX);\n"
"   return _txcvt_fp16Bits_to_fp32((utmp.w << 12) | (utmp.x << 8) | (utmp.y << 4) | (utmp.z)); \n"
"}\n"
"\n"
"highp uvec4 _txcvt_RGBA8_to_R10G10B10A2UI(in vec4 val)\n"
"{\n"
"   highp uint utmp = _txcvt_RGBA8_to_UI32(val);\n"
"   highp uvec4 uret;\n"
"   uret.x = (utmp      ) & 0x000003ffu;\n"
"   uret.y = (utmp >> 10) & 0x000003ffu;\n"
"   uret.z = (utmp >> 20) & 0x000003ffu;\n"
"   uret.w = (utmp >> 30) & 0x00000003u;\n"
"   return uret;\n"
"}\n"
"\n"
"mediump int _txcvt_RGBA4_to_I8(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp ivec4 itmp = ivec4(val * _4BITS_MAX);\n"
"   mediump int iret = ((itmp.y << 4) | (itmp.z)) & 0x000000ff;\n"
"   if (iret > _8BITS_SIGNED_MAX)\n"
"   {\n"
"       iret = int(uint(iret) | 0xffffff00u);\n"
"   }\n"
"   return iret;\n"
"}\n"
"\n"
"mediump uint _txcvt_RGBA4_to_UI8(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp uvec4 utmp = uvec4(val * _4BITS_MAX);\n"
"   return ((utmp.y << 4) | (utmp.z)) & 0x000000ffu;\n"
"}\n"
"\n"
"mediump int _txcvt_RGBA4_to_I16(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp ivec4 itmp = ivec4(val * _4BITS_MAX);\n"
"   return _txcvt_i16_to_i32((itmp.w << 12) | (itmp.x << 8) | (itmp.y << 4) | (itmp.z));\n"
"}\n"
"\n"
"mediump uint _txcvt_RGBA4_to_UI16(in vec4 val)\n"
"{\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp uvec4 utmp = uvec4(val * _4BITS_MAX);\n"
"   mediump uint uret = (utmp.w << 12) | (utmp.x << 8) | (utmp.y << 4) | (utmp.z);\n"
"   return uret & 0x0000ffffu;\n"
"}\n"
"\n"
"highp vec4 _txcvt_RGBA8_to_B10G11R11F(in vec4 val)\n"
"{\n"
"   highp vec4 fret;\n"
"   /* val is normalized to [0.0, 1.0] */\n"
"   highp uvec4 utmp = uvec4(val * _8BITS_MAX);\n"
"   fret.x = _txcvt_fp11Bits_to_fp32((utmp.z     )          | ((utmp.y & 0x7u ) << 8));\n"
"   fret.y = _txcvt_fp11Bits_to_fp32(((utmp.y >> 3) & 0x1fu) | ((utmp.x & 0x3fu) << 5));\n"
"   fret.z = _txcvt_fp10Bits_to_fp32(((utmp.x >> 6) & 0x3u ) | (utmp.w          << 2));\n"
"   fret.w = 1.0;\n"
"   return fret;\n"
"}\n"
"\n";

static gctSTRING gcLibTexFormatConvertHalti0_TexCvtFunc =
"highp vec4 _txcvt_R8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp  = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp  = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp  = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp  = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp  = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp  = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return vec4(ftmp.x, 0.0, 0.0, 1.0);\n"
"}\n"
"\n"
"highp vec4 _txcvt_G8R8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp  = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp  = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp  = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp  = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp  = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp  = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return vec4(ftmp.xy, 0.0, 1.0);\n"
"}\n"
"\n"
"highp vec4 _txcvt_B10G11R11F_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return _txcvt_RGBA8_to_B10G11R11F(ftmp);\n"
"}\n"
"\n"
"mediump ivec4 _txcvt_R16I_1_A4R4G4B4(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    mediump vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return ivec4(_txcvt_RGBA4_to_I16(ftmp), 0, 0, 1);\n"
"}\n"
"\n"
"mediump uvec4 _txcvt_R16UI_1_A4R4G4B4(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    mediump vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return uvec4(_txcvt_RGBA4_to_UI16(ftmp), 0u, 0u, 1u);\n"
"}\n"
"\n"
"mediump ivec4 _txcvt_R8I_1_A4R4G4B4(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    mediump vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return ivec4(_txcvt_RGBA4_to_I8(ftmp), 0, 0, 1);\n"
"}\n"
"\n"
"mediump uvec4 _txcvt_R8UI_1_A4R4G4B4(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    mediump vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return uvec4(_txcvt_RGBA4_to_UI8(ftmp), 0u, 0u, 1u);\n"
"}\n"
"\n"
"mediump ivec4 _txcvt_G8R8I_1_A4R4G4B4(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    mediump vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return ivec4(_txcvt_RGBA4_to_I8_vec2(ftmp), 0, 1);\n"
"}\n"
"\n"
"mediump uvec4 _txcvt_G8R8UI_1_A4R4G4B4(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    mediump vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return uvec4(_txcvt_RGBA4_to_UI8_vec2(ftmp), 0u, 1u);\n"
"}\n"
"\n"
"highp uvec4 _txcvt_A8B8G8R8UI_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return uvec4(ftmp * _8BITS_MAX);\n"
"}\n"
"\n"
"highp ivec4 _txcvt_A8B8G8R8I_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    highp ivec4 iret;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"   highp ivec4 itmp = ivec4(ftmp * _8BITS_MAX);\n"
"   iret.x = _cvt_8I_32I(itmp.x);\n"
"   iret.y = _cvt_8I_32I(itmp.y);\n"
"   iret.z = _cvt_8I_32I(itmp.z);\n"
"   iret.w = _cvt_8I_32I(itmp.w);\n"
"   return iret;\n"
"}\n"
"\n"
"highp uvec4 _txcvt_B8G8R8UI_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp uvec4 color;\n"
"    color = _txcvt_A8B8G8R8UI_1_A8R8G8B8(origSampler, coord, mod, lod_bias, type);\n"
"    color.a = 1u;\n"
"    return color;\n"
"}\n"
"\n"
"highp ivec4 _txcvt_B8G8R8I_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp ivec4 color;\n"
"    color = _txcvt_A8B8G8R8I_1_A8R8G8B8(origSampler, coord, mod, lod_bias, type);\n"
"    color.a = 1;\n"
"    return color;\n"
"}\n"
"\n"
"mediump vec4 _txcvt_R16F_1_A4R4G4B4(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    mediump vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return vec4(_txcvt_ARGB4_to_F16(ftmp), 0.0, 0.0, 1.0);\n"
"}\n"
"\n"
"highp ivec4 _txcvt_R32I_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return ivec4(_txcvt_RGBA8_to_I32(ftmp), 0, 0, 1);\n"
"}\n"
"\n"
"highp uvec4 _txcvt_R32UI_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return uvec4(_txcvt_RGBA8_to_UI32(ftmp), 0u, 0u, 1u);\n"
"}\n"
"\n"
"highp vec4 _txcvt_A32B32G32R32F_4_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1,\n"
"    sampler3D extraSampler2,\n"
"    sampler3D extraSampler3\n"
"    )\n"
"{\n"
"    highp vec4 ftmpR;\n"
"    highp vec4 ftmpG;\n"
"    highp vec4 ftmpB;\n"
"    highp vec4 ftmpA;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord);\n"
"            ftmpG = textureProj(extraSampler1, coord);\n"
"            ftmpB = textureProj(extraSampler2, coord);\n"
"            ftmpA = textureProj(extraSampler3, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProj(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProj(extraSampler2, coord, lod_bias);\n"
"            ftmpA = textureProj(extraSampler3, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProjLod(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProjLod(extraSampler2, coord, lod_bias);\n"
"            ftmpA = textureProjLod(extraSampler3, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz);\n"
"            ftmpG = texture(extraSampler1, coord.xyz);\n"
"            ftmpB = texture(extraSampler2, coord.xyz);\n"
"            ftmpA = texture(extraSampler3, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = texture(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = texture(extraSampler2, coord.xyz, lod_bias);\n"
"            ftmpA = texture(extraSampler3, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = textureLod(extraSampler2, coord.xyz, lod_bias);\n"
"            ftmpA = textureLod(extraSampler3, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return vec4(_txcvt_RGBA8_to_F32(ftmpR), _txcvt_RGBA8_to_F32(ftmpG),\n"
"                _txcvt_RGBA8_to_F32(ftmpB), _txcvt_RGBA8_to_F32(ftmpA));\n"
"}\n"
"\n"
"highp vec4 _txcvt_G32R32F_2_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1\n"
"    )\n"
"{\n"
"    highp vec4 ftmpR;\n"
"    highp vec4 ftmpG;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord);\n"
"            ftmpG = textureProj(extraSampler1, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProj(extraSampler1, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProjLod(extraSampler1, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz);\n"
"            ftmpG = texture(extraSampler1, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = texture(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return vec4(_txcvt_RGBA8_to_F32(ftmpR), _txcvt_RGBA8_to_F32(ftmpG), 0.0, 1.0);\n"
"}\n"
"\n"
"highp vec4 _txcvt_R32F_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return vec4(_txcvt_RGBA8_to_F32(ftmp), 0.0, 0.0, 1.0);\n"
"}\n"
"\n"
"highp ivec4 _txcvt_A32B32G32R32I_4_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1,\n"
"    sampler3D extraSampler2,\n"
"    sampler3D extraSampler3\n"
"    )\n"
"{\n"
"    highp vec4 ftmpR;\n"
"    highp vec4 ftmpG;\n"
"    highp vec4 ftmpB;\n"
"    highp vec4 ftmpA;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord);\n"
"            ftmpG = textureProj(extraSampler1, coord);\n"
"            ftmpB = textureProj(extraSampler2, coord);\n"
"            ftmpA = textureProj(extraSampler3, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProj(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProj(extraSampler2, coord, lod_bias);\n"
"            ftmpA = textureProj(extraSampler3, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProjLod(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProjLod(extraSampler2, coord, lod_bias);\n"
"            ftmpA = textureProjLod(extraSampler3, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz);\n"
"            ftmpG = texture(extraSampler1, coord.xyz);\n"
"            ftmpB = texture(extraSampler2, coord.xyz);\n"
"            ftmpA = texture(extraSampler3, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = texture(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = texture(extraSampler2, coord.xyz, lod_bias);\n"
"            ftmpA = texture(extraSampler3, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = textureLod(extraSampler2, coord.xyz, lod_bias);\n"
"            ftmpA = textureLod(extraSampler3, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return ivec4(_txcvt_RGBA8_to_I32(ftmpR), _txcvt_RGBA8_to_I32(ftmpG),\n"
"                 _txcvt_RGBA8_to_I32(ftmpB), _txcvt_RGBA8_to_I32(ftmpA));\n"
"}\n"
"\n"
"highp ivec4 _txcvt_B32G32R32I_3_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1,\n"
"    sampler3D extraSampler2\n"
"    )\n"
"{\n"
"    highp vec4 ftmpR;\n"
"    highp vec4 ftmpG;\n"
"    highp vec4 ftmpB;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord);\n"
"            ftmpG = textureProj(extraSampler1, coord);\n"
"            ftmpB = textureProj(extraSampler2, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProj(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProj(extraSampler2, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProjLod(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProjLod(extraSampler2, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz);\n"
"            ftmpG = texture(extraSampler1, coord.xyz);\n"
"            ftmpB = texture(extraSampler2, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = texture(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = texture(extraSampler2, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = textureLod(extraSampler2, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return ivec4(_txcvt_RGBA8_to_I32(ftmpR), _txcvt_RGBA8_to_I32(ftmpG),\n"
"                 _txcvt_RGBA8_to_I32(ftmpB), 1);\n"
"}\n"
"\n"
"highp ivec4 _txcvt_G32R32I_2_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1\n"
"    )\n"
"{\n"
"    highp vec4 ftmpR;\n"
"    highp vec4 ftmpG;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord);\n"
"            ftmpG = textureProj(extraSampler1, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProj(extraSampler1, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProjLod(extraSampler1, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz);\n"
"            ftmpG = texture(extraSampler1, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = texture(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return ivec4(_txcvt_RGBA8_to_I32(ftmpR), _txcvt_RGBA8_to_I32(ftmpG), 0, 1);\n"
"}\n"
"\n"
"highp uvec4 _txcvt_A32B32G32R32UI_4_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1,\n"
"    sampler3D extraSampler2,\n"
"    sampler3D extraSampler3\n"
"    )\n"
"{\n"
"    highp vec4 ftmpR;\n"
"    highp vec4 ftmpG;\n"
"    highp vec4 ftmpB;\n"
"    highp vec4 ftmpA;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord);\n"
"            ftmpG = textureProj(extraSampler1, coord);\n"
"            ftmpB = textureProj(extraSampler2, coord);\n"
"            ftmpA = textureProj(extraSampler3, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProj(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProj(extraSampler2, coord, lod_bias);\n"
"            ftmpA = textureProj(extraSampler3, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProjLod(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProjLod(extraSampler2, coord, lod_bias);\n"
"            ftmpA = textureProjLod(extraSampler3, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz);\n"
"            ftmpG = texture(extraSampler1, coord.xyz);\n"
"            ftmpB = texture(extraSampler2, coord.xyz);\n"
"            ftmpA = texture(extraSampler3, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = texture(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = texture(extraSampler2, coord.xyz, lod_bias);\n"
"            ftmpA = texture(extraSampler3, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = textureLod(extraSampler2, coord.xyz, lod_bias);\n"
"            ftmpA = textureLod(extraSampler3, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return uvec4(_txcvt_RGBA8_to_UI32(ftmpR), _txcvt_RGBA8_to_UI32(ftmpG),\n"
"                 _txcvt_RGBA8_to_UI32(ftmpB), _txcvt_RGBA8_to_UI32(ftmpA));\n"
"}\n"
"\n"
"highp uvec4 _txcvt_B32G32R32UI_3_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1,\n"
"    sampler3D extraSampler2\n"
"    )\n"
"{\n"
"    highp vec4 ftmpR;\n"
"    highp vec4 ftmpG;\n"
"    highp vec4 ftmpB;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord);\n"
"            ftmpG = textureProj(extraSampler1, coord);\n"
"            ftmpB = textureProj(extraSampler2, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProj(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProj(extraSampler2, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProjLod(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProjLod(extraSampler2, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz);\n"
"            ftmpG = texture(extraSampler1, coord.xyz);\n"
"            ftmpB = texture(extraSampler2, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = texture(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = texture(extraSampler2, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = textureLod(extraSampler2, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return uvec4(_txcvt_RGBA8_to_UI32(ftmpR), _txcvt_RGBA8_to_UI32(ftmpG),\n"
"                 _txcvt_RGBA8_to_UI32(ftmpB), 1u);\n"
"}\n"
"\n"
"highp uvec4 _txcvt_G32R32UI_2_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1\n"
"    )\n"
"{\n"
"    highp vec4 ftmpR;\n"
"    highp vec4 ftmpG;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord);\n"
"            ftmpG = textureProj(extraSampler1, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProj(extraSampler1, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProjLod(extraSampler1, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz);\n"
"            ftmpG = texture(extraSampler1, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = texture(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return uvec4(_txcvt_RGBA8_to_UI32(ftmpR), _txcvt_RGBA8_to_UI32(ftmpG), 0u, 1u);\n"
"}\n"
"\n"
"highp vec4 _txcvt_X32B32G32R32F_4_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1,\n"
"    sampler3D extraSampler2,\n"
"    sampler3D extraSampler3\n"
"    )\n"
"{\n"
"    highp vec4 ftmpR;\n"
"    highp vec4 ftmpG;\n"
"    highp vec4 ftmpB;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord);\n"
"            ftmpG = textureProj(extraSampler1, coord);\n"
"            ftmpB = textureProj(extraSampler2, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProj(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProj(extraSampler2, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpG = textureProjLod(extraSampler1, coord, lod_bias);\n"
"            ftmpB = textureProjLod(extraSampler2, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz);\n"
"            ftmpG = texture(extraSampler1, coord.xyz);\n"
"            ftmpB = texture(extraSampler2, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpR = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = texture(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = texture(extraSampler2, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpR = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpG = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"            ftmpB = textureLod(extraSampler2, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return vec4(_txcvt_RGBA8_to_F32(ftmpR), _txcvt_RGBA8_to_F32(ftmpG),\n"
"                 _txcvt_RGBA8_to_F32(ftmpB), 1.0);\n"
"}\n"
"\n"
"mediump vec4 _txcvt_A16B16G16R16F_2_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1\n"
"    )\n"
"{\n"
"    mediump vec4 ftmpRG;\n"
"    mediump vec4 ftmpBA;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpRG = textureProj(origSampler, coord);\n"
"            ftmpBA = textureProj(extraSampler1, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpRG = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpBA = textureProj(extraSampler1, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpRG = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpBA = textureProjLod(extraSampler1, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpRG = texture(origSampler, coord.xyz);\n"
"            ftmpBA = texture(extraSampler1, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpRG = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpBA = texture(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpRG = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpBA = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return vec4(_txcvt_RGBA8_to_F16_vec2(ftmpRG), _txcvt_RGBA8_to_F16_vec2(ftmpBA));\n"
"}\n"
"\n"
"mediump vec4 _txcvt_B16G16R16F_2_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1\n"
"    )\n"
"{\n"
"    mediump vec4 color;\n"
"    color = _txcvt_A16B16G16R16F_2_A8R8G8B8(origSampler, coord, mod, lod_bias, type, extraSampler1);\n"
"    color.a = 1.0;\n"
"    return color;\n"
"}\n"
"\n"
"highp ivec4 _txcvt_A16B16G16R16I_2_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1\n"
"    )\n"
"{\n"
"    highp vec4 ftmpRG;\n"
"    highp vec4 ftmpBA;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpRG = textureProj(origSampler, coord);\n"
"            ftmpBA = textureProj(extraSampler1, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpRG = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpBA = textureProj(extraSampler1, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpRG = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpBA = textureProjLod(extraSampler1, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpRG = texture(origSampler, coord.xyz);\n"
"            ftmpBA = texture(extraSampler1, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpRG = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpBA = texture(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpRG = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpBA = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return ivec4(_txcvt_RGBA8_to_I16_vec2(ftmpRG), _txcvt_RGBA8_to_I16_vec2(ftmpBA));\n"
"}\n"
"\n"
"highp ivec4 _txcvt_B16G16R16I_2_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1\n"
"    )\n"
"{\n"
"    highp ivec4 color;\n"
"    color = _txcvt_A16B16G16R16I_2_A8R8G8B8(origSampler, coord, mod, lod_bias, type, extraSampler1);\n"
"    color.a = 1;\n"
"    return color;\n"
"}\n"
"\n"
"highp ivec4 _txcvt_G16R16I_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return ivec4(_txcvt_RGBA8_to_I16_vec2(ftmp), 0, 1);\n"
"}\n"
"\n"
"highp uvec4 _txcvt_A16B16G16R16UI_2_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1\n"
"    )\n"
"{\n"
"    highp vec4 ftmpRG;\n"
"    highp vec4 ftmpBA;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpRG = textureProj(origSampler, coord);\n"
"            ftmpBA = textureProj(extraSampler1, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpRG = textureProj(origSampler, coord, lod_bias);\n"
"            ftmpBA = textureProj(extraSampler1, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpRG = textureProjLod(origSampler, coord, lod_bias);\n"
"            ftmpBA = textureProjLod(extraSampler1, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmpRG = texture(origSampler, coord.xyz);\n"
"            ftmpBA = texture(extraSampler1, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmpRG = texture(origSampler, coord.xyz, lod_bias);\n"
"            ftmpBA = texture(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmpRG = textureLod(origSampler, coord.xyz, lod_bias);\n"
"            ftmpBA = textureLod(extraSampler1, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return uvec4(_txcvt_RGBA8_to_UI16_vec2(ftmpRG), _txcvt_RGBA8_to_UI16_vec2(ftmpBA));\n"
"}\n"
"\n"
"highp uvec4 _txcvt_B16G16R16UI_2_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1\n"
"    )\n"
"{\n"
"    highp uvec4 color;\n"
"    color = _txcvt_A16B16G16R16UI_2_A8R8G8B8(origSampler, coord, mod, lod_bias, type, extraSampler1);\n"
"    color.a = 1u;\n"
"    return color;\n"
"}\n"
"\n"
"highp uvec4 _txcvt_G16R16UI_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return uvec4(_txcvt_RGBA8_to_UI16_vec2(ftmp), 0u, 1u);\n"
"}\n"
"\n"
"mediump vec4 _txcvt_X16B16G16R16F_2_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1\n"
"    )\n"
"{\n"
"    mediump vec4 color;\n"
"    color = _txcvt_A16B16G16R16F_2_A8R8G8B8(\n"
"                    origSampler,\n"
"                    coord,\n"
"                    mod,\n"
"                    lod_bias,\n"
"                    type,\n"
"                    extraSampler1\n"
"                    );\n"
"    color.a = 1.0;\n"
"    return color;\n"
"}\n"
"\n"
"mediump vec4 _txcvt_S8D32F_2_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    sampler3D extraSampler1\n"
"    )\n"
"{\n"
"    mediump vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return vec4(_txcvt_RGBA8_to_F32(ftmp), 0.0, 0.0, 1.0);\n"
"}\n"
"\n"
"mediump vec4 _txcvt_G16R16F_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    mediump vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return vec4(_txcvt_RGBA8_to_F16_vec2(ftmp), 0.0, 1.0);\n"
"}\n"
"\n"
"highp uvec4 _txcvt_A2B10G10R10UI_1_A8R8G8B8(\n"
"    sampler3D origSampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type\n"
"    )\n"
"{\n"
"    highp vec4 ftmp;\n"
"    if (type == TYPE_PROJ)\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = textureProj(origSampler, coord, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureProjLod(origSampler, coord, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            ftmp = texture(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            /* MOD_LODBIAS */\n"
"            ftmp = textureLod(origSampler, coord.xyz, lod_bias);\n"
"        }\n"
"    }\n"
"    return _txcvt_RGBA8_to_R10G10B10A2UI(ftmp);\n"
"}\n"
"\n";

static gctSTRING gcLibTexFormatConvertHalti0_TexPcfCvtFunc =
"float _txpcfcvt_2DCoord_all(\n"
"    sampler2D sampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    int compareMode,\n"
"    int compareFunc,\n"
"    int convertD32F\n"
"    )\n"
"{\n"
"    vec4  color;\n"
"    float ref;\n"
"    float result;\n"
"    if (type == 1)\n"
"    {\n"
"        vec4 projCoord = coord / coord.w;\n"
"        ref = projCoord.z;\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color = texture(sampler, projCoord.xy);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color = texture(sampler, projCoord.xy, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            color = textureLod(sampler, projCoord.xy, lod_bias);\n"
"        }\n"
"    }\n"
"    else\n"
"    {\n"
"        ref = coord.z;\n"
"        if (mod == MOD_NONE)\n"
"        {\n"
"            color = texture(sampler, coord.xy);\n"
"        }\n"
"        else if (mod == MOD_BIAS)\n"
"        {\n"
"            color = texture(sampler, coord.xy, lod_bias);\n"
"        }\n"
"        else\n"
"        {\n"
"            color = textureLod(sampler, coord.xy, lod_bias);\n"
"        }\n"
"    }\n"
"    if (convertD32F != 0)\n"
"    {\n"
"        color.x = _txcvt_RGBA8_to_F32(color);\n"
"    }\n"
"    else \n"
"    {\n"
"        /* for non D32F format, need to do clamp for reference depth value: ES3.0 spec 3.8.15  */\n"
"        ref = clamp(ref, 0.0, 1.0);\n"
"    }\n"
"    if (compareMode == 1)\n"
"    {\n"
"        result = color.x;\n"
"    }\n"
"    else\n"
"    {\n"
"        if (compareFunc == 1)\n"
"        {\n"
"            result = 0.0f;\n"
"        }\n"
"        else if (compareFunc == 2)\n"
"        {\n"
"            result = (ref != color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 3)\n"
"        {\n"
"            result = (ref < color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 4)\n"
"        {\n"
"            result = (ref <= color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 5)\n"
"        {\n"
"            result = (ref == color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 6)\n"
"        {\n"
"            result = (ref > color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 7)\n"
"        {\n"
"            result = (ref >= color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else\n"
"        {\n"
"            result = 1.0f;\n"
"        }\n"
"    }\n"
"    return result;\n"
"}\n"
"\n"
"float _txpcfcvt_3DCoord_all(\n"
"    sampler3D sampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    int compareMode,\n"
"    int compareFunc,\n"
"    int convertD32F\n"
"    )\n"
"{\n"
"    vec4  color;\n"
"    float result;\n"
"    if (mod == MOD_NONE)\n"
"    {\n"
"        color = texture(sampler, coord.xyz);\n"
"    }\n"
"    else if (mod == MOD_BIAS)\n"
"    {\n"
"        color = texture(sampler, coord.xyz, lod_bias);\n"
"    }\n"
"    else\n"
"    {\n"
"        color = textureLod(sampler, coord.xyz, lod_bias);\n"
"    }\n"
"    if (convertD32F != 0)\n"
"    {\n"
"        color.x = _txcvt_RGBA8_to_F32(color);\n"
"    }\n"
"    else \n"
"    {\n"
"        /* for non D32F format, need to do clamp for reference depth value: ES3.0 spec 3.8.15  */\n"
"        coord.w = clamp(coord.w, 0.0, 1.0);\n"
"    }\n"
"    if (compareMode == 1)\n"
"    {\n"
"        result = color.x;\n"
"    }\n"
"    else\n"
"    {\n"
"        if (compareFunc == 1)\n"
"        {\n"
"            result = 0.0f;\n"
"        }\n"
"        else if (compareFunc == 2)\n"
"        {\n"
"            result = (coord.w != color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 3)\n"
"        {\n"
"            result = (coord.w < color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 4)\n"
"        {\n"
"            result = (coord.w <= color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 5)\n"
"        {\n"
"            result = (coord.w == color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 6)\n"
"        {\n"
"            result = (coord.w > color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else if (compareFunc == 7)\n"
"        {\n"
"            result = (coord.w >= color.x) ? 1.0f : 0.0f;\n"
"        }\n"
"        else\n"
"        {\n"
"            result = 1.0f;\n"
"        }\n"
"    }\n"
"    return result;\n"
"}\n"
"\n"
"float _txpcfcvt_2DCoord(\n"
"    sampler2D sampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    int compareMode,\n"
"    int compareFunc\n"
"    )\n"
"{\n"
"    return _txpcfcvt_2DCoord_all(sampler,\n"
"                                 coord,\n"
"                                 mod,\n"
"                                 lod_bias,\n"
"                                 type,\n"
"                                 compareMode,\n"
"                                 compareFunc,\n"
"                                 0 /* no convertD32F */);\n"
"}\n"
"\n"
"float _txpcfcvt_3DCoord(\n"
"    sampler3D sampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    int compareMode,\n"
"    int compareFunc\n"
"    )\n"
"{\n"
"    return _txpcfcvt_3DCoord_all(sampler,\n"
"                                 coord,\n"
"                                 mod,\n"
"                                 lod_bias,\n"
"                                 type,\n"
"                                 compareMode,\n"
"                                 compareFunc,\n"
"                                 0 /* no convertD32F */);\n"
"}\n"
"\n"
"float _txpcfcvt_D32F_2DCoord(\n"
"    sampler2D sampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    int compareMode,\n"
"    int compareFunc\n"
"    )\n"
"{\n"
"    return _txpcfcvt_2DCoord_all(sampler,\n"
"                                 coord,\n"
"                                 mod,\n"
"                                 lod_bias,\n"
"                                 type,\n"
"                                 compareMode,\n"
"                                 compareFunc,\n"
"                                 1 /* convertD32F */);\n"
"}\n"
"\n"
"float _txpcfcvt_D32F_3DCoord(\n"
"    sampler3D sampler,\n"
"    vec4 coord,\n"
"    int mod,\n"
"    float lod_bias,\n"
"    int type,\n"
"    int compareMode,\n"
"    int compareFunc\n"
"    )\n"
"{\n"
"    return _txpcfcvt_3DCoord_all(sampler,\n"
"                                 coord,\n"
"                                 mod,\n"
"                                 lod_bias,\n"
"                                 type,\n"
"                                 compareMode,\n"
"                                 compareFunc,\n"
"                                 1 /* convertD32F */);\n"
"}\n"
"\n";

static gctSTRING gcLibTexFormatConvertHalti0_OutputCvtUnifiedFunc =
"highp vec4 _outputcvt_R32UI_to_ARGB8(highp uint r32ui)\n"
"{\n"
"    vec4 val;\n"
"    val.x  = float((r32ui >> 16) & 0xffu)/_8BITS_MAX;\n"
"    val.y  = float((r32ui >> 8 ) & 0xffu)/_8BITS_MAX;\n"
"    val.z  = float((r32ui      ) & 0xffu)/_8BITS_MAX;\n"
"    val.w  = float((r32ui >> 24) & 0xffu)/_8BITS_MAX;\n"
"    return val;\n"
"}\n"
"\n"
"highp vec4 _outputcvt_R32I_to_ARGB8(highp int r32i)\n"
"{\n"
"    vec4 val;\n"
"    val.x  = float((r32i >> 16) & 0xff)/_8BITS_MAX;\n"
"    val.y  = float((r32i >> 8 ) & 0xff)/_8BITS_MAX;\n"
"    val.z  = float((r32i      ) & 0xff)/_8BITS_MAX;\n"
"    val.w  = float((r32i >> 24) & 0xff)/_8BITS_MAX;\n"
"    return val;\n"
"}\n"
"\n"
"highp vec4 _outputcvt_RG16UI_to_ARGB8(highp uvec2 r16uvec2)\n"
"{\n"
"    vec4 val;\n"
"    highp uint r32ui = (r16uvec2.x & 0xffffu) | ((r16uvec2.y & 0xffffu) << 16);\n"
"    val.x  = float((r32ui >> 16) & 0xffu)/_8BITS_MAX;\n"
"    val.y  = float((r32ui >> 8 ) & 0xffu)/_8BITS_MAX;\n"
"    val.z  = float((r32ui      ) & 0xffu)/_8BITS_MAX;\n"
"    val.w  = float((r32ui >> 24) & 0xffu)/_8BITS_MAX;\n"
"    return val;\n"
"}\n"
"\n"
"highp vec4 _outputcvt_RG16I_to_ARGB8(highp ivec2 r16ivec2)\n"
"{\n"
"    vec4 val;\n"
"    val.x  = float((r16ivec2.y     ) & 0xff) / _8BITS_MAX;\n"
"    val.y  = float((r16ivec2.x >> 8) & 0xff) / _8BITS_MAX;\n"
"    val.z  = float((r16ivec2.x     ) & 0xff) / _8BITS_MAX;\n"
"    val.w  = float((r16ivec2.y >> 8) & 0xff) / _8BITS_MAX;\n"
"    return val;\n"
"}\n"
"\n"
"highp vec4 _outputcvt_R16UI_to_ARGB4(highp uint r16ui)\n"
"{\n"
"    vec4 val;\n"
"    val.x  = float((r16ui >> 8 ) & 0xfu)/_4BITS_MAX;\n"
"    val.y  = float((r16ui >> 4 ) & 0xfu)/_4BITS_MAX;\n"
"    val.z  = float((r16ui      ) & 0xfu)/_4BITS_MAX;\n"
"    val.w  = float((r16ui >> 12) & 0xfu)/_4BITS_MAX;\n"
"    return val;\n"
"}\n"
"\n"
"highp vec4 _outputcvt_R16I_to_ARGB4(highp int r16i)\n"
"{\n"
"    vec4 val;\n"
"    val.x  = float((r16i >> 8 ) & 0xf)/_4BITS_MAX;\n"
"    val.y  = float((r16i >> 4 ) & 0xf)/_4BITS_MAX;\n"
"    val.z  = float((r16i      ) & 0xf)/_4BITS_MAX;\n"
"    val.w  = float((r16i >> 12) & 0xf)/_4BITS_MAX;\n"
"    return val;\n"
"}\n"
"\n";

static gctSTRING gcLibTexFormatConvertHalti0_OutputCvtFunc =
"highp vec4 _outputcvt_R8_1_X8R8G8B8(highp vec4 val)\n"
"{\n"
"    return vec4(val.x, 0.0, 0.0, 1.0);\n"
"}\n"
"highp vec4 _outputcvt_G8R8_1_X8R8G8B8(highp vec4 val)\n"
"{\n"
"    return vec4(val.x, val.y, 0.0, 1.0);\n"
"}\n"
"mediump vec4 _outputcvt_R32UI_1_A8R8G8B8(highp uvec4 uintval)\n"
"{\n"
"    return _outputcvt_R32UI_to_ARGB8(uintval.x);\n"
"}\n"
"\n"
"mediump vec4 _outputcvt_R32I_1_A8R8G8B8(highp ivec4 intval)\n"
"{\n"
"    return _outputcvt_R32I_to_ARGB8(intval.x);\n"
"}\n"
"\n"
"mediump vec4[2] _outputcvt_A8B12G12R12_2_A8R8G8B8(highp vec4 outval)\n"
"{\n"
"    vec4 val[2];\n"
"    ivec3 _12bit_val;\n"
"    _12bit_val = ivec3(outval.xyz * _12BITS_MAX);\n"
"    val[0].x  = float((_12bit_val.x >> 4) & 0xf0)/_8BITS_MAX; /* upper 4 bits (0xF0) */\n"
"    val[0].y  = float((_12bit_val.y >> 4) & 0xf0)/_8BITS_MAX; /* upper 4 bits (0xF0) */\n"
"    val[0].z  = float((_12bit_val.z >> 4) & 0xf0)/_8BITS_MAX; /* upper 4 bits (0xF0) */\n"
"    val[0].w  = outval.w;                                     /* copy alpha */\n"
"    val[1].x  = float(_12bit_val.x & 0xff)/_8BITS_MAX;        /* lower 8 bits (0xFF) */\n"
"    val[1].y  = float(_12bit_val.y & 0xff)/_8BITS_MAX;        /* lower 8 bits (0xFF) */\n"
"    val[1].z  = float(_12bit_val.z & 0xff)/_8BITS_MAX;        /* lower 8 bits (0xFF) */\n"
"    val[1].w  = outval.w;                                     /* copy alpha */\n"
"    return val;\n"
"}\n"
"\n"
"highp vec4 _outputcvt_R16UI_1_A4R4G4B4(highp uvec4 uintval)\n"
"{\n"
"    return _outputcvt_R16UI_to_ARGB4(uintval.x & 0xffffu);\n"
"}\n"
"\n"
"highp vec4 _outputcvt_R16I_1_A4R4G4B4(highp ivec4 intval)\n"
"{\n"
"    return _outputcvt_R16I_to_ARGB4(intval.x & 0xffff);\n"
"}\n"
"\n"
"highp vec4 _outputcvt_R8UI_1_A4R4G4B4(highp uvec4 uintval)\n"
"{\n"
"    vec4 fret = _outputcvt_R16UI_to_ARGB4(uintval.x & 0xffu);\n"
"    fret.w = 1.0;\n"
"    return fret;\n"
"}\n"
"\n"
"highp vec4 _outputcvt_R8I_1_A4R4G4B4(highp ivec4 intval)\n"
"{\n"
"    vec4 fret = _outputcvt_R16I_to_ARGB4(intval.x & 0xff);\n"
"    fret.w = 1.0;\n"
"    return fret;\n"
"}\n"
"\n"
"highp vec4 _outputcvt_A2B10G10R10UI_1_A8R8G8B8(highp uvec4 uintval)\n"
"{\n"
"    uint utmp = (uintval.x & 0x3ffu)         | ((uintval.y & 0x3ffu) << 10) |\n"
"                ((uintval.z & 0x3ffu) << 20) | ((uintval.w & 0x3u  ) << 30);\n"
"    return _outputcvt_R32UI_to_ARGB8(utmp);\n"
"}\n"
"\n"
"highp vec4[4] _outputcvt_A32B32G32R32UI_4_A8R8G8B8(highp uvec4 inval)\n"
"{\n"
"    vec4[4] ftmp;\n"
"    ftmp[0] = _outputcvt_R32UI_to_ARGB8(inval.x);\n"
"    ftmp[1] = _outputcvt_R32UI_to_ARGB8(inval.y);\n"
"    ftmp[2] = _outputcvt_R32UI_to_ARGB8(inval.z);\n"
"    ftmp[3] = _outputcvt_R32UI_to_ARGB8(inval.w);\n"
"    return ftmp;\n"
"}\n"
"\n"
"highp vec4[4] _outputcvt_A32B32G32R32I_4_A8R8G8B8(highp ivec4 inval)\n"
"{\n"
"    vec4[4] ftmp;\n"
"    ftmp[0] = _outputcvt_R32I_to_ARGB8(inval.x);\n"
"    ftmp[1] = _outputcvt_R32I_to_ARGB8(inval.y);\n"
"    ftmp[2] = _outputcvt_R32I_to_ARGB8(inval.z);\n"
"    ftmp[3] = _outputcvt_R32I_to_ARGB8(inval.w);\n"
"    return ftmp;\n"
"}\n"
"\n"
"highp vec4[2] _outputcvt_A16B16G16R16UI_2_A8R8G8B8(highp uvec4 inval)\n"
"{\n"
"    vec4[2] ftmp;\n"
"    ftmp[0] = _outputcvt_RG16UI_to_ARGB8(inval.xy);\n"
"    ftmp[1] = _outputcvt_RG16UI_to_ARGB8(inval.zw);\n"
"    return ftmp;\n"
"}\n"
"\n"
"highp vec4[2] _outputcvt_A16B16G16R16I_2_A8R8G8B8(highp ivec4 inval)\n"
"{\n"
"    vec4[2] ftmp;\n"
"    ftmp[0] = _outputcvt_RG16I_to_ARGB8(inval.xy);\n"
"    ftmp[1] = _outputcvt_RG16I_to_ARGB8(inval.zw);\n"
"    return ftmp;\n"
"}\n"
"\n"
"highp vec4 _outputcvt_A8B8G8R8UI_1_A8R8G8B8(highp uvec4 inval)\n"
"{\n"
"    vec4 ftmp;\n"
"    ftmp.x = float(inval.x & 0xffu)/_8BITS_MAX;\n"
"    ftmp.y = float(inval.y & 0xffu)/_8BITS_MAX;\n"
"    ftmp.z = float(inval.z & 0xffu)/_8BITS_MAX;\n"
"    ftmp.w = float(inval.w & 0xffu)/_8BITS_MAX;\n"
"    return ftmp;\n"
"}\n"
"\n"
"highp vec4 _outputcvt_A8B8G8R8I_1_A8R8G8B8(highp ivec4 inval)\n"
"{\n"
"    vec4 ftmp;\n"
"    ftmp.x = float(inval.x & 0x000000ff)/_8BITS_MAX;\n"
"    ftmp.y = float(inval.y & 0x000000ff)/_8BITS_MAX;\n"
"    ftmp.z = float(inval.z & 0x000000ff)/_8BITS_MAX;\n"
"    ftmp.w = float(inval.w & 0x000000ff)/_8BITS_MAX;\n"
"    return ftmp;\n"
"}\n"
"\n"
"highp vec4[2] _outputcvt_G32R32UI_2_A8R8G8B8(highp uvec4 inval)\n"
"{\n"
"    vec4[2] ftmp;\n"
"    ftmp[0] = _outputcvt_R32UI_to_ARGB8(inval.x);\n"
"    ftmp[1] = _outputcvt_R32UI_to_ARGB8(inval.y);\n"
"    return ftmp;\n"
"}\n"
"\n"
"highp vec4[2] _outputcvt_G32R32I_2_A8R8G8B8(highp ivec4 inval)\n"
"{\n"
"    vec4[2] ftmp;\n"
"    ftmp[0] = _outputcvt_R32I_to_ARGB8(inval.x);\n"
"    ftmp[1] = _outputcvt_R32I_to_ARGB8(inval.y);\n"
"    return ftmp;\n"
"}\n"
"\n"
"highp vec4 _outputcvt_G16R16UI_1_A8R8G8B8(highp uvec4 inval)\n"
"{\n"
"    return _outputcvt_RG16UI_to_ARGB8(inval.xy);\n"
"}\n"
"\n"
"highp vec4 _outputcvt_G16R16I_1_A8R8G8B8(highp ivec4 inval)\n"
"{\n"
"    return _outputcvt_RG16I_to_ARGB8(inval.xy);\n"
"}\n"
"\n"
"highp vec4 _outputcvt_G8R8UI_1_A4R4G4B4(highp uvec4 inval)\n"
"{\n"
"    uint utmp = (inval.x & 0xffu) | ((inval.y & 0xffu) << 8);\n"
"    return _outputcvt_R16UI_to_ARGB4(utmp);\n"
"}\n"
"\n"
"highp vec4 _outputcvt_G8R8I_1_A4R4G4B4(highp ivec4 inval)\n"
"{\n"
"    int itmp = (inval.x & 0xff) | ((inval.y & 0xff) << 8);\n"
"    return _outputcvt_R16I_to_ARGB4(itmp);\n"
"}\n"
"\n";

static gctSTRING gcLibTexFormatConvertHalti0_MainFunc =
"void main(void)\n"
"{\n"
"    vec4 fcolor1 = _txcvt_A32B32G32R32F_4_A8R8G8B8(gOrigSampler3D, vec4(texCoord3D, 1.0f), 0, 0.0, 0, gExtraSampler3D1, gExtraSampler3D2, gExtraSampler3D3);\n"
"    vec4 fcolor2 = _txcvt_A32B32G32R32F_4_A8R8G8B8(gOrigSampler3D, vec4(texCoord3D, 1.0f), 1, 0.0, 0, gExtraSampler3D1, gExtraSampler3D2, gExtraSampler3D3);\n"
"    vec4 fcolor3 = _txcvt_A32B32G32R32F_4_A8R8G8B8(gOrigSampler3D, vec4(texCoord3D, 1.0f), 2, 0.0, 0, gExtraSampler3D1, gExtraSampler3D2, gExtraSampler3D3);\n"
"    fragColor = fcolor1 * fcolor2  * fcolor3;\n"
"}" ;;

