/****************************************************************************
*
*    Copyright (c) 2005 - 2018 by Vivante Corp.  All rights reserved.
*
*    The material in this file is confidential and contains trade secrets
*    of Vivante Corporation. This is proprietary information owned by
*    Vivante Corporation. No part of this work may be disclosed,
*    reproduced, copied, transmitted, or used in any way for any purpose,
*    without the express written permission of Vivante Corporation.
*
*****************************************************************************/


#ifndef __gc_vsc_cl_builtin_lib_h_
#define __gc_vsc_cl_builtin_lib_h_

#undef _CL_LOCALLY_SET
#ifndef __BUILTIN_SHADER_LENGTH__
#define __BUILTIN_SHADER_LENGTH__ (65535 * 8)
#define _CL_LOCALLY_SET
#endif
#ifndef NL
#define NL "\n"
#endif

static gctSTRING gcCLLibHeader =
NL "/* Vivante OpenCL builtin library */"
NL;


static gctSTRING gcCLLibFunc_Extension =
NL "#pragma OPENCL EXTENSION  CL_VIV_asm : enable"
NL;

#if CompileInstrisicLibfromSrc
static gctSTRING gcCLLibRelational_Funcs_packed =
/* comment out as functionality is in HW */
NL
NL;
#else
static gctSTRING gcCLLibFMA_Func_fmaSupported =
"float _viv_fma_float(float a, float b, float c)\n"
"{\n"
"   float temp, result;\n"
"   _viv_asm(FMA_MUL, temp, a, b);\n"
"   _viv_asm(FMA_ADD, result, temp, c);\n"
"   return result;\n"
"}\n"
"float2 _viv_fma_float2(float2 a, float2 b, float2 c)\n"
"{\n"
"   float2 temp, result;\n"
"   _viv_asm(FMA_MUL, temp, a, b);\n"
"   _viv_asm(FMA_ADD, result, temp, c);\n"
"   return result;\n"
"}\n"
"float3 _viv_fma_float3(float3 a, float3 b, float3 c)\n"
"{\n"
"   float3 temp, result;\n"
"   _viv_asm(FMA_MUL, temp, a, b);\n"
"   _viv_asm(FMA_ADD, result, temp, c);\n"
"   return result;\n"
"}\n"
"float4 _viv_fma_float4(float4 a, float4 b, float4 c)\n"
"{\n"
"   float4 temp, result;\n"
"   _viv_asm(FMA_MUL, temp, a, b);\n"
"   _viv_asm(FMA_ADD, result, temp, c);\n"
"   return result;\n"
"}\n";

static gctSTRING gcCLLibASIN_ACOS_Funcs_Common =
"float _viv_asin_base_1(float a)\n"
"{\n"
"   float temp  = a * a;\n"
"   float result = a * (1.0004488056969831f+ temp*(0.15295127520390661f + temp* 0.13409603620943705f));\n"
"   return result;\n"
"}\n"
"float2 _viv_asin_base_2(float2 a)\n"
"{\n"
"   float2 temp  = a * a;\n"
"   float2 result = a * ((float2)(1.0004488056969831f) + temp*((float2)(0.15295127520390661f) + temp* (float2)(0.13409603620943705f)));\n"
"   return result;\n"
"}\n"
"float3 _viv_asin_base_3(float3 a)\n"
"{\n"
"   float3 temp  = a * a;\n"
"   float3 result = a * ((float3)(1.0004488056969831f)+ temp*((float3)(0.15295127520390661f) + temp* (float3)(0.13409603620943705f)));\n"
"   return result;\n"
"}\n"
"float4 _viv_asin_base_4(float4 a)\n"
"{\n"
"   float4 temp  = a * a;\n"
"   float4 result = a * ((float4)(1.0004488056969831f) + temp*((float4)(0.15295127520390661f) + temp* (float4)(0.13409603620943705f)));\n"
"   return result;\n"
"}\n";

static gctSTRING gcCLLibASIN_Funcs =
"float _viv_asin_float(float a)\n"
"{\n"
"   float result;\n"
"   if (fabs(a) < 0.7072f)\n"
"   {\n"
"       result = _viv_asin_base_1(a);\n"
"   } else {\n"
"       result = (3.14159265358979323846f/2.0f - _viv_asin_base_1(sqrt(1.0f - a * a))) * (signbit(a) ? -1.0 : 1.0);\n"
"   }\n"
"   return result;\n"
"}\n"
"float2 _viv_asin_float2(float2 a)\n"
"{\n"
"   float2 result, result1, result2;\n"
"   int2 sel = isless(fabs(a), (float2)(0.7072f));\n"
"   result1 = _viv_asin_base_2(a);\n"
"   result2 = (float2)(3.14159265358979323846f/2.0f) - _viv_asin_base_2(sqrt((float2)(1.0f) - a * a));\n"
"   result2 = as_float2(as_uint2(result2) | (signbit(a) << 31));\n"
"   if(sel.s0)\n"
"   {\n"
"       result.s0 = result1.s0;\n"
"   }\n"
"   else\n"
"   {\n"
"       result.s0 = result2.s0;\n"
"   }\n"
"   if(sel.s1)\n"
"   {\n"
"       result.s1 = result1.s1;\n"
"   }\n"
"   else\n"
"   {\n"
"       result.s1 = result2.s1;\n"
"   }\n"
"   return result;\n"
"}\n"
"float3 _viv_asin_float3(float3 a)\n"
"{\n"
"   float3 result, result1, result2;\n"
"   int3 sel = isless(fabs(a), (float3)(0.7072f));\n"
"   result1 = _viv_asin_base_3(a);\n"
"   result2 = (float3)(3.14159265358979323846f/2.0f) - _viv_asin_base_3(sqrt((float3)(1.0f) - a * a));\n"
"   result2 = as_float3(as_uint3(result3) | (signbit(a) << 31));\n"
"   if(sel.s0)\n"
"   {\n"
"       result.s0 = result1.s0;\n"
"   }\n"
"   else\n"
"   {\n"
"       result.s0 = result2.s0;\n"
"   }\n"
"   if(sel.s1)\n"
"   {\n"
"       result.s1 = result1.s1;\n"
"   }\n"
"   else\n"
"   {\n"
"       result.s1 = result2.s1;\n"
"   }\n"
"   if(sel.s2)\n"
"   {\n"
"       result.s2 = result1.s2;\n"
"   }\n"
"   else\n"
"   {\n"
"       result.s2 = result2.s2;\n"
"   }\n"
"   return result;\n"
"}\n"
"float4 _viv_asin_float4(float4 a)\n"
"{\n"
"   float4 result, result1, result2;\n"
"   int4 sel = isless(fabs(a), (float4)(0.7072f));\n"
"   result1 = _viv_asin_base_4(a);\n"
"   result2 = (float4)(3.14159265358979323846f/2.0f) - _viv_asin_base_4(sqrt((float4)(1.0f) - a * a));\n"
"   result2 = as_float4(as_uint4(result4) | (signbit(a) << 31));\n"
"   if(sel.s0)\n"
"   {\n"
"       result.s0 = result1.s0;\n"
"   }\n"
"   else\n"
"   {\n"
"       result.s0 = result2.s0;\n"
"   }\n"
"   if(sel.s1)\n"
"   {\n"
"       result.s1 = result1.s1;\n"
"   }\n"
"   else\n"
"   {\n"
"       result.s1 = result2.s1;\n"
"   }\n"
"   if(sel.s2)\n"
"   {\n"
"       result.s2 = result1.s2;\n"
"   }\n"
"   else\n"
"   {\n"
"       result.s2 = result2.s2;\n"
"   }\n"
"   if(sel.s3)\n"
"   {\n"
"       result.s3 = result1.s3;\n"
"   }\n"
"   else\n"
"   {\n"
"       result.s3 = result2.s3;\n"
"   }\n"
"   return result;\n"
"}\n"
"float8 _viv_asin_float8(float8 a)\n"
"{\n"
"   float8 result;\n"
"   result.s0123 = _viv_asin_float4(a.s0123);\n"
"   result.s4567 = _viv_asin_float4(a.s4567);\n"
"   return result;\n"
"}\n"
"float16 _viv_asin_float16(float16 a)\n"
"{\n"
"   float16 result;\n"
"   result.s01234567 = _viv_asin_float8(a.s01234567);\n"
"   result.s89abcdef = _viv_asin_float8(a.s89abcdef);\n"
"   return result;\n"
"}\n";

static gctSTRING gcCLLibASIN_Funcs_halti2 =
"float _viv_asin_float(float a)\n"
"{\n"
"   float result;\n"
"   float absolute = fabs(a);\n"
"   if(absolute > 1.0)\n"
"   {\n"
"       result = as_float(0x7fffffff);\n"
"   }\n"
"   else if(absolute == 1.0)\n"
"   {\n"
"       result = as_float(0x3fc90fdb | (as_uint(a) & 0x80000000));\n"
"   }\n"
"   else\n"
"   {\n"
"       if(absolute <= as_float(0x3f350b0f))\n"
"       {\n"
"           float square;\n"
"           _viv_asm(MUL!<rnd:RTZ>, square, a, a);\n"
"           _viv_asm(MUL!<rnd:RTZ>, result, square, as_float(0x3de3f893));\n"
"           _viv_asm(ADD!<rnd:RTZ>, result, result, as_float(0xbdbdac66));\n"
"           _viv_asm(MUL!<rnd:RTZ>, result, result, square);\n"
"           _viv_asm(ADD!<rnd:RTZ>, result, result, as_float(0x3d9da182));\n"
"           _viv_asm(MUL!<rnd:RTZ>, result, result, square);\n"
"           _viv_asm(ADD!<rnd:RTZ>, result, result, as_float(0x3c8645fd));\n"
"           _viv_asm(MUL!<rnd:RTZ>, result, result, square);\n"
"           _viv_asm(ADD!<rnd:RTZ>, result, result, as_float(0x3d3e78d9));\n"
"           _viv_asm(MUL!<rnd:RTZ>, result, result, square);\n"
"           _viv_asm(ADD!<rnd:RTZ>, result, result, as_float(0x3d995d3d));\n"
"           _viv_asm(MUL!<rnd:RTZ>, result, result, square);\n"
"           _viv_asm(ADD!<rnd:RTZ>, result, result, as_float(0x3e2aab4b));\n"
"           _viv_asm(MUL!<rnd:RTZ>, result, result, square);\n"
"           _viv_asm(ADD!<rnd:RTZ>, result, result, 1.0);\n"
"           _viv_asm(MUL!<rnd:RTZ>, result, a, result);\n"
"       }\n"
"       else\n"
"       {\n"
"           float oneMinorAbs;\n"
"           _viv_asm(ADD!<rnd:RTZ>, oneMinorAbs, 1.0, -absolute);\n"
"           float temp0;\n"
"           _viv_asm(MUL!<rnd:RTZ>, temp0, as_float(0x3b6a2228), oneMinorAbs);\n"
"           _viv_asm(ADD!<rnd:RTZ>, temp0, temp0, as_float(0x3bfaa371));\n"
"           _viv_asm(MUL!<rnd:RTZ>, temp0, temp0, oneMinorAbs);\n"
"           _viv_asm(ADD!<rnd:RTZ>, temp0, temp0, as_float(0x3cd97055));\n"
"           _viv_asm(MUL!<rnd:RTZ>, temp0, temp0, oneMinorAbs);\n"
"           _viv_asm(ADD!<rnd:RTZ>, temp0, temp0, as_float(0x3df15b6b));\n"
"           _viv_asm(MUL!<rnd:RTZ>, temp0, temp0, oneMinorAbs);\n"
"           _viv_asm(ADD!<rnd:RTZ>, temp0, temp0, as_float(0x3fb504f4));\n"
"           float temp1 = sqrt(oneMinorAbs);\n"
"           float temp2;\n"
"           _viv_asm(MUL!<rnd:RTZ>, temp2, temp1, temp1);\n"
"           _viv_asm(ADD!<rnd:RTZ>, temp2, temp2, -oneMinorAbs);\n"
"           float temp3;\n"
"           _viv_asm(MUL!<rnd:RTZ>, temp3, temp1, 2.0);\n"
"           _viv_asm(DIV, temp2, temp2, temp3);\n"
"           _viv_asm(ADD!<rnd:RTZ>, temp2, temp1, -temp2);\n"
"           _viv_asm(MULLO!<rnd:RTZ>, temp1, temp0, temp2);\n"
"           _viv_asm(MUL!<rnd:RTZ>, temp3, temp0, temp2);\n"
"           _viv_asm(MUL!<rnd:RTZ>, temp2, temp1, 2.0);\n"
"           _viv_asm(ADD!<rnd:RTZ>, temp2, temp3, temp2);\n"
"           _viv_asm(ADD!<rnd:RTZ>, temp2, as_float(0x3fc90fdb), -temp2);\n"
"           result = as_float((as_uint(temp2) & 0x7fffffff) | (as_uint(a) & 0x80000000));\n"
"       }\n"
"   }\n"
"   return result;\n"
"}\n"
"float2 _viv_asin_float2(float2 a)\n"
"{\n"
"   float2 result;\n"
"   result.s0 = _viv_asin_float(a.s0);\n"
"   result.s1 = _viv_asin_float(a.s1);\n"
"   return result;\n"
"}\n"
"float3 _viv_asin_float3(float3 a)\n"
"{\n"
"   float3 result;\n"
"   result.s0 = _viv_asin_float(a.s0);\n"
"   result.s1 = _viv_asin_float(a.s1);\n"
"   result.s2 = _viv_asin_float(a.s2);\n"
"   return result;\n"
"}\n"
"float4 _viv_asin_float4(float4 a)\n"
"{\n"
"   float4 result;\n"
"   result.s0 = _viv_asin_float(a.s0);\n"
"   result.s1 = _viv_asin_float(a.s1);\n"
"   result.s2 = _viv_asin_float(a.s2);\n"
"   result.s3 = _viv_asin_float(a.s3);\n"
"   return result;\n"
"}\n"
"float8 _viv_asin_float8(float8 a)\n"
"{\n"
"   float8 result;\n"
"   result.s0123 = _viv_asin_float4(a.s0123);\n"
"   result.s4567 = _viv_asin_float4(a.s4567);\n"
"   return result;\n"
"}\n"
"float16 _viv_asin_float16(float16 a)\n"
"{\n"
"   float16 result;\n"
"   result.s01234567 = _viv_asin_float8(a.s01234567);\n"
"   result.s89abcdef = _viv_asin_float8(a.s89abcdef);\n"
"   return result;\n"
"}\n";

static gctSTRING gcCLLibASIN_Funcs_halti5 =
"float _viv_asin_float(float a)\n"
"{\n"
"    float2 vec2Temp0;\n"
"    float floatTemp0, result;\n"
"    floatTemp0 = (1.0 - a) * (1.0 + a);\n"
"    floatTemp0 = sqrt(floatTemp0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, floatTemp0, floatTemp0);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x1);\n"
"    result = a * vec2Temp0.s0;\n"
"    return result;\n"
"}\n"
"float2 _viv_asin_float2(float2 a)\n"
"{\n"
"    float2 vec2Temp0, vec2Temp1;\n"
"    float2 vec2Temp2, result;\n"
"    vec2Temp2 = (1.0 - a) * (1.0 + a);\n"
"    vec2Temp2 = sqrt(vec2Temp2);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, vec2Temp2.s0, vec2Temp2.s0);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x1);\n"
"    _viv_asm(ARCTRIG0, vec2Temp1, vec2Temp2.s1, vec2Temp2.s1);\n"
"    _viv_asm(ARCTRIG1, vec2Temp1, vec2Temp1, 0x1);\n"
"    result = a * (float2)(vec2Temp0.s0, vec2Temp1.s0);\n"
"    return result;\n"
"}\n"
"float3 _viv_asin_float3(float3 a)\n"
"{\n"
"    float2 vec2Temp0, vec2Temp1, vec2Temp2;\n"
"    float3 vec3Temp0, result;\n"
"    vec3Temp0 = (1.0 - a) * (1.0 + a);\n"
"    vec3Temp0 = sqrt(vec3Temp0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, vec3Temp0.s0, vec3Temp0.s0);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x1);\n"
"    _viv_asm(ARCTRIG0, vec2Temp1, vec3Temp0.s1, vec3Temp0.s1);\n"
"    _viv_asm(ARCTRIG1, vec2Temp1, vec2Temp1, 0x1);\n"
"    _viv_asm(ARCTRIG0, vec2Temp2, vec3Temp0.s2, vec3Temp0.s2);\n"
"    _viv_asm(ARCTRIG1, vec2Temp2, vec2Temp2, 0x1);\n"
"    result = a * (float3)(vec2Temp0.s0, vec2Temp1.s0, vec2Temp2.s0);\n"
"    return result;\n"
"}\n"
"float4 _viv_asin_float4(float4 a)\n"
"{\n"
"    float2 vec2Temp0, vec2Temp1, vec2Temp2, vec2Temp3;\n"
"    float4 vec4Temp0, result;\n"
"    vec4Temp0 = (1.0 - a) * (1.0 + a);\n"
"    vec4Temp0 = sqrt(vec4Temp0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, vec4Temp0.s0, vec4Temp0.s0);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x1);\n"
"    _viv_asm(ARCTRIG0, vec2Temp1, vec4Temp0.s1, vec4Temp0.s1);\n"
"    _viv_asm(ARCTRIG1, vec2Temp1, vec2Temp1, 0x1);\n"
"    _viv_asm(ARCTRIG0, vec2Temp2, vec4Temp0.s2, vec4Temp0.s2);\n"
"    _viv_asm(ARCTRIG1, vec2Temp2, vec2Temp2, 0x1);\n"
"    _viv_asm(ARCTRIG0, vec2Temp3, vec4Temp0.s3, vec4Temp0.s3);\n"
"    _viv_asm(ARCTRIG1, vec2Temp3, vec2Temp3, 0x1);\n"
"    result = a * (float4)(vec2Temp0.s0, vec2Temp1.s0, vec2Temp2.s0, vec2Temp3.s0);\n"
"    return result;\n"
"}\n"
"float8 _viv_asin_float8(float8 a)\n"
"{\n"
"   float8 result;\n"
"   result.s0123 = _viv_asin_float4(a.s0123);\n"
"   result.s4567 = _viv_asin_float4(a.s4567);\n"
"   return result;\n"
"}\n"
"float16 _viv_asin_float16(float16 a)\n"
"{\n"
"   float16 result;\n"
"   result.s01234567 = _viv_asin_float8(a.s01234567);\n"
"   result.s89abcdef = _viv_asin_float8(a.s89abcdef);\n"
"   return result;\n"
"}\n";

static gctSTRING gcCLLibASIN_Funcs_halti5_fmaSupported =
"float _viv_fma_float(float a, float b, float c);\n"
"float _viv_asin_float(float a)\n"
"{\n"
"    float2 vec2Temp0;\n"
"    float floatTemp0, result;\n"
"    floatTemp0 = _viv_fma_float(a, -a, 1.0);\n"
"    floatTemp0 = sqrt(floatTemp0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, floatTemp0, floatTemp0);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x1);\n"
"    result = a * vec2Temp0.s0;\n"
"    return result;\n"
"}\n"
"float2 _viv_fma_float2(float2 a, float2 b, float2 c);\n"
"float2 _viv_asin_float2(float2 a)\n"
"{\n"
"    float2 vec2Temp0, vec2Temp1;\n"
"    float2 vec2Temp2, result;\n"
"    vec2Temp2 = _viv_fma_float2(a, -a, (float2)(1.0));\n"
"    vec2Temp2 = sqrt(vec2Temp2);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, vec2Temp2.s0, vec2Temp2.s0);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x1);\n"
"    _viv_asm(ARCTRIG0, vec2Temp1, vec2Temp2.s1, vec2Temp2.s1);\n"
"    _viv_asm(ARCTRIG1, vec2Temp1, vec2Temp1, 0x1);\n"
"    result = a * (float2)(vec2Temp0.s0, vec2Temp1.s0);\n"
"    return result;\n"
"}\n"
"float3 _viv_fma_float3(float3 a, float3 b, float3 c);\n"
"float3 _viv_asin_float3(float3 a)\n"
"{\n"
"    float2 vec2Temp0, vec2Temp1, vec2Temp2;\n"
"    float3 vec3Temp0, result;\n"
"    vec3Temp0 = _viv_fma_float3(a, -a, (float3)(1.0));\n"
"    vec3Temp0 = sqrt(vec3Temp0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, vec3Temp0.s0, vec3Temp0.s0);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x1);\n"
"    _viv_asm(ARCTRIG0, vec2Temp1, vec3Temp0.s1, vec3Temp0.s1);\n"
"    _viv_asm(ARCTRIG1, vec2Temp1, vec2Temp1, 0x1);\n"
"    _viv_asm(ARCTRIG0, vec2Temp2, vec3Temp0.s2, vec3Temp0.s2);\n"
"    _viv_asm(ARCTRIG1, vec2Temp2, vec2Temp2, 0x1);\n"
"    result = a * (float3)(vec2Temp0.s0, vec2Temp1.s0, vec2Temp2.s0);\n"
"    return result;\n"
"}\n"
"float4 _viv_fma_float4(float4 a, float4 b, float4 c);\n"
"float4 _viv_asin_float4(float4 a)\n"
"{\n"
"    float2 vec2Temp0, vec2Temp1, vec2Temp2, vec2Temp3;\n"
"    float4 vec4Temp0, result;\n"
"    vec4Temp0 = _viv_fma_float4(a, -a, (float4)(1.0));\n"
"    vec4Temp0 = sqrt(vec4Temp0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, vec4Temp0.s0, vec4Temp0.s0);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x1);\n"
"    _viv_asm(ARCTRIG0, vec2Temp1, vec4Temp0.s1, vec4Temp0.s1);\n"
"    _viv_asm(ARCTRIG1, vec2Temp1, vec2Temp1, 0x1);\n"
"    _viv_asm(ARCTRIG0, vec2Temp2, vec4Temp0.s2, vec4Temp0.s2);\n"
"    _viv_asm(ARCTRIG1, vec2Temp2, vec2Temp2, 0x1);\n"
"    _viv_asm(ARCTRIG0, vec2Temp3, vec4Temp0.s3, vec4Temp0.s3);\n"
"    _viv_asm(ARCTRIG1, vec2Temp3, vec2Temp3, 0x1);\n"
"    result = a * (float4)(vec2Temp0.s0, vec2Temp1.s0, vec2Temp2.s0, vec2Temp3.s0);\n"
"    return result;\n"
"}\n"
"float8 _viv_asin_float8(float8 a)\n"
"{\n"
"   float8 result;\n"
"   result.s0123 = _viv_asin_float4(a.s0123);\n"
"   result.s4567 = _viv_asin_float4(a.s4567);\n"
"   return result;\n"
"}\n"
"float16 _viv_asin_float16(float16 a)\n"
"{\n"
"   float16 result;\n"
"   result.s01234567 = _viv_asin_float8(a.s01234567);\n"
"   result.s89abcdef = _viv_asin_float8(a.s89abcdef);\n"
"   return result;\n"
"}\n";

static gctSTRING gcCLLibACOS_Funcs =
"float _viv_acos_float(float a)\n"
"{\n"
"   float result = 3.14159265358979323846f/2.0f - _viv_asin_float(a);\n"
"   return result;\n"
"}\n"
"float2 _viv_acos_float2(float2 a)\n"
"{\n"
"   float2 result = (float2)(3.14159265358979323846f/2.0f) -  _viv_asin_float2(a);\n"
"   return result;\n"
"}\n"
"float3 _viv_acos_float3(float3 a)\n"
"{\n"
"   float3 result = (float3)(3.14159265358979323846f/2.0f) -  _viv_asin_float3(a);\n"
"   return result;\n"
"}\n"
"float4 _viv_acos_float4(float4 a)\n"
"{\n"
"   float4 result = (float4)(3.14159265358979323846f/2.0f) -  _viv_asin_float4(a);\n"
"   return result;\n"
"}\n"
"float8 _viv_acos_float8(float8 a)\n"
"{\n"
"   float8 result;\n"
"   result.s0123 = _viv_acos_float4(a.s0123);\n"
"   result.s4567 = _viv_acos_float4(a.s4567);\n"
"   return result;\n"
"}\n"
"float16 _viv_acos_float16(float16 a)\n"
"{\n"
"   float16 result;\n"
"   result.s01234567 = _viv_acos_float8(a.s01234567);\n"
"   result.s89abcdef = _viv_acos_float8(a.s89abcdef);\n"
"   return result;\n"
"}\n";

static gctSTRING gcCLLibACOS_Funcs_halti2 =
"float _viv_acos_float(float a)\n"
"{\n"
"   float result;\n"
"   float absolute = fabs(a);\n"
"   if(absolute > 1.0)\n"
"   {\n"
"       result = as_float(0x7fffffff);\n"
"   }\n"
"   else if(a == 1.0)\n"
"   {\n"
"       result = 0.0;\n"
"   }\n"
"   else if(a == -1.0)\n"
"   {\n"
"       result = as_float(0x40490fdb);\n"
"   }\n"
"   else if(absolute <= as_float(0x3f350b0f))\n"
"   {\n"
"       float temp0, temp1;\n"
"       _viv_asm(MUL!<rnd:RTZ>, temp0, a, a);\n"
"       _viv_asm(MUL!<rnd:RTZ>, temp1, temp0, as_float(0x3de3f893));\n"
"       _viv_asm(ADD!<rnd:RTZ>, temp1, temp1, as_float(0xbdbdac66));\n"
"       _viv_asm(MUL!<rnd:RTZ>, temp1, temp1, temp0);\n"
"       _viv_asm(ADD!<rnd:RTZ>, temp1, temp1, as_float(0x3d9da182));\n"
"       _viv_asm(MUL!<rnd:RTZ>, temp1, temp1, temp0);\n"
"       _viv_asm(ADD!<rnd:RTZ>, temp1, temp1, as_float(0x3c8645fd));\n"
"       _viv_asm(MUL!<rnd:RTZ>, temp1, temp1, temp0);\n"
"       _viv_asm(ADD!<rnd:RTZ>, temp1, temp1, as_float(0x3d3e78d9));\n"
"       _viv_asm(MUL!<rnd:RTZ>, temp1, temp1, temp0);\n"
"       _viv_asm(ADD!<rnd:RTZ>, temp1, temp1, as_float(0x3d995d3d));\n"
"       _viv_asm(MUL!<rnd:RTZ>, temp1, temp1, temp0);\n"
"       _viv_asm(ADD!<rnd:RTZ>, temp1, temp1, as_float(0x3e2aab4b));\n"
"       _viv_asm(MUL!<rnd:RTZ>, temp1, temp1, temp0);\n"
"       _viv_asm(ADD!<rnd:RTZ>, temp0, temp1, 1.0);\n"
"       _viv_asm(MUL!<rnd:RTZ>, temp1, a, temp0);\n"
"       _viv_asm(ADD!<rnd:RTZ>, result, as_float(0x3fc90fdb), -temp1);\n"
"   }\n"
"   else\n"
"   {\n"
"       float temp0, temp1, temp2, temp3;\n"
"       _viv_asm(ADD!<rnd:RTZ>, temp0, 1.0, -absolute);\n"
"       _viv_asm(MUL!<rnd:RTZ>, temp1, temp0, as_float(0x3b6a2228));\n"
"       _viv_asm(ADD!<rnd:RTZ>, temp1, temp1, as_float(0x3bfaa371));\n"
"       _viv_asm(MUL!<rnd:RTZ>, temp1, temp0, temp1);\n"
"       _viv_asm(ADD!<rnd:RTZ>, temp1, temp1, as_float(0x3cd97055));\n"
"       _viv_asm(MUL!<rnd:RTZ>, temp1, temp0, temp1);\n"
"       _viv_asm(ADD!<rnd:RTZ>, temp1, temp1, as_float(0x3df15b6b));\n"
"       _viv_asm(MUL!<rnd:RTZ>, temp1, temp0, temp1);\n"
"       _viv_asm(ADD!<rnd:RTZ>, temp1, temp1, as_float(0x3fb504f4));\n"
"       temp2 = sqrt(temp0);\n"
"       _viv_asm(MUL!<rnd:RTZ>, temp3, temp2, temp2);\n"
"       _viv_asm(ADD!<rnd:RTZ>, temp0, temp3, -temp0);\n"
"       _viv_asm(MUL!<rnd:RTZ>, temp3, temp2, 2.0);\n"
"       _viv_asm(DIV, temp0, temp0, temp3);\n"
"       _viv_asm(ADD!<rnd:RTZ>, temp0, temp2, -temp0);\n"
"       _viv_asm(MULLO!<rnd:RTZ>, temp2, temp1, temp0);\n"
"       _viv_asm(MUL!<rnd:RTZ>, temp2, temp2, 2.0);\n"
"       _viv_asm(MUL!<rnd:RTZ>, temp1, temp0, temp1);\n"
"       _viv_asm(ADD!<rnd:RTZ>, result, temp1, temp2);\n"
"       if(a < 0.0)\n"
"       {\n"
"           _viv_asm(MUL!<rnd:RTZ>, result, result, -1.0);\n"
"           _viv_asm(ADD!<rnd:RTZ>, result, result, as_float(0x40490fdb));\n"
"       }\n"
"   }\n"
"   return result;\n"
"}\n"
"float2 _viv_acos_float2(float2 a)\n"
"{\n"
"   float2 result;\n"
"   result.s0 = _viv_acos_float(a.s0);\n"
"   result.s1 = _viv_acos_float(a.s1);\n"
"   return result;\n"
"}\n"
"float3 _viv_acos_float3(float3 a)\n"
"{\n"
"   float3 result;\n"
"   result.s01 = _viv_acos_float2(a.s01);\n"
"   result.s2 = _viv_acos_float(a.s2);\n"
"   return result;\n"
"}\n"
"float4 _viv_acos_float4(float4 a)\n"
"{\n"
"   float4 result;\n"
"   result.s01 = _viv_acos_float2(a.s01);\n"
"   result.s23 = _viv_acos_float2(a.s23);\n"
"   return result;\n"
"}\n"
"float8 _viv_acos_float8(float8 a)\n"
"{\n"
"   float8 result;\n"
"   result.s0123 = _viv_acos_float4(a.s0123);\n"
"   result.s4567 = _viv_acos_float4(a.s4567);\n"
"   return result;\n"
"}\n"
"float16 _viv_acos_float16(float16 a)\n"
"{\n"
"   float16 result;\n"
"   result.s01234567 = _viv_acos_float8(a.s01234567);\n"
"   result.s89abcdef = _viv_acos_float8(a.s89abcdef);\n"
"   return result;\n"
"}\n"
;

static gctSTRING gcCLLibACOS_Funcs_halti5 =
"float _viv_acos_float(float a)\n"
"{\n"
"    float2 vec2Temp0;\n"
"    float floatTemp0, floatTemp1, result;\n"
"    floatTemp0 = 1.0 + a;\n"
"    floatTemp1 = 1.0 - a;\n"
"    floatTemp0 = floatTemp0 * floatTemp1;\n"
"    floatTemp0 = sqrt(floatTemp0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, a, floatTemp0);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x0);\n"
"    result = floatTemp0 * vec2Temp0.s0 + vec2Temp0.s1;\n"
"    return result;\n"
"}\n"
"float2 _viv_acos_float2(float2 a)\n"
"{\n"
"    float2 vec2Temp0, vec2Temp1;\n"
"    float2 vec2Temp2, result;\n"
"    vec2Temp0 = (float2)(1.0) + a;\n"
"    vec2Temp1 = (float2)(1.0) - a;\n"
"    vec2Temp2 = vec2Temp0 * vec2Temp1;\n"
"    vec2Temp2 = sqrt(vec2Temp2);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, a.s0, vec2Temp2.s0);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp1, a.s1, vec2Temp2.s1);\n"
"    _viv_asm(ARCTRIG1, vec2Temp1, vec2Temp1, 0x0);\n"
"    result.s0 = vec2Temp2.s0 * vec2Temp0.s0 + vec2Temp0.s1;\n"
"    result.s1 = vec2Temp2.s1 * vec2Temp1.s0 + vec2Temp1.s1;\n"
"    return result;\n"
"}\n"
"float3 _viv_acos_float3(float3 a)\n"
"{\n"
"    float2 vec2Temp0, vec2Temp1, vec2Temp2;\n"
"    float3 vec3Temp0, vec3Temp1, result;\n"
"    vec3Temp0 = (float3)(1.0) + a;\n"
"    vec3Temp1 = (float3)(1.0) - a;\n"
"    vec3Temp0 = vec3Temp0 * vec3Temp1;\n"
"    vec3Temp0 = sqrt(vec3Temp0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, a.s0, vec3Temp0.s0);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp1, a.s1, vec3Temp0.s1);\n"
"    _viv_asm(ARCTRIG1, vec2Temp1, vec2Temp1, 0x0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp2, a.s2, vec3Temp0.s2);\n"
"    _viv_asm(ARCTRIG1, vec2Temp2, vec2Temp2, 0x0);\n"
"    result.s0 = vec3Temp0.s0 * vec2Temp0.s0 + vec2Temp0.s1;\n"
"    result.s1 = vec3Temp0.s1 * vec2Temp1.s0 + vec2Temp1.s1;\n"
"    result.s2 = vec3Temp0.s2 * vec2Temp2.s0 + vec2Temp2.s1;\n"
"    return result;\n"
"}\n"
"float4 _viv_acos_float4(float4 a)\n"
"{\n"
"    float2 vec2Temp0, vec2Temp1, vec2Temp2, vec2Temp3;\n"
"    float4 vec4Temp0, vec4Temp1, result;\n"
"    vec4Temp0 = (float4)(1.0) + a;\n"
"    vec4Temp1 = (float4)(1.0) - a;\n"
"    vec4Temp0 = vec4Temp0 * vec4Temp1;\n"
"    vec4Temp0 = sqrt(vec4Temp0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, a.s0, vec4Temp0.s0);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp1, a.s1, vec4Temp0.s1);\n"
"    _viv_asm(ARCTRIG1, vec2Temp1, vec2Temp1, 0x0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp2, a.s2, vec4Temp0.s2);\n"
"    _viv_asm(ARCTRIG1, vec2Temp2, vec2Temp2, 0x0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp3, a.s3, vec4Temp0.s3);\n"
"    _viv_asm(ARCTRIG1, vec2Temp3, vec2Temp3, 0x0);\n"
"    result.s0 = vec4Temp0.s0 * vec2Temp0.s0 + vec2Temp0.s1;\n"
"    result.s1 = vec4Temp0.s1 * vec2Temp1.s0 + vec2Temp1.s1;\n"
"    result.s2 = vec4Temp0.s2 * vec2Temp2.s0 + vec2Temp2.s1;\n"
"    result.s3 = vec4Temp0.s3 * vec2Temp3.s0 + vec2Temp3.s1;\n"
"    return result;\n"
"}\n"
"float8 _viv_acos_float8(float8 a)\n"
"{\n"
"   float8 result;\n"
"   result.s0123 = _viv_acos_float4(a.s0123);\n"
"   result.s4567 = _viv_acos_float4(a.s4567);\n"
"   return result;\n"
"}\n"
"float16 _viv_acos_float16(float16 a)\n"
"{\n"
"   float16 result;\n"
"   result.s01234567 = _viv_acos_float8(a.s01234567);\n"
"   result.s89abcdef = _viv_acos_float8(a.s89abcdef);\n"
"   return result;\n"
"}\n"
;

static gctSTRING gcCLLibACOS_Funcs_halti5_fmaSupported =
"float _viv_fma_float(float a, float b, float c);\n"
"float _viv_acos_float(float a)\n"
"{\n"
"    float2 vec2Temp0;\n"
"    float floatTemp0, result;\n"
"    floatTemp0 = _viv_fma_float(a, -a, 1.0);\n"
"    floatTemp0 = sqrt(floatTemp0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, a, floatTemp0);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x0);\n"
"    result = _viv_fma_float(floatTemp0, vec2Temp0.s0, vec2Temp0.s1);\n"
"    return result;\n"
"}\n"
"float2 _viv_fma_float2(float2 a, float2 b, float2 c);\n"
"float2 _viv_acos_float2(float2 a)\n"
"{\n"
"    float2 vec2Temp0, vec2Temp1;\n"
"    float2 vec2Temp2, result;\n"
"    vec2Temp2 = _viv_fma_float2(a, -a, (float2)(1.0));\n"
"    vec2Temp2 = sqrt(vec2Temp2);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, a.s0, vec2Temp2.s0);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp1, a.s1, vec2Temp2.s1);\n"
"    _viv_asm(ARCTRIG1, vec2Temp1, vec2Temp1, 0x0);\n"
"    result.s0 = _viv_fma_float(vec2Temp2.s0, vec2Temp0.s0, vec2Temp0.s1);\n"
"    result.s1 = _viv_fma_float(vec2Temp2.s1, vec2Temp1.s0, vec2Temp1.s1);\n"
"    return result;\n"
"}\n"
"float3 _viv_fma_float3(float3 a, float3 b, float3 c);\n"
"float3 _viv_acos_float3(float3 a)\n"
"{\n"
"    float2 vec2Temp0, vec2Temp1, vec2Temp2;\n"
"    float3 vec3Temp0, result;\n"
"    vec3Temp0 = _viv_fma_float3(a, -a, (float3)(1.0));\n"
"    vec3Temp0 = sqrt(vec3Temp0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, a.s0, vec3Temp0.s0);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp1, a.s1, vec3Temp0.s1);\n"
"    _viv_asm(ARCTRIG1, vec2Temp1, vec2Temp1, 0x0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp2, a.s2, vec3Temp0.s2);\n"
"    _viv_asm(ARCTRIG1, vec2Temp2, vec2Temp2, 0x0);\n"
"    result.s0 = _viv_fma_float(vec3Temp0.s0, vec2Temp0.s0, vec2Temp0.s1);\n"
"    result.s1 = _viv_fma_float(vec3Temp0.s1, vec2Temp1.s0, vec2Temp1.s1);\n"
"    result.s2 = _viv_fma_float(vec3Temp0.s2, vec2Temp2.s0, vec2Temp2.s1);\n"
"    return result;\n"
"}\n"
"float4 _viv_fma_float4(float4 a, float4 b, float4 c);\n"
"float4 _viv_acos_float4(float4 a)\n"
"{\n"
"    float2 vec2Temp0, vec2Temp1, vec2Temp2, vec2Temp3;\n"
"    float4 vec4Temp0, result;\n"
"    vec4Temp0 = _viv_fma_float4(a, -a, (float4)(1.0));\n"
"    vec4Temp0 = sqrt(vec4Temp0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, a.s0, vec4Temp0.s0);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp1, a.s1, vec4Temp0.s1);\n"
"    _viv_asm(ARCTRIG1, vec2Temp1, vec2Temp1, 0x0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp2, a.s2, vec4Temp0.s2);\n"
"    _viv_asm(ARCTRIG1, vec2Temp2, vec2Temp2, 0x0);\n"
"    _viv_asm(ARCTRIG0, vec2Temp3, a.s3, vec4Temp0.s3);\n"
"    _viv_asm(ARCTRIG1, vec2Temp3, vec2Temp3, 0x0);\n"
"    result.s0 = _viv_fma_float(vec4Temp0.s0, vec2Temp0.s0, vec2Temp0.s1);\n"
"    result.s1 = _viv_fma_float(vec4Temp0.s1, vec2Temp1.s0, vec2Temp1.s1);\n"
"    result.s2 = _viv_fma_float(vec4Temp0.s2, vec2Temp2.s0, vec2Temp2.s1);\n"
"    result.s3 = _viv_fma_float(vec4Temp0.s3, vec2Temp3.s0, vec2Temp3.s1);\n"
"    return result;\n"
"}\n"
"float8 _viv_acos_float8(float8 a)\n"
"{\n"
"   float8 result;\n"
"   result.s0123 = _viv_acos_float4(a.s0123);\n"
"   result.s4567 = _viv_acos_float4(a.s4567);\n"
"   return result;\n"
"}\n"
"float16 _viv_acos_float16(float16 a)\n"
"{\n"
"   float16 result;\n"
"   result.s01234567 = _viv_acos_float8(a.s01234567);\n"
"   result.s89abcdef = _viv_acos_float8(a.s89abcdef);\n"
"   return result;\n"
"}\n"
;

static gctSTRING gcCLLibATAN_Funcs =
"float _viv_atan_float(float a)\n"
"{\n"
"   float result;\n"
"   _viv_asm(ATAN, result, a);\n"
"   return result;\n"
"}\n"
"float2 _viv_atan_float2(float2 a)\n"
"{\n"
"   float2 result;\n"
"   _viv_asm(ATAN, result, a);\n"
"   return result;\n"
"}\n"
"float3 _viv_atan_float3(float3 a)\n"
"{\n"
"   float3 result;\n"
"   _viv_asm(ATAN, result, a);\n"
"   return result;\n"
"}\n"
"float4 _viv_atan_float4(float4 a)\n"
"{\n"
"   float4 result;\n"
"   _viv_asm(ATAN, result, a);\n"
"   return result;\n"
"}\n"
"float8 _viv_atan_float8(float8 a)\n"
"{\n"
"   float8 result;\n"
"   result.s0123 = _viv_atan_float4(a.s0123);\n"
"   result.s4567 = _viv_atan_float4(a.s4567);\n"
"   return result;\n"
"}\n"
"float16 _viv_atan_float16(float16 a)\n"
"{\n"
"   float16 result;\n"
"   result.s01234567 = _viv_atan_float8(a.s01234567);\n"
"   result.s89abcdef = _viv_atan_float8(a.s89abcdef);\n"
"   return result;\n"
"}\n"
;

static gctSTRING gcCLLibATAN_Funcs_halti2 =
"float _viv_atan_float(float a)\n"
"{\n"
"   float result;\n"
"   float signOfA = as_float((as_uint(a) & 0x80000000) | as_uint(1.0));\n"
"   float temp0, temp1, temp2, temp3;\n"
"   if(fabs(a) > 1.0)\n"
"   {\n"
"       _viv_asm(INVERSE, temp0, a);\n"
"       temp0 = temp0 * signOfA;\n"
"       temp1 = as_float(0x3fc90fdb);\n"
"       temp2 = -1.0;\n"
"   }\n"
"   else\n"
"   {\n"
"       temp0 = fabs(a);\n"
"       temp1 = 0.0;\n"
"       temp2 = 1.0;\n"
"   }\n"
"   _viv_asm(MUL!<rnd:RTZ>, result, temp0, temp0);\n"
"   _viv_asm(MUL!<rnd:RTZ>, temp3, result, as_float(0x3b42f491));\n"
"   _viv_asm(ADD!<rnd:RTZ>, temp3, temp3, as_float(0xbc87d6c3));\n"
"   _viv_asm(MUL!<rnd:RTZ>, temp3, temp3, result);\n"
"   _viv_asm(ADD!<rnd:RTZ>, temp3, temp3, as_float(0x3d326651));\n"
"   _viv_asm(MUL!<rnd:RTZ>, temp3, temp3, result);\n"
"   _viv_asm(ADD!<rnd:RTZ>, temp3, temp3, as_float(0xbd9b407e));\n"
"   _viv_asm(MUL!<rnd:RTZ>, temp3, temp3, result);\n"
"   _viv_asm(ADD!<rnd:RTZ>, temp3, temp3, as_float(0x3ddab495));\n"
"   _viv_asm(MUL!<rnd:RTZ>, temp3, temp3, result);\n"
"   _viv_asm(ADD!<rnd:RTZ>, temp3, temp3, as_float(0xbe118db7));\n"
"   _viv_asm(MUL!<rnd:RTZ>, temp3, temp3, result);\n"
"   _viv_asm(ADD!<rnd:RTZ>, temp3, temp3, as_float(0x3e4cbd6f));\n"
"   _viv_asm(MUL!<rnd:RTZ>, temp3, temp3, result);\n"
"   _viv_asm(ADD!<rnd:RTZ>, temp3, temp3, as_float(0xbeaaaa73));\n"
"   _viv_asm(MUL!<rnd:RTZ>, result, temp3, result);\n"
"   _viv_asm(ADD!<rnd:RTZ>, result, result, 1.0);\n"
"   _viv_asm(MUL!<rnd:RTZ>, result, temp0, result);\n"
"   _viv_asm(MUL!<rnd:RTZ>, result, result, temp2);\n"
"   _viv_asm(ADD!<rnd:RTZ>, result, result, temp1);\n"
"   _viv_asm(MUL!<rnd:RTZ>, result, result, signOfA);\n"
"   return result;\n"
"}\n"
"float2 _viv_atan_float2(float2 a)\n"
"{\n"
"   float2 result;\n"
"   result.s0 = _viv_atan_float(a.s0);\n"
"   result.s1 = _viv_atan_float(a.s1);\n"
"   return result;\n"
"}\n"
"float3 _viv_atan_float3(float3 a)\n"
"{\n"
"   float3 result;\n"
"   result.s01 = _viv_atan_float2(a.s01);\n"
"   result.s2 = _viv_atan_float(a.s2);\n"
"   return result;\n"
"}\n"
"float4 _viv_atan_float4(float4 a)\n"
"{\n"
"   float4 result;\n"
"   result.s01 = _viv_atan_float2(a.s01);\n"
"   result.s23 = _viv_atan_float2(a.s23);\n"
"   return result;\n"
"}\n"
"float8 _viv_atan_float8(float8 a)\n"
"{\n"
"   float8 result;\n"
"   result.s0123 = _viv_atan_float4(a.s0123);\n"
"   result.s4567 = _viv_atan_float4(a.s4567);\n"
"   return result;\n"
"}\n"
"float16 _viv_atan_float16(float16 a)\n"
"{\n"
"   float16 result;\n"
"   result.s01234567 = _viv_atan_float8(a.s01234567);\n"
"   result.s89abcdef = _viv_atan_float8(a.s89abcdef);\n"
"   return result;\n"
"}\n"
;

static gctSTRING gcCLLibATAN_Funcs_halti5 =
"float _viv_atan_float(float a)\n"
"{\n"
"    float2 vec2Temp0;\n"
"    float floatTemp0, floatTemp1, result;\n"
"    floatTemp0 = a * a + 1.0;\n"
"    floatTemp0 = rsqrt(floatTemp0);\n"
"    _viv_asm(MUL_Z, floatTemp1, floatTemp0, a);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, floatTemp0, floatTemp1);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x2);\n"
"    result = floatTemp1 * vec2Temp0.s0 + vec2Temp0.s1;\n"
"    return result;\n"
"}\n"
"float2 _viv_atan_float2(float2 a)\n"
"{\n"
"    float2 vec2Temp0, vec2Temp1;\n"
"    float2 vec2Temp2, vec2Temp3, result;\n"
"    vec2Temp2 = a * a + 1.0;\n"
"    vec2Temp2 = rsqrt(vec2Temp2);\n"
"    _viv_asm(MUL_Z, vec2Temp3, vec2Temp2, a);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, vec2Temp2.s0, vec2Temp3.s0);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x2);\n"
"    _viv_asm(ARCTRIG0, vec2Temp1, vec2Temp2.s1, vec2Temp3.s1);\n"
"    _viv_asm(ARCTRIG1, vec2Temp1, vec2Temp1, 0x2);\n"
"    result.s0 = vec2Temp3.x * vec2Temp0.s0 + vec2Temp0.s1;\n"
"    result.s1 = vec2Temp3.y * vec2Temp1.s0 + vec2Temp1.s1;\n"
"    return result;\n"
"}\n"
"float3 _viv_atan_float3(float3 a)\n"
"{\n"
"    float2 vec2Temp0, vec2Temp1, vec2Temp2;\n"
"    float3 vec3Temp0, vec3Temp1, result;\n"
"    vec3Temp0 = a * a + 1.0;\n"
"    vec3Temp0 = rsqrt(vec3Temp0);\n"
"    _viv_asm(MUL_Z, vec3Temp1, vec3Temp0, a);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, vec3Temp0.s0, vec3Temp1.s0);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x2);\n"
"    _viv_asm(ARCTRIG0, vec2Temp1, vec3Temp0.s1, vec3Temp1.s1);\n"
"    _viv_asm(ARCTRIG1, vec2Temp1, vec2Temp1, 0x2);\n"
"    _viv_asm(ARCTRIG0, vec2Temp2, vec3Temp0.s2, vec3Temp1.s2);\n"
"    _viv_asm(ARCTRIG1, vec2Temp2, vec2Temp2, 0x2);\n"
"    result.s0 = vec3Temp1.s0 * vec2Temp0.s0 + vec2Temp0.s1;\n"
"    result.s1 = vec3Temp1.s1 * vec2Temp1.s0 + vec2Temp1.s1;\n"
"    result.s2 = vec3Temp1.s2 * vec2Temp2.s0 + vec2Temp2.s1;\n"
"    return result;\n"
"}\n"
"float4 _viv_atan_float4(float4 a)\n"
"{\n"
"    float2 vec2Temp0, vec2Temp1, vec2Temp2, vec2Temp3;\n"
"    float4 vec4Temp0, vec4Temp1, result;\n"
"    vec4Temp0 = a * a + 1.0;\n"
"    vec4Temp0 = rsqrt(vec4Temp0);\n"
"    _viv_asm(MUL_Z, vec4Temp1, vec4Temp0, a);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, vec4Temp0.s0, vec4Temp1.s0);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x2);\n"
"    _viv_asm(ARCTRIG0, vec2Temp1, vec4Temp0.s1, vec4Temp1.s1);\n"
"    _viv_asm(ARCTRIG1, vec2Temp1, vec2Temp1, 0x2);\n"
"    _viv_asm(ARCTRIG0, vec2Temp2, vec4Temp0.s2, vec4Temp1.s2);\n"
"    _viv_asm(ARCTRIG1, vec2Temp2, vec2Temp2, 0x2);\n"
"    _viv_asm(ARCTRIG0, vec2Temp3, vec4Temp0.s3, vec4Temp1.s3);\n"
"    _viv_asm(ARCTRIG1, vec2Temp3, vec2Temp3, 0x2);\n"
"    result.s0 = vec4Temp1.s0 * vec2Temp0.s0 + vec2Temp0.s1;\n"
"    result.s1 = vec4Temp1.s1 * vec2Temp1.s0 + vec2Temp1.s1;\n"
"    result.s2 = vec4Temp1.s2 * vec2Temp2.s0 + vec2Temp2.s1;\n"
"    result.s3 = vec4Temp1.s3 * vec2Temp3.s0 + vec2Temp3.s1;\n"
"    return result;\n"
"}\n"
"float8 _viv_atan_float8(float8 a)\n"
"{\n"
"   float8 result;\n"
"   result.s0123 = _viv_atan_float4(a.s0123);\n"
"   result.s4567 = _viv_atan_float4(a.s4567);\n"
"   return result;\n"
"}\n"
"float16 _viv_atan_float16(float16 a)\n"
"{\n"
"   float16 result;\n"
"   result.s01234567 = _viv_atan_float8(a.s01234567);\n"
"   result.s89abcdef = _viv_atan_float8(a.s89abcdef);\n"
"   return result;\n"
"}\n"
;

static gctSTRING gcCLLibATAN_Funcs_halti5_fmaSupported =
"float _viv_fma_float(float a, float b, float c);\n"
"float _viv_atan_float(float a)\n"
"{\n"
"    float2 vec2Temp0;\n"
"    float floatTemp0, floatTemp1, result;\n"
"    floatTemp0 = _viv_fma_float(a, a, 1.0);\n"
"    floatTemp0 = rsqrt(floatTemp0);\n"
"    _viv_asm(MUL_Z, floatTemp1, floatTemp0, a);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, floatTemp0, floatTemp1);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x2);\n"
"    result = _viv_fma_float(floatTemp1, vec2Temp0.s0, vec2Temp0.s1);\n"
"    return result;\n"
"}\n"
"float2 _viv_fma_float2(float2 a, float2 b, float2 c);\n"
"float2 _viv_atan_float2(float2 a)\n"
"{\n"
"    float2 vec2Temp0, vec2Temp1;\n"
"    float2 vec2Temp2, vec2Temp3, result;\n"
"    vec2Temp2 = _viv_fma_float2(a, a, 1.0);\n"
"    vec2Temp2 = rsqrt(vec2Temp2);\n"
"    _viv_asm(MUL_Z, vec2Temp3, vec2Temp2, a);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, vec2Temp2.s0, vec2Temp3.s0);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x2);\n"
"    _viv_asm(ARCTRIG0, vec2Temp1, vec2Temp2.s1, vec2Temp3.s1);\n"
"    _viv_asm(ARCTRIG1, vec2Temp1, vec2Temp1, 0x2);\n"
"    result.s0 = _viv_fma_float(vec2Temp3.x, vec2Temp0.s0, vec2Temp0.s1);\n"
"    result.s1 = _viv_fma_float(vec2Temp3.y, vec2Temp1.s0, vec2Temp1.s1);\n"
"    return result;\n"
"}\n"
"float3 _viv_fma_float3(float3 a, float3 b, float3 c);\n"
"float3 _viv_atan_float3(float3 a)\n"
"{\n"
"    float2 vec2Temp0, vec2Temp1, vec2Temp2;\n"
"    float3 vec3Temp0, vec3Temp1, result;\n"
"    vec3Temp0 = _viv_fma_float3(a, a, 1.0);\n"
"    vec3Temp0 = rsqrt(vec3Temp0);\n"
"    _viv_asm(MUL_Z, vec3Temp1, vec3Temp0, a);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, vec3Temp0.s0, vec3Temp1.s0);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x2);\n"
"    _viv_asm(ARCTRIG0, vec2Temp1, vec3Temp0.s1, vec3Temp1.s1);\n"
"    _viv_asm(ARCTRIG1, vec2Temp1, vec2Temp1, 0x2);\n"
"    _viv_asm(ARCTRIG0, vec2Temp2, vec3Temp0.s2, vec3Temp1.s2);\n"
"    _viv_asm(ARCTRIG1, vec2Temp2, vec2Temp2, 0x2);\n"
"    result.s0 = _viv_fma_float(vec3Temp1.s0, vec2Temp0.s0, vec2Temp0.s1);\n"
"    result.s1 = _viv_fma_float(vec3Temp1.s1, vec2Temp1.s0, vec2Temp1.s1);\n"
"    result.s2 = _viv_fma_float(vec3Temp1.s2, vec2Temp2.s0, vec2Temp2.s1);\n"
"    return result;\n"
"}\n"
"float4 _viv_fma_float4(float4 a, float4 b, float4 c);\n"
"float4 _viv_atan_float4(float4 a)\n"
"{\n"
"    float2 vec2Temp0, vec2Temp1, vec2Temp2, vec2Temp3;\n"
"    float4 vec4Temp0, vec4Temp1, result;\n"
"    vec4Temp0 = _viv_fma_float4(a, a, 1.0);\n"
"    vec4Temp0 = rsqrt(vec4Temp0);\n"
"    _viv_asm(MUL_Z, vec4Temp1, vec4Temp0, a);\n"
"    _viv_asm(ARCTRIG0, vec2Temp0, vec4Temp0.s0, vec4Temp1.s0);\n"
"    _viv_asm(ARCTRIG1, vec2Temp0, vec2Temp0, 0x2);\n"
"    _viv_asm(ARCTRIG0, vec2Temp1, vec4Temp0.s1, vec4Temp1.s1);\n"
"    _viv_asm(ARCTRIG1, vec2Temp1, vec2Temp1, 0x2);\n"
"    _viv_asm(ARCTRIG0, vec2Temp2, vec4Temp0.s2, vec4Temp1.s2);\n"
"    _viv_asm(ARCTRIG1, vec2Temp2, vec2Temp2, 0x2);\n"
"    _viv_asm(ARCTRIG0, vec2Temp3, vec4Temp0.s3, vec4Temp1.s3);\n"
"    _viv_asm(ARCTRIG1, vec2Temp3, vec2Temp3, 0x2);\n"
"    result.s0 = _viv_fma_float(vec4Temp1.s0, vec2Temp0.s0, vec2Temp0.s1);\n"
"    result.s1 = _viv_fma_float(vec4Temp1.s1, vec2Temp1.s0, vec2Temp1.s1);\n"
"    result.s2 = _viv_fma_float(vec4Temp1.s2, vec2Temp2.s0, vec2Temp2.s1);\n"
"    result.s3 = _viv_fma_float(vec4Temp1.s3, vec2Temp3.s0, vec2Temp3.s1);\n"
"    return result;\n"
"}\n"
"float8 _viv_atan_float8(float8 a)\n"
"{\n"
"   float8 result;\n"
"   result.s0123 = _viv_atan_float4(a.s0123);\n"
"   result.s4567 = _viv_atan_float4(a.s4567);\n"
"   return result;\n"
"}\n"
"float16 _viv_atan_float16(float16 a)\n"
"{\n"
"   float16 result;\n"
"   result.s01234567 = _viv_atan_float8(a.s01234567);\n"
"   result.s89abcdef = _viv_atan_float8(a.s89abcdef);\n"
"   return result;\n"
"}\n"
;

static gctSTRING gcCLLibATAN2_Funcs =
"float _viv_atan2_float(float y, float x)\n"
"{\n"
"    float result;\n"
"    _viv_asm(ATAN, result, y / x);\n"
"    if(signbit(x) == 1)\n"
"    {\n"
"        if(result <= 0.0)\n"
"        {\n"
"            result = result + 3.14159265358979323846f;\n"
"        }\n"
"        else if(result >= -0.0)\n"
"        {\n"
"            result = result - 3.14159265358979323846f;\n"
"        }\n"
"    }\n"
"    return result;\n"
"}\n"
"float2 _viv_atan2_float2(float2 y, float2 x)\n"
"{\n"
"    float2 result;\n"
"    _viv_asm(ATAN, result, y / x);\n"
"    int2 sel = signbit(result);\n"
"    float2 result2 = mix(result + (float2)(3.14159265358979323846f), result - (float2)(3.14159265358979323846f), convert_float(sel));\n"
"    sel = signbit(x);;\n"
"    result = mix(result, result2, sel);\n"
"    return result;\n"
"}\n"
"float3 _viv_atan2_float3(float3 y, float3 x)\n"
"{\n"
"    float3 result;\n"
"    _viv_asm(ATAN, result, y / x);\n"
"    int3 sel = signbit(result);\n"
"    float3 result2 = mix(result + float3(3.14159265358979323846f), result - float3(3.14159265358979323846f), sel);\n"
"    sel = signbit(x);\n"
"    result = mix(result, result2, sel);\n"
"    return result;\n"
"}\n"
"float4 _viv_atan2_float4(float4 y, float4 x)\n"
"{\n"
"    float4 result;\n"
"    _viv_asm(ATAN, result, y / x);\n"
"    int4 sel = signbit(result);\n"
"    float4 result2 = mix(result + float4(3.14159265358979323846f), result - float4(3.14159265358979323846f), sel);\n"
"    sel = signbit(x);\n"
"    result = mix(result, result2, sel);\n"
"    return result;\n"
"}\n"
"float8 _viv_atan2_float8(float8 y, float8 x)\n"
"{\n"
"    float8 result;\n"
"    result.s0123 = _viv_atan2_float4(y.s0123, x.s0123);\n"
"    result.s4567 = _viv_atan2_float4(y.s4567, x.s4567);\n"
"    return result;\n"
"}\n"
"float16 _viv_atan2_float16(float16 y, float16 x)\n"
"{\n"
"    float16 result;\n"
"    result.s0123 = _viv_atan2_float4(y.s0123, x.s0123);\n"
"    result.s4567 = _viv_atan2_float4(y.s4567, x.s4567);\n"
"    result.s89ab = _viv_atan2_float4(y.s89ab, x.s89ab);\n"
"    result.scdef = _viv_atan2_float4(y.scdef, x.scdef);\n"
"    return result;\n"
"}\n";

static gctSTRING gcCLLibATAN2_Funcs_halti2 =
"float _viv_atan2_float(float y, float x)\n"
"{\n"
"    float r1z, r1w, r2x, r2y, r2z, r2w, r3y, r3w, temp0, result;\n"
"    uint r1x, r3x, r3z, r4x, r4y;\n"
"    r3x = 0;\n"
"    r3y = 0.0 + fabs(y);\n"
"    r3z = 0x80000000 & as_uint(y);\n"
"    r3w = 0.0 + fabs(x);\n"
"    r4x = 0x80000000 & as_uint(x);\n"
"    _viv_asm(ADD!<rnd:RTZ>, temp0, r3y, r3w);\n"
"    r4y = 0x7fffffff & as_uint(temp0);\n"
"    if(0x7f800000 < r4y)\n"
"    {\n"
"        r3x = 0x7f800000;\n"
"        result = as_float(r4y);\n"
"    }\n"
"    else\n"
"    {\n"
"        if(0x80000000 != r4x)\n"
"        {\n"
"            r1x = 0;\n"
"        }\n"
"        else\n"
"        {\n"
"            r1x = 0x40490fdb;\n"
"        }\n"
"        if(r3y == 0.0)\n"
"        {\n"
"            r3x = 0x7f800000;\n"
"            result = as_float(r3z | r1x);\n"
"        }\n"
"        else\n"
"        {\n"
"            if(r3w == as_float(0x7f800000))\n"
"            {\n"
"                if(0x7f800000 == as_uint(r3y))\n"
"                {\n"
"                    float temp1;\n"
"                    _viv_asm(MUL!<rnd:RTZ>, temp1, 0.5, as_float(r1x));\n"
"                    _viv_asm(ADD!<rnd:RTZ>, temp1, temp1, as_float(0x3f490fdb));\n"
"                    r3x = 0x7f800000;\n"
"                    result = as_float(r3z | as_uint(temp1));\n"
"                }\n"
"                else\n"
"                {\n"
"                    r3x = 0x7f800000;\n"
"                    result = as_float(r3z | r1x);\n"
"                }\n"
"            }\n"
"            else\n"
"            {\n"
"                if(0x7f800000 == as_uint(r3y))\n"
"                {\n"
"                    r3x = 0x7f800000;\n"
"                    result = as_float(r3z | 0x3fc90fdb);\n"
"                }\n"
"            }\n"
"        }\n"
"    }\n"
"    if(0 == r3x)\n"
"    {\n"
"        r3x = 0x7fffffff & as_uint(x);\n"
"        if(r3x > 0x7e800000)\n"
"        {\n"
"            r3x = as_uint(0.25 * x);\n"
"            r3y = 0.25;\n"
"        }\n"
"        else\n"
"        {\n"
"            r3x = as_uint(x);\n"
"            r3y = 1.0;\n"
"        }\n"
"        _viv_asm(INVERSE, r2x, as_float(r3x));\n"
"        if(fabs(r2x) < as_float(0x33800000))\n"
"        {\n"
"            r2y = 16777216.0;\n"
"            r2z = as_float(0x33800000);\n"
"        }\n"
"        else\n"
"        {\n"
"            r2y = 1.0;\n"
"            r2z = 1.0;\n"
"        }\n"
"        r2w = (-r2x) * as_float(r3x) + 1.0;\n"
"        r2x = r2y * r2x;\n"
"        r2y = r2w * r2x;\n"
"        r2w = as_float(0x007fffff & as_uint(r2x));\n"
"        if(0 != as_uint(r2w))\n"
"        {\n"
"            r2w = as_float(1);\n"
"        }\n"
"        r2y = as_float(as_uint(r2w) * as_uint(r2y));\n"
"        r2x = r2y + r2x;\n"
"        r2x = r2z * r2x;\n"
"        r1z = r2x * y;\n"
"        r1z = r1z * r3y;\n"
"        if(fabs(r1z) > 1.0)\n"
"        {\n"
"            if(r1z >= 0.0)\n"
"            {\n"
"                _viv_asm(INVERSE, r1w, r1z);\n"
"                r2x = as_float(0x3fc90fdb);\n"
"                r2y = -1.0;\n"
"                r2z = 1.0;\n"
"            }\n"
"            else\n"
"            {\n"
"                _viv_asm(INVERSE, r1w, r1z);\n"
"                r1w = -r1w;\n"
"                r2x = as_float(0x3fc90fdb);\n"
"                r2y = -1.0;\n"
"                r2z = -1.0;\n"
"            }\n"
"        }\n"
"        else\n"
"        {\n"
"            if(r1z >= 0.0)\n"
"            {\n"
"                r1w = r1z;\n"
"                r2x = 0.0;\n"
"                r2y = 1.0;\n"
"                r2z = 1.0;\n"
"            }\n"
"            else\n"
"            {\n"
"                r1w = -r1z;\n"
"                r2x = 0.0;\n"
"                r2y = 1.0;\n"
"                r2z = -1.0;\n"
"            }\n"
"        }\n"
"       _viv_asm(MUL!<rnd:RTZ>, r1z, r1w, r1w);\n"
"       _viv_asm(MUL!<rnd:RTZ>, r2w, r1z, as_float(0x3b42f491));\n"
"       _viv_asm(ADD!<rnd:RTZ>, r2w, r2w, as_float(0xbc87d6c3));\n"
"       _viv_asm(MUL!<rnd:RTZ>, r2w, r2w, r1z);\n"
"       _viv_asm(ADD!<rnd:RTZ>, r2w, r2w, as_float(0x3d326651));\n"
"       _viv_asm(MUL!<rnd:RTZ>, r2w, r2w, r1z);\n"
"       _viv_asm(ADD!<rnd:RTZ>, r2w, r2w, as_float(0xbd9b407e));\n"
"       _viv_asm(MUL!<rnd:RTZ>, r2w, r2w, r1z);\n"
"       _viv_asm(ADD!<rnd:RTZ>, r2w, r2w, as_float(0x3ddab495));\n"
"       _viv_asm(MUL!<rnd:RTZ>, r2w, r2w, r1z);\n"
"       _viv_asm(ADD!<rnd:RTZ>, r2w, r2w, as_float(0xbe118db7));\n"
"       _viv_asm(MUL!<rnd:RTZ>, r2w, r2w, r1z);\n"
"       _viv_asm(ADD!<rnd:RTZ>, r2w, r2w, as_float(0x3e4cbd6f));\n"
"       _viv_asm(MUL!<rnd:RTZ>, r2w, r2w, r1z);\n"
"       _viv_asm(ADD!<rnd:RTZ>, r2w, r2w, as_float(0xbeaaaa73));\n"
"       _viv_asm(MUL!<rnd:RTZ>, r1z, r2w, r1z);\n"
"       _viv_asm(ADD!<rnd:RTZ>, r1z, r1z, 1.0);\n"
"       _viv_asm(MUL!<rnd:RTZ>, r1z, r1w, r1z);\n"
"       _viv_asm(MUL!<rnd:RTZ>, r1z, r1z, r2y);\n"
"       _viv_asm(ADD!<rnd:RTZ>, r1z, r1z, r2x);\n"
"        r1x = r3z | r1x;\n"
"       _viv_asm(MUL!<rnd:RTZ>, r1z, r1z, r2z);\n"
"       _viv_asm(ADD!<rnd:RTZ>, result, r1z, as_float(r1x));\n"
"    }\n"
"    return result;\n"
"}\n"
"float2 _viv_atan2_float2(float2 y, float2 x)\n"
"{\n"
"    return (float2)(_viv_atan2_float(y.s0, x.s0), \n"
"                    _viv_atan2_float(y.s1, x.s1));\n"
"}\n"
"float3 _viv_atan2_float3(float3 y, float3 x)\n"
"{\n"
"    return (float3)(_viv_atan2_float(y.s0, x.s0), \n"
"                    _viv_atan2_float(y.s1, x.s1), \n"
"                    _viv_atan2_float(y.s2, x.s2));\n"
"}\n"
"float4 _viv_atan2_float4(float4 y, float4 x)\n"
"{\n"
"    return (float4)(_viv_atan2_float(y.s0, x.s0), \n"
"                    _viv_atan2_float(y.s1, x.s1), \n"
"                    _viv_atan2_float(y.s2, x.s2), \n"
"                    _viv_atan2_float(y.s3, x.s3));\n"
"}\n"
"float8 _viv_atan2_float8(float8 y, float8 x)\n"
"{\n"
"    float8 result;\n"
"    result.s0123 = _viv_atan2_float4(y.s0123, x.s0123);\n"
"    result.s4567 = _viv_atan2_float4(y.s4567, x.s4567);\n"
"    return result;\n"
"}\n"
"float16 _viv_atan2_float16(float16 y, float16 x)\n"
"{\n"
"    float16 result;\n"
"    result.s0123 = _viv_atan2_float4(y.s0123, x.s0123);\n"
"    result.s4567 = _viv_atan2_float4(y.s4567, x.s4567);\n"
"    result.s89ab = _viv_atan2_float4(y.s89ab, x.s89ab);\n"
"    result.scdef = _viv_atan2_float4(y.scdef, x.scdef);\n"
"    return result;\n"
"}\n"
;

static gctSTRING gcCLLibATAN2_Funcs_halti5 =
"float _viv_atan2_float(float y, float x)\n"
"{\n"
"    float2 arctrig0, vec2Temp0;\n"
"    float dot0, rsq0, result;\n"
"    _viv_asm(ARCTRIG0, arctrig0, y, x);\n"
"    _viv_asm(ARCTRIG1, arctrig0, arctrig0, 0x83);\n"
"    dot0 = arctrig0.x * arctrig0.x + arctrig0.y * arctrig0.y;\n"
"    _viv_asm(RSQ, rsq0, dot0);\n"
"    vec2Temp0 = arctrig0 * rsq0;\n"
"    _viv_asm(ARCTRIG0, arctrig0, vec2Temp0.y, vec2Temp0.x);\n"
"    _viv_asm(ARCTRIG1, arctrig0, arctrig0, 0x3);\n"
"    result = arctrig0.x * vec2Temp0.x + arctrig0.y;\n"
"    return result;\n"
"}\n"
"float2 _viv_atan2_float2(float2 y, float2 x)\n"
"{\n"
"    float2 arctrig0, arctrig1, vec2Temp0, vec2Temp1;\n"
"    float2 dot0, rsq0, result;\n"
/*"    int2 sel = as_uint2(y) == (uint2)(0x80000000u);\n"
"    y = mix(y, (float2)(0.0), convert_float2(-sel));\n"*/
"    _viv_asm(ARCTRIG0, arctrig0, y.x, x.x);\n"
"    _viv_asm(ARCTRIG1, arctrig0, arctrig0, 0x83);\n"
"    _viv_asm(ARCTRIG0, arctrig1, y.y, x.y);\n"
"    _viv_asm(ARCTRIG1, arctrig1, arctrig1, 0x83);\n"
"    dot0.x = arctrig0.x * arctrig0.x + arctrig0.y * arctrig0.y;\n"
"    dot0.y = arctrig1.x * arctrig1.x + arctrig1.y * arctrig1.y;\n"
"    _viv_asm(RSQ, rsq0, dot0);\n"
"    vec2Temp0 = arctrig0 * rsq0.x;\n"
"    vec2Temp1 = arctrig1 * rsq0.y;\n"
"    _viv_asm(ARCTRIG0, arctrig0, vec2Temp0.y, vec2Temp0.x);\n"
"    _viv_asm(ARCTRIG1, arctrig0, arctrig0, 0x3);\n"
"    _viv_asm(ARCTRIG0, arctrig1, vec2Temp1.y, vec2Temp1.x);\n"
"    _viv_asm(ARCTRIG1, arctrig1, arctrig1, 0x3);\n"
"    result.x = arctrig0.x * vec2Temp0.x + arctrig0.y;\n"
"    result.y = arctrig1.x * vec2Temp1.x + arctrig1.y;\n"
"    return result;\n"
"}\n"
"float3 _viv_atan2_float3(float3 y, float3 x)\n"
"{\n"
"    float2 arctrig0, arctrig1, arctrig2, vec3Temp0, vec3Temp1, vec3Temp2;\n"
"    float3 dot0, rsq0, result;\n"
/*"    int3 sel = as_uint3(y) == (uint3)(0x80000000u);\n"
"    y = mix(y, (float3)(0.0), convert_float3(-sel));\n"*/
"    _viv_asm(ARCTRIG0, arctrig0, y.x, x.x);\n"
"    _viv_asm(ARCTRIG1, arctrig0, arctrig0, 0x83);\n"
"    _viv_asm(ARCTRIG0, arctrig1, y.y, x.y);\n"
"    _viv_asm(ARCTRIG1, arctrig1, arctrig1, 0x83);\n"
"    _viv_asm(ARCTRIG0, arctrig2, y.z, x.z);\n"
"    _viv_asm(ARCTRIG1, arctrig2, arctrig2, 0x83);\n"
"    dot0.x = arctrig0.x * arctrig0.x + arctrig0.y * arctrig0.y;\n"
"    dot0.y = arctrig1.x * arctrig1.x + arctrig1.y * arctrig1.y;\n"
"    dot0.z = arctrig2.x * arctrig2.x + arctrig2.y * arctrig2.y;\n"
"    _viv_asm(RSQ, rsq0, dot0);\n"
"    vec3Temp0 = arctrig0 * rsq0.x;\n"
"    vec3Temp1 = arctrig1 * rsq0.y;\n"
"    vec3Temp2 = arctrig2 * rsq0.z;\n"
"    _viv_asm(ARCTRIG0, arctrig0, vec3Temp0.y, vec3Temp0.x);\n"
"    _viv_asm(ARCTRIG1, arctrig0, arctrig0, 0x3);\n"
"    _viv_asm(ARCTRIG0, arctrig1, vec3Temp1.y, vec3Temp1.x);\n"
"    _viv_asm(ARCTRIG1, arctrig1, arctrig1, 0x3);\n"
"    _viv_asm(ARCTRIG0, arctrig2, vec3Temp2.y, vec3Temp2.x);\n"
"    _viv_asm(ARCTRIG1, arctrig2, arctrig2, 0x3);\n"
"    result.x = arctrig0.x * vec3Temp0.x + arctrig0.y;\n"
"    result.y = arctrig1.x * vec3Temp1.x + arctrig1.y;\n"
"    result.z = arctrig2.x * vec3Temp2.x + arctrig2.y;\n"
"    return result;\n"
"}\n"
"float4 _viv_atan2_float4(float4 y, float4 x)\n"
"{\n"
"    float2 arctrig0, arctrig1, arctrig2, arctrig3, vec4Temp0, vec4Temp1, vec4Temp2, vec4Temp3;\n"
"    float4 dot0, rsq0, result;\n"
/*"    int4 sel = as_uint4(y) == (uint4)(0x80000000u);\n"
"    y = mix(y, (float4)(0.0), convert_float4(-sel));\n"*/
"    _viv_asm(ARCTRIG0, arctrig0, y.x, x.x);\n"
"    _viv_asm(ARCTRIG1, arctrig0, arctrig0, 0x83);\n"
"    _viv_asm(ARCTRIG0, arctrig1, y.y, x.y);\n"
"    _viv_asm(ARCTRIG1, arctrig1, arctrig1, 0x83);\n"
"    _viv_asm(ARCTRIG0, arctrig2, y.z, x.z);\n"
"    _viv_asm(ARCTRIG1, arctrig2, arctrig2, 0x83);\n"
"    _viv_asm(ARCTRIG0, arctrig3, y.w, x.w);\n"
"    _viv_asm(ARCTRIG1, arctrig3, arctrig3, 0x83);\n"
"    dot0.x = arctrig0.x * arctrig0.x + arctrig0.y * arctrig0.y;\n"
"    dot0.y = arctrig1.x * arctrig1.x + arctrig1.y * arctrig1.y;\n"
"    dot0.z = arctrig2.x * arctrig2.x + arctrig2.y * arctrig2.y;\n"
"    dot0.w = arctrig3.x * arctrig3.x + arctrig3.y * arctrig3.y;\n"
"    _viv_asm(RSQ, rsq0, dot0);\n"
"    vec4Temp0 = arctrig0 * rsq0.x;\n"
"    vec4Temp1 = arctrig1 * rsq0.y;\n"
"    vec4Temp2 = arctrig2 * rsq0.z;\n"
"    vec4Temp3 = arctrig3 * rsq0.w;\n"
"    _viv_asm(ARCTRIG0, arctrig0, vec4Temp0.y, vec4Temp0.x);\n"
"    _viv_asm(ARCTRIG1, arctrig0, arctrig0, 0x3);\n"
"    _viv_asm(ARCTRIG0, arctrig1, vec4Temp1.y, vec4Temp1.x);\n"
"    _viv_asm(ARCTRIG1, arctrig1, arctrig1, 0x3);\n"
"    _viv_asm(ARCTRIG0, arctrig2, vec4Temp2.y, vec4Temp2.x);\n"
"    _viv_asm(ARCTRIG1, arctrig2, arctrig2, 0x3);\n"
"    _viv_asm(ARCTRIG0, arctrig3, vec4Temp3.y, vec4Temp3.x);\n"
"    _viv_asm(ARCTRIG1, arctrig3, arctrig3, 0x3);\n"
"    result.x = arctrig0.x * vec4Temp0.x + arctrig0.y;\n"
"    result.y = arctrig1.x * vec4Temp1.x + arctrig1.y;\n"
"    result.z = arctrig2.x * vec4Temp2.x + arctrig2.y;\n"
"    result.w = arctrig3.x * vec4Temp3.x + arctrig3.y;\n"
"    return result;\n"
"}\n"
"float8 _viv_atan2_float8(float8 y, float8 x)\n"
"{\n"
"    float8 result;\n"
"    result.s0123 = _viv_atan2_float4(y.s0123, x.s0123);\n"
"    result.s4567 = _viv_atan2_float4(y.s4567, x.s4567);\n"
"    return result;\n"
"}\n"
"float16 _viv_atan2_float16(float16 y, float16 x)\n"
"{\n"
"    float16 result;\n"
"    result.s0123 = _viv_atan2_float4(y.s0123, x.s0123);\n"
"    result.s4567 = _viv_atan2_float4(y.s4567, x.s4567);\n"
"    result.s89ab = _viv_atan2_float4(y.s89ab, x.s89ab);\n"
"    result.scdef = _viv_atan2_float4(y.scdef, x.scdef);\n"
"    return result;\n"
"}\n"
;
static gctSTRING gcCLLibATAN2_Funcs_halti5_fmaSupported =
"float _viv_fma_float(float a, float b, float c);\n"
"float _viv_atan2_float(float y, float x)\n"
"{\n"
"    float2 arctrig0, vec2Temp0;\n"
"    float dot0, rsq0, result;\n"
"    _viv_asm(ARCTRIG0, arctrig0, y, x);\n"
"    _viv_asm(ARCTRIG1, arctrig0, arctrig0, 0x83);\n"
"    dot0 = dot(arctrig0, arctrig0);\n"
"    _viv_asm(RSQ, rsq0, dot0);\n"
"    vec2Temp0 = arctrig0 * rsq0;\n"
"    _viv_asm(ARCTRIG0, arctrig0, vec2Temp0.y, vec2Temp0.x);\n"
"    _viv_asm(ARCTRIG1, arctrig0, arctrig0, 0x3);\n"
"    result = _viv_fma_float(arctrig0.x, vec2Temp0.x, arctrig0.y);\n"
"    return result;\n"
"}\n"
"float2 _viv_fma_float2(float2 a, float2 b, float2 c);\n"
"float2 _viv_atan2_float2(float2 y, float2 x)\n"
"{\n"
"    float2 arctrig0, arctrig1, vec2Temp0, vec2Temp1;\n"
"    float2 dot0, rsq0, result;\n"
/*"    int2 sel = as_uint2(y) == (uint2)(0x80000000u);\n"
"    y = mix(y, (float2)(0.0), convert_float2(-sel));\n"*/
"    _viv_asm(ARCTRIG0, arctrig0, y.x, x.x);\n"
"    _viv_asm(ARCTRIG1, arctrig0, arctrig0, 0x83);\n"
"    _viv_asm(ARCTRIG0, arctrig1, y.y, x.y);\n"
"    _viv_asm(ARCTRIG1, arctrig1, arctrig1, 0x83);\n"
"    dot0.x = dot(arctrig0, arctrig0);\n"
"    dot0.y = dot(arctrig1, arctrig1);\n"
"    _viv_asm(RSQ, rsq0, dot0);\n"
"    vec2Temp0 = arctrig0 * rsq0.x;\n"
"    vec2Temp1 = arctrig1 * rsq0.y;\n"
"    _viv_asm(ARCTRIG0, arctrig0, vec2Temp0.y, vec2Temp0.x);\n"
"    _viv_asm(ARCTRIG1, arctrig0, arctrig0, 0x3);\n"
"    _viv_asm(ARCTRIG0, arctrig1, vec2Temp1.y, vec2Temp1.x);\n"
"    _viv_asm(ARCTRIG1, arctrig1, arctrig1, 0x3);\n"
"    result.x = _viv_fma_float(arctrig0.x, vec2Temp0.x, arctrig0.y);\n"
"    result.y = _viv_fma_float(arctrig1.x, vec2Temp1.x, arctrig1.y);\n"
"    return result;\n"
"}\n"
"float3 _viv_fma_float3(float3 a, float3 b, float3 c);\n"
"float3 _viv_atan2_float3(float3 y, float3 x)\n"
"{\n"
"    float2 arctrig0, arctrig1, arctrig2, vec3Temp0, vec3Temp1, vec3Temp2;\n"
"    float3 dot0, rsq0, result;\n"
/*"    int3 sel = as_uint3(y) == (uint3)(0x80000000u);\n"
"    y = mix(y, (float3)(0.0), convert_float3(-sel));\n"*/
"    _viv_asm(ARCTRIG0, arctrig0, y.x, x.x);\n"
"    _viv_asm(ARCTRIG1, arctrig0, arctrig0, 0x83);\n"
"    _viv_asm(ARCTRIG0, arctrig1, y.y, x.y);\n"
"    _viv_asm(ARCTRIG1, arctrig1, arctrig1, 0x83);\n"
"    _viv_asm(ARCTRIG0, arctrig2, y.z, x.z);\n"
"    _viv_asm(ARCTRIG1, arctrig2, arctrig2, 0x83);\n"
"    dot0.x = dot(arctrig0, arctrig0);\n"
"    dot0.y = dot(arctrig1, arctrig1);\n"
"    dot0.z = dot(arctrig2, arctrig2);\n"
"    _viv_asm(RSQ, rsq0, dot0);\n"
"    vec3Temp0 = arctrig0 * rsq0.x;\n"
"    vec3Temp1 = arctrig1 * rsq0.y;\n"
"    vec3Temp2 = arctrig2 * rsq0.z;\n"
"    _viv_asm(ARCTRIG0, arctrig0, vec3Temp0.y, vec3Temp0.x);\n"
"    _viv_asm(ARCTRIG1, arctrig0, arctrig0, 0x3);\n"
"    _viv_asm(ARCTRIG0, arctrig1, vec3Temp1.y, vec3Temp1.x);\n"
"    _viv_asm(ARCTRIG1, arctrig1, arctrig1, 0x3);\n"
"    _viv_asm(ARCTRIG0, arctrig2, vec3Temp2.y, vec3Temp2.x);\n"
"    _viv_asm(ARCTRIG1, arctrig2, arctrig2, 0x3);\n"
"    result.x = _viv_fma_float(arctrig0.x, vec3Temp0.x, arctrig0.y);\n"
"    result.y = _viv_fma_float(arctrig1.x, vec3Temp1.x, arctrig1.y);\n"
"    result.z = _viv_fma_float(arctrig2.x, vec3Temp2.x, arctrig2.y);\n"
"    return result;\n"
"}\n"
"float4 _viv_fma_float4(float4 a, float4 b, float4 c);\n"
"float4 _viv_atan2_float4(float4 y, float4 x)\n"
"{\n"
"    float2 arctrig0, arctrig1, arctrig2, arctrig3, vec4Temp0, vec4Temp1, vec4Temp2, vec4Temp3;\n"
"    float4 dot0, rsq0, result;\n"
/*"    int4 sel = as_uint4(y) == uint4(0x80000000u);\n"
"    y = mix(y, (float4)(0.0), convert_float4(sel));\n"*/
"    _viv_asm(ARCTRIG0, arctrig0, y.x, x.x);\n"
"    _viv_asm(ARCTRIG1, arctrig0, arctrig0, 0x83);\n"
"    _viv_asm(ARCTRIG0, arctrig1, y.y, x.y);\n"
"    _viv_asm(ARCTRIG1, arctrig1, arctrig1, 0x83);\n"
"    _viv_asm(ARCTRIG0, arctrig2, y.z, x.z);\n"
"    _viv_asm(ARCTRIG1, arctrig2, arctrig2, 0x83);\n"
"    _viv_asm(ARCTRIG0, arctrig3, y.w, x.w);\n"
"    _viv_asm(ARCTRIG1, arctrig3, arctrig3, 0x83);\n"
"    dot0.x = dot(arctrig0, arctrig0);\n"
"    dot0.y = dot(arctrig1, arctrig1);\n"
"    dot0.z = dot(arctrig2, arctrig2);\n"
"    dot0.w = dot(arctrig3, arctrig3);\n"
"    _viv_asm(RSQ, rsq0, dot0);\n"
"    vec4Temp0 = arctrig0 * rsq0.x;\n"
"    vec4Temp1 = arctrig1 * rsq0.y;\n"
"    vec4Temp2 = arctrig2 * rsq0.z;\n"
"    vec4Temp3 = arctrig3 * rsq0.w;\n"
"    _viv_asm(ARCTRIG0, arctrig0, vec4Temp0.y, vec4Temp0.x);\n"
"    _viv_asm(ARCTRIG1, arctrig0, arctrig0, 0x3);\n"
"    _viv_asm(ARCTRIG0, arctrig1, vec4Temp1.y, vec4Temp1.x);\n"
"    _viv_asm(ARCTRIG1, arctrig1, arctrig1, 0x3);\n"
"    _viv_asm(ARCTRIG0, arctrig2, vec4Temp2.y, vec4Temp2.x);\n"
"    _viv_asm(ARCTRIG1, arctrig2, arctrig2, 0x3);\n"
"    _viv_asm(ARCTRIG0, arctrig3, vec4Temp3.y, vec4Temp3.x);\n"
"    _viv_asm(ARCTRIG1, arctrig3, arctrig3, 0x3);\n"
"    result.x = _viv_fma_float(arctrig0.x, vec4Temp0.x, arctrig0.y);\n"
"    result.y = _viv_fma_float(arctrig1.x, vec4Temp1.x, arctrig1.y);\n"
"    result.z = _viv_fma_float(arctrig2.x, vec4Temp2.x, arctrig2.y);\n"
"    result.w = _viv_fma_float(arctrig3.x, vec4Temp3.x, arctrig3.y);\n"
"    return result;\n"
"}\n"
"float8 _viv_atan2_float8(float8 y, float8 x)\n"
"{\n"
"    float8 result;\n"
"    result.s0123 = _viv_atan2_float4(y.s0123, x.s0123);\n"
"    result.s4567 = _viv_atan2_float4(y.s4567, x.s4567);\n"
"    return result;\n"
"}\n"
"float16 _viv_atan2_float16(float16 y, float16 x)\n"
"{\n"
"    float16 result;\n"
"    result.s0123 = _viv_atan2_float4(y.s0123, x.s0123);\n"
"    result.s4567 = _viv_atan2_float4(y.s4567, x.s4567);\n"
"    result.s89ab = _viv_atan2_float4(y.s89ab, x.s89ab);\n"
"    result.scdef = _viv_atan2_float4(y.scdef, x.scdef);\n"
"    return result;\n"
"}\n"
;

static gctSTRING gcCLLibLongMADSAT_Funcs =
NL "long _viv_mul_long(long x, long y)"
NL "{"
NL "    long r;"
NL "    uint lox, loy, hix, hiy,loz, hiz;"
NL "    lox = viv_getlonglo(x);"
NL "    hix = viv_getlonghi(x);"
NL "    loy = viv_getlonglo(y);"
NL "    hiy = viv_getlonghi(y);"
NL
NL "    loz = lox*loy; "
NL "    hiz = mul_hi(lox, loy); "
NL "    hiz += hix*loy; "
NL "    hiz += lox*hiy; "
NL "    viv_setlong(r, loz, hiz); "
NL
NL "    return r;"
NL "}"
NL "ulong _viv_mul_ulong(ulong x, ulong y)"
NL "{"
NL "    ulong r;"
NL "    uint lox, loy, hix, hiy,loz, hiz;"
NL "    lox = viv_getlonglo(x);"
NL "    hix = viv_getlonghi(x);"
NL "    loy = viv_getlonglo(y);"
NL "    hiy = viv_getlonghi(y);"
NL
NL "    loz = lox*loy; "
NL "    hiz = mul_hi(lox, loy); "
NL "    hiz += hix*loy; "
NL "    hiz += lox*hiy; "
NL "    viv_setlong(r, loz, hiz); "
NL
NL "    return r;"
NL "}"
NL
NL " long _viv_mulhi_long(long x, long y) "
NL " { "
NL "    unsigned int lox, loy, hix, hiy,loz, hiz; "
NL "    unsigned int mulH1L0, mulH0L1, mulHighL0L1, mulH0L1L, mulH1L0L, notV;"
NL "    long a; "
NL "    lox = viv_getlonglo(x); "
NL "    loy = viv_getlonglo(y); "
NL "    hix = viv_getlonghi(x); "
NL "    hiy = viv_getlonghi(y); "
NL "    hiz = mul_hi(hix, hiy); "
NL "    loz = hix*hiy; "
NL "    mulH0L1L = hix*loy; "
NL "    mulH1L0L = lox*hiy; "
NL "    mulHighL0L1 = mul_hi(lox, loy); "
NL "    mulH0L1 = mul_hi(hix, loy); "
NL "    notV = ~mulH0L1L; "
NL "    if(mulHighL0L1 >= notV){ "
NL "        mulH0L1++; "
NL "    } "
NL "    mulHighL0L1 += mulH0L1L; "
NL
NL "    mulH1L0 = mul_hi(lox, hiy); "
NL "    notV = ~mulH1L0L; "
NL "    if(mulHighL0L1 >= notV){ "
NL "        mulH1L0++; "
NL "    } "
NL
NL "    notV = ~mulH0L1; "
NL "    if(loz >= notV){ "
NL "        hiz++; "
NL "    } "
NL "    loz += mulH0L1; "
NL
NL "    notV = ~mulH1L0; "
NL "    if(loz >= notV){ "
NL "        hiz++; "
NL "    } "
NL "    loz += mulH1L0; "
NL "/* For negative input, it looks like extended -1 to bit 64~127, then we do substraction */"
NL "    if(hix >= 0x80000000){"
NL "        if(loz < loy) /*borrow happened*/ "
NL "            hiz--; "
NL "        loz -= loy; "
NL "        hiz -= hiy; "
NL "    }"
NL "    if(hiy >= 0x80000000){"
NL "        if(loz < lox) /*borrow happened*/ "
NL "            hiz--; "
NL "        loz -= lox; "
NL "        hiz -= hix; "
NL "    }"
NL "    viv_setlong(a, loz, hiz); "
NL "    return a; "
NL "} "
NL
NL " ulong _viv_mulhi_ulong(ulong x, ulong y) "
NL " { "
NL "    unsigned int lox, loy, hix, hiy,loz, hiz; "
NL "    unsigned int mulH1L0, mulH0L1, mulHighL0L1, mulH0L1L, mulH1L0L, notV;"
NL "    long a; "
NL "    lox = viv_getlonglo(x); "
NL "    loy = viv_getlonglo(y); "
NL "    hix = viv_getlonghi(x); "
NL "    hiy = viv_getlonghi(y); "
NL "    hiz = mul_hi(hix, hiy); "
NL "    loz = hix*hiy; "
NL "    mulH0L1L = hix*loy; "
NL "    mulH1L0L = lox*hiy; "
NL "    mulHighL0L1 = mul_hi(lox, loy); "
NL "    mulH0L1 = mul_hi(hix, loy); "
NL "    notV = ~mulH0L1L; "
NL "    if(mulHighL0L1 >= notV){ "
NL "        mulH0L1++; "
NL "    } "
NL "    mulHighL0L1 += mulH0L1L; "
NL "    "
NL "    mulH1L0 = mul_hi(lox, hiy); "
NL "    notV = ~mulH1L0L; "
NL "    if(mulHighL0L1 >= notV){ "
NL "        mulH1L0++; "
NL "    } "
NL
NL "    notV = ~mulH0L1; "
NL "    if(loz >= notV){ "
NL "        hiz++; "
NL "    } "
NL "    loz += mulH0L1; "
NL
NL "    notV = ~mulH1L0; "
NL "    if(loz >= notV){ "
NL "        hiz++; "
NL "    } "
NL "    loz += mulH1L0; "
NL "    viv_setlong(a, loz, hiz); "
NL "    return (ulong)a; "
NL "}"
NL
NL "long _viv_madsat_long(long x, long y, long z)"
NL "{"
NL "    long  mulhi;"
NL "    ulong mullo, sum;"
NL "    mullo = _viv_mul_long(x, y);"
NL "    mulhi = _viv_mulhi_long(x, y);"
NL "    sum = mullo + z;"
NL "    if (z >= 0)"
NL "    {"
NL "        if (mullo > sum)"
NL "        {"
NL "            mulhi++;"
NL "            if (mulhi == LONG_MIN)"
NL "            {"
NL "                mulhi = LONG_MAX;"
NL "                sum = ULONG_MAX;"
NL "            }"
NL "        }"
NL "    }"
NL "    else"
NL "    {"
NL "        if (mullo < sum)"
NL "        {"
NL "            mulhi--;"
NL "            if (LONG_MAX == mulhi)"
NL "            {"
NL "                mulhi = LONG_MIN;"
NL "                sum = 0;"
NL "            }"
NL "        }"
NL "    }"
NL
NL "    if (mulhi > 0)"
NL "        sum = LONG_MAX;"
NL "    else if (mulhi < -1)"
NL "        sum = LONG_MIN;"
NL
NL "    return (long)sum;"
NL "}"
NL
NL "ulong _viv_madsat_ulong(ulong x, ulong y, ulong z)"
NL "{"
NL "    ulong mulhi, mullo, sum;"
NL "    mullo = _viv_mul_ulong(x, y);"
NL "    mulhi = _viv_mulhi_ulong(x, y);"
NL "    mullo += z;"
NL "    if (mullo < z) mulhi++;"
NL "    if (mulhi != 0) mullo = 0xFFFFFFFFFFFFFFFFULL;"
NL "    return mullo;"
NL "}"
NL
NL "long2 _viv_madsat_long2(long2 x, long2 y, long2 z)"
NL "{"
NL "    long2 r;"
NL "    r.x = _viv_madsat_long(x.x, y.x, z.x);"
NL "    r.y = _viv_madsat_long(x.y, y.y, z.y);"
NL "    return r;"
NL "}"
NL
NL "ulong2 _viv_madsat_ulong2(ulong2 x, ulong2 y, ulong2 z)"
NL "{"
NL "    ulong2 r;"
NL "    r.x = _viv_madsat_ulong(x.x, y.x, z.x);"
NL "    r.y = _viv_madsat_ulong(x.y, y.y, z.y);"
NL "    return r;"
NL "}"
NL
NL "long3 _viv_madsat_long3(long3 x, long3 y, long3 z)"
NL "{"
NL "    long3 r;"
NL "    r.s0 = _viv_madsat_long(x.s0, y.s0, z.s0);"
NL "    r.s1 = _viv_madsat_long(x.s1, y.s1, z.s1);"
NL "    r.s2 = _viv_madsat_long(x.s2, y.s2, z.s2);"
NL "    return r;"
NL "}"
NL
NL "ulong3 _viv_madsat_ulong3(ulong3 x, ulong3 y, ulong3 z)"
NL "{"
NL "    ulong3 r;"
NL "    r.s0 = _viv_madsat_ulong(x.s0, y.s0, z.s0);"
NL "    r.s1 = _viv_madsat_ulong(x.s1, y.s1, z.s1);"
NL "    r.s2 = _viv_madsat_ulong(x.s2, y.s2, z.s2);"
NL "    return r;"
NL "}"
NL
NL "long4 _viv_madsat_long4(long4 x, long4 y, long4 z)"
NL "{"
NL "    long4 r;"
NL "    r.s0 = _viv_madsat_long(x.s0, y.s0, z.s0);"
NL "    r.s1 = _viv_madsat_long(x.s1, y.s1, z.s1);"
NL "    r.s2 = _viv_madsat_long(x.s2, y.s2, z.s2);"
NL "    r.s3 = _viv_madsat_long(x.s3, y.s3, z.s3);"
NL "    return r;"
NL "}"
NL
NL "ulong4 _viv_madsat_ulong4(ulong4 x, ulong4 y, ulong4 z)"
NL "{"
NL "    ulong4 r;"
NL "    r.s0 = _viv_madsat_ulong(x.s0, y.s0, z.s0);"
NL "    r.s1 = _viv_madsat_ulong(x.s1, y.s1, z.s1);"
NL "    r.s2 = _viv_madsat_ulong(x.s2, y.s2, z.s2);"
NL "    r.s3 = _viv_madsat_ulong(x.s3, y.s3, z.s3);"
NL "    return r;"
NL "}"
NL
NL "long8 _viv_madsat_long8(long8 x, long8 y, long8 z)"
NL "{"
NL "    long8 r;"
NL "    r.s0 = _viv_madsat_long(x.s0, y.s0, z.s0);"
NL "    r.s1 = _viv_madsat_long(x.s1, y.s1, z.s1);"
NL "    r.s2 = _viv_madsat_long(x.s2, y.s2, z.s2);"
NL "    r.s3 = _viv_madsat_long(x.s3, y.s3, z.s3);"
NL "    r.s4 = _viv_madsat_long(x.s4, y.s4, z.s4);"
NL "    r.s5 = _viv_madsat_long(x.s5, y.s5, z.s5);"
NL "    r.s6 = _viv_madsat_long(x.s6, y.s6, z.s6);"
NL "    r.s7 = _viv_madsat_long(x.s7, y.s7, z.s7);"
NL "    return r;"
NL "}"
NL
NL "ulong8 _viv_madsat_ulong8(ulong8 x, ulong8 y, ulong8 z)"
NL "{"
NL "    ulong8 r;"
NL "    r.s0 = _viv_madsat_ulong(x.s0, y.s0, z.s0);"
NL "    r.s1 = _viv_madsat_ulong(x.s1, y.s1, z.s1);"
NL "    r.s2 = _viv_madsat_ulong(x.s2, y.s2, z.s2);"
NL "    r.s3 = _viv_madsat_ulong(x.s3, y.s3, z.s3);"
NL "    r.s4 = _viv_madsat_ulong(x.s4, y.s4, z.s4);"
NL "    r.s5 = _viv_madsat_ulong(x.s5, y.s5, z.s5);"
NL "    r.s6 = _viv_madsat_ulong(x.s6, y.s6, z.s6);"
NL "    r.s7 = _viv_madsat_ulong(x.s7, y.s7, z.s7);"
NL "    return r;"
NL "}"
NL
NL "long16 _viv_madsat_long16(long16 x, long16 y, long16 z)"
NL "{"
NL "    long16 r;"
NL "    r.s0 = _viv_madsat_long(x.s0, y.s0, z.s0);"
NL "    r.s1 = _viv_madsat_long(x.s1, y.s1, z.s1);"
NL "    r.s2 = _viv_madsat_long(x.s2, y.s2, z.s2);"
NL "    r.s3 = _viv_madsat_long(x.s3, y.s3, z.s3);"
NL "    r.s4 = _viv_madsat_long(x.s4, y.s4, z.s4);"
NL "    r.s5 = _viv_madsat_long(x.s5, y.s5, z.s5);"
NL "    r.s6 = _viv_madsat_long(x.s6, y.s6, z.s6);"
NL "    r.s7 = _viv_madsat_long(x.s7, y.s7, z.s7);"
NL "    r.s8 = _viv_madsat_long(x.s8, y.s8, z.s8);"
NL "    r.s9 = _viv_madsat_long(x.s9, y.s9, z.s9);"
NL "    r.sa = _viv_madsat_long(x.sa, y.sa, z.sa);"
NL "    r.sb = _viv_madsat_long(x.sb, y.sb, z.sb);"
NL "    r.sc = _viv_madsat_long(x.sc, y.sc, z.sc);"
NL "    r.sd = _viv_madsat_long(x.sd, y.sd, z.sd);"
NL "    r.se = _viv_madsat_long(x.se, y.se, z.se);"
NL "    r.sf = _viv_madsat_long(x.sf, y.sf, z.sf);"
NL "    return r;"
NL "}"
NL
NL "ulong16 _viv_madsat_ulong16(ulong16 x, ulong16 y, ulong16 z)"
NL "{"
NL "    ulong16 r;"
NL "    r.s0 = _viv_madsat_ulong(x.s0, y.s0, z.s0);"
NL "    r.s1 = _viv_madsat_ulong(x.s1, y.s1, z.s1);"
NL "    r.s2 = _viv_madsat_ulong(x.s2, y.s2, z.s2);"
NL "    r.s3 = _viv_madsat_ulong(x.s3, y.s3, z.s3);"
NL "    r.s4 = _viv_madsat_ulong(x.s4, y.s4, z.s4);"
NL "    r.s5 = _viv_madsat_ulong(x.s5, y.s5, z.s5);"
NL "    r.s6 = _viv_madsat_ulong(x.s6, y.s6, z.s6);"
NL "    r.s7 = _viv_madsat_ulong(x.s7, y.s7, z.s7);"
NL "    r.s8 = _viv_madsat_ulong(x.s8, y.s8, z.s8);"
NL "    r.s9 = _viv_madsat_ulong(x.s9, y.s9, z.s9);"
NL "    r.sa = _viv_madsat_ulong(x.sa, y.sa, z.sa);"
NL "    r.sb = _viv_madsat_ulong(x.sb, y.sb, z.sb);"
NL "    r.sc = _viv_madsat_ulong(x.sc, y.sc, z.sc);"
NL "    r.sd = _viv_madsat_ulong(x.sd, y.sd, z.sd);"
NL "    r.se = _viv_madsat_ulong(x.se, y.se, z.se);"
NL "    r.sf = _viv_madsat_ulong(x.sf, y.sf, z.sf);"
NL "    return r;"
NL "}"
NL;

static gctSTRING gcCLLibLongNEXTAFTER_Funcs =
NL "float _viv_nextafter(float x, float y)"
NL "{"
NL "    int a, b;"
NL "    a = as_int(x);"
NL "    b = as_int(y);"
NL "    if((a == 0) && (b == 0x80000000)) return as_float(0x80000000);"
NL "    if((a == 0x80000000) && (b == 0)) return as_float(0x0);"
NL "    if(x != x ) return x;"
NL "    if(y != y ) return y;"
NL "    if(a == b ) return y;"
NL "    if(a & 0x80000000 ) a = 0x80000000 - a;"
NL "    if(b & 0x80000000 ) b = 0x80000000 - b;"
NL "    a += ((a < b) ? 1 : -1);"
NL "    a = ((a < 0) ? (int) 0x80000000 - a : a);"
NL "    if (((a & 0x7f800000) == 0) && (a & 0x7fffffff)) a &= ~0x7f800000;"
NL "    return as_float(a);"
NL "}"
NL;

/*****************************
   image descriptor:  uint8
   s0: base address of image data
   s1: stride of a row of the image
   s2: image size
       [15:0]: width (U16)
       [31:16]: height (U16)
   s3: image properties
       [2:0]: shift (for calculation of bpp)
       [3:3]: multiply (for calculation of bpp)
          0: ONE
          1: THREE
       [5:4]: addressing mode
          0: NONE   // Currently aliases to BORDER0.
          1: BORDER0    (0,0,0,0)
          2: BORDER1    (0,0,0,1) or (0,0,0,1.0), depending on image format.
       [9:6]: image format
       [11:10]: tiling mode
          0: LINEAR
          1: TILED
          2: SUPER_TILED
       [12:12]: image type
       [15:14]: component count (packed formats are treated as 1 component)
                0: 4 components
                1: 1 component
                2: 2 components
                3: 3 components
       [18:16]: swizzle_r
       [22:20]: swizzle_g
       [26:24]: swizzle_b
       [30:28]: swizzle_a
   s4: size of an 2-D image in a 2-D image array or slice size of 2-D layer in a 3-D image
   s5: depth of 3-D image or array size of 1-D/2-D array.
   s6: image format
       [0:15]: channel order
       [16:31]: channel data type
****************************/

static gctSTRING gcCLLibImageQuery_Funcs_UseImgInst =
NL "int _viv_get_image_width_image1d_t(uint8 image)"
NL "{"
NL "    return image.s2 & 0xFFFF;"
NL "}"
NL
NL "int _viv_get_image_width_image2d_t(uint8 image)"
NL "{"
NL "    return image.s2 & 0xFFFF;"
NL "}"
NL
NL "int _viv_get_image_width_image3d_t(uint8 image)"
NL "{"
NL "    return image.s2 & 0xFFFF;"
NL "}"
NL
NL "int _viv_get_image_width_image1d_array_t(uint8 image)"
NL "{"
NL "    return image.s2 & 0xFFFF;"
NL "}"
NL
NL "int _viv_get_image_width_image2d_array_t(uint8 image)"
NL "{"
NL "    return image.s2 & 0xFFFF;"
NL "}"
NL
NL "int _viv_get_image_width_image1d_buffer_t(uint8 image)"
NL "{"
NL "    return image.s2 & 0xFFFF;"
NL "}"
NL
NL "int _viv_get_image_height_image2d_t(uint8 image)"
NL "{"
NL "    return (image.s2 >> 16) & 0xFFFF;"
NL "}"
NL
NL "int _viv_get_image_height_image2d_array_t(uint8 image)"
NL "{"
NL "    return (image.s2 >> 16) & 0xFFFF;"
NL "}"
NL
NL "int _viv_get_image_height_image3d_t(uint8 image)"
NL "{"
NL "    return (image.s2 >> 16) & 0xFFFF;"
NL "}"
NL
NL "int _viv_get_image_depth_image3d_t(uint8 image)"
NL "{"
NL "    return image.s5;"
NL "}"
NL
NL "int2 _viv_get_image_dim_image2d_t(uint8 image)"
NL "{"
NL "    return (int2) (image.s2 & 0xFFFF, (image.s2 >> 16) & 0xFFFF);"
NL "}"
NL
NL "int4 _viv_get_image_dim_image3d_t(uint8 image)"
NL "{"
NL "    return (int4) (image.s2 & 0xFFFF, (image.s2 >> 16) & 0xFFFF, image.s5, 0);"
NL "}"
NL
NL "int2 _viv_get_image_dim_image2d_array_t(uint8 image)"
NL "{"
NL "    return (int2) (image.s2 & 0xFFFF, (image.s2 >> 16) & 0xFFFF);"
NL "}"
NL
NL "int _viv_get_image_channel_order_image1d_t(uint8 image)"
NL "{"
NL "    return image.s6 & 0xFFFF;"
NL "}"
NL
NL "int _viv_get_image_channel_order_image2d_t(uint8 image)"
NL "{"
NL "    return image.s6 & 0xFFFF;"
NL "}"
NL
NL "int _viv_get_image_channel_order_image3d_t(uint8 image)"
NL "{"
NL "    return image.s6 & 0xFFFF;"
NL "}"
NL
NL "int _viv_get_image_channel_order_image1d_array_t(uint8 image)"
NL "{"
NL "    return image.s6 & 0xFFFF;"
NL "}"
NL
NL "int _viv_get_image_channel_order_image2d_array_t(uint8 image)"
NL "{"
NL "    return image.s6 & 0xFFFF;"
NL "}"
NL
NL "int _viv_get_image_channel_order_image1d_buffer_t(uint8 image)"
NL "{"
NL "    return image.s6 & 0xFFFF;"
NL "}"
NL
NL "int _viv_get_image_channel_data_type_image1d_t(uint8 image)"
NL "{"
NL "    return (image.s6 >> 16) & 0xFFFF;"
NL "}"
NL
NL "int _viv_get_image_channel_data_type_image2d_t(uint8 image)"
NL "{"
NL "    return (image.s6 >> 16) & 0xFFFF;"
NL "}"
NL
NL "int _viv_get_image_channel_data_type_image3d_t(uint8 image)"
NL "{"
NL "    return (image.s6 >> 16) & 0xFFFF;"
NL "}"
NL
NL "int _viv_get_image_channel_data_type_image1d_array_t(uint8 image)"
NL "{"
NL "    return (image.s6 >> 16) & 0xFFFF;"
NL "}"
NL
NL "int _viv_get_image_channel_data_type_image2d_array_t(uint8 image)"
NL "{"
NL "    return (image.s6 >> 16) & 0xFFFF;"
NL "}"
NL
NL "int _viv_get_image_channel_data_type_image1d_buffer_t(uint8 image)"
NL "{"
NL "    return (image.s6 >> 16) & 0xFFFF;"
NL "}"
NL
NL "int _viv_get_image_array_size_image1d_array_t(uint8 image)"
NL "{"
NL "    return image.s5;"
NL "}"
NL
NL "int _viv_get_image_array_size_image2d_array_t(uint8 image)"
NL "{"
NL "    return image.s5;"
NL "}"
NL;

/* Description of the image header:
    struct _cl_image_header
    {
        int                  width;
        int                  height;
        int                  depth;
        int                  channelDataType;
        int                  channelOrder;
        int                  samplerValue;
        int                  rowPitch;
        int                  slicePitch;
        int                  textureNum;
        int*                 physical;
     };
*/

static gctSTRING gcCLLibImageQuery_Funcs =
NL "int _viv_get_image_width_image1d_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return *imghdr;"
NL "}"
NL
NL "int _viv_get_image_width_image2d_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return *imghdr;"
NL "}"
NL
NL "int _viv_get_image_width_image3d_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return *imghdr;"
NL "}"
NL
NL "int _viv_get_image_width_image1d_array_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return *imghdr;"
NL "}"
NL
NL "int _viv_get_image_width_image2d_array_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return *imghdr;"
NL "}"
NL
NL "int _viv_get_image_width_image1d_buffer_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return *imghdr;"
NL "}"
NL
NL "int _viv_get_image_height_image2d_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return imghdr[1];"
NL "}"
NL
NL "int _viv_get_image_height_image2d_array_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return imghdr[1];"
NL "}"
NL
NL "int _viv_get_image_height_image3d_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return imghdr[1];"
NL "}"
NL
NL "int _viv_get_image_depth_image3d_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return imghdr[2];"
NL "}"
NL
NL "int2 _viv_get_image_dim_image2d_t(uint8 image)"
NL "{"
NL "    uint2 *imghdr = (uint2 *) image.s0;"
NL "    return (int2)((*imghdr).x, (*imghdr).y);"
NL "}"
NL
NL "int4 _viv_get_image_dim_image3d_t(uint8 image)"
NL "{"
NL "    uint4 *imghdr = (uint4 *) image.s0;"
NL "    return (int4)((*imghdr).x, (*imghdr).y, (*imghdr).z, 0);"
NL "}"
NL
NL "int2 _viv_get_image_dim_image2d_array_t(uint8 image)"
NL "{"
NL "    uint2 *imghdr = (uint2 *) image.s0;"
NL "    return (int2)((*imghdr).x, (*imghdr).y);"
NL "}"
NL
NL "int _viv_get_image_channel_order_image1d_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return imghdr[4];"
NL "}"
NL
NL "int _viv_get_image_channel_order_image2d_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return imghdr[4];"
NL "}"
NL
NL "int _viv_get_image_channel_order_image3d_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return imghdr[4];"
NL "}"
NL
NL "int _viv_get_image_channel_order_image1d_array_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return imghdr[4];"
NL "}"
NL
NL "int _viv_get_image_channel_order_image2d_array_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return imghdr[4];"
NL "}"
NL
NL "int _viv_get_image_channel_order_image1d_buffer_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return imghdr[4];"
NL "}"
NL
NL "int _viv_get_image_channel_data_type_image1d_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return imghdr[3];"
NL "}"
NL
NL "int _viv_get_image_channel_data_type_image2d_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return imghdr[3];"
NL "}"
NL
NL "int _viv_get_image_channel_data_type_image3d_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return imghdr[3];"
NL "}"
NL
NL "int _viv_get_image_channel_data_type_image1d_array_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return imghdr[3];"
NL "}"
NL
NL "int _viv_get_image_channel_data_type_image2d_array_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return imghdr[3];"
NL "}"
NL
NL "int _viv_get_image_channel_data_type_image1d_buffer_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return imghdr[3];"
NL "}"
NL
NL "int _viv_get_image_array_size_image1d_array_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return imghdr[8];"
NL "}"
NL
NL "int _viv_get_image_array_size_image2d_array_t(uint8 image)"
NL "{"
NL "    uint *imghdr = (uint *) image.s0;"
NL "    return imghdr[8];"
NL "}"
NL;
#endif

#undef NL
#ifdef _CL_LOCALLY_SET
#undef __BUILTIN_SHADER_LENGTH__
#endif
#endif /* __gc_vsc_cl_builtin_lib_h_ */

