##############################################################################
#
#    Copyright (c) 2005 - 2018 by Vivante Corp.  All rights reserved.
#
#    The material in this file is confidential and contains trade secrets
#    of Vivante Corporation. This is proprietary information owned by
#    Vivante Corporation. No part of this work may be disclosed,
#    reproduced, copied, transmitted, or used in any way for any purpose,
#    without the express written permission of Vivante Corporation.
#
##############################################################################



#
# Linux build file for libLLVM library.
#

################################################################################
# Include common definitions.

include ./makefile.linux.def

ifeq ($(gcdSTATIC_LINK), 1)
    STATIC = 1
else
    DYNAMIC = 1
endif

################################################################################
# Define a shortcut for the main target.

ifeq ($(STATIC), 1)
    TARGET_NAME = libLLVM_viv.a
else
    TARGET_NAME = libLLVM_viv.so
endif

ifndef FIXED_ARCH_TYPE
################################################################################
# Supply additional include directories.

CFLAGS	+=	$(INCLUDE) $(CDEFS)

################################################################################
# Add extra flags for object files.

ifneq ($(USE_ARMCC), 1)
CFLAGS += -fPIC -w
LFLAGS += -Wl,--version-script=libLLVM.map
endif

################################################################################
# Describe object files.

# clangFrontendTool
OBJECTS := $(OBJ_DIR)/ExecuteCompilerInvocation.o

# clangFrontEnd
OBJECTS += \
	$(OBJ_DIR)/CacheTokens.o \
	$(OBJ_DIR)/CompilerInstance.o \
	$(OBJ_DIR)/CompilerInvocation.o \
	$(OBJ_DIR)/FrontendAction.o \
	$(OBJ_DIR)/FrontendActions.o \
	$(OBJ_DIR)/FrontendOptions.o \
	$(OBJ_DIR)/InitHeaderSearch.o \
	$(OBJ_DIR)/InitPreprocessor.o \
	$(OBJ_DIR)/LangStandards.o \
	$(OBJ_DIR)/PrintPreprocessedOutput.o \
	$(OBJ_DIR)/TextDiagnosticBuffer.o \
	$(OBJ_DIR)/TextDiagnosticPrinter.o \
	$(OBJ_DIR)/VerifyDiagnosticsClient.o \
	$(OBJ_DIR)/Warnings.o

# clangBasic
OBJECTS += \
	$(OBJ_DIR)/Builtins.o \
	$(OBJ_DIR)/Diagnostic.o \
	$(OBJ_DIR)/FileManager.o \
	$(OBJ_DIR)/IdentifierTable.o \
	$(OBJ_DIR)/SourceLocation.o \
	$(OBJ_DIR)/SourceManager.o \
	$(OBJ_DIR)/TargetInfo.o \
	$(OBJ_DIR)/Targets.o \
	$(OBJ_DIR)/TokenKinds.o \
	$(OBJ_DIR)/Version.o

# clangDriver
OBJECTS += \
	$(OBJ_DIR)/Action.o \
	$(OBJ_DIR)/Arg.o \
	$(OBJ_DIR)/ArgList.o \
	$(OBJ_DIR)/CC1AsOptions.o \
	$(OBJ_DIR)/CC1Options.o \
	$(OBJ_DIR)/Compilation.o \
	$(OBJ_DIR)/Driver.o \
	$(OBJ_DIR)/DriverOptions.o \
	$(OBJ_DIR)/HostInfo.o \
	$(OBJ_DIR)/Job.o \
	$(OBJ_DIR)/Option.o \
	$(OBJ_DIR)/OptTable.o \
	$(OBJ_DIR)/Phases.o \
	$(OBJ_DIR)/ToolChain.o \
	$(OBJ_DIR)/ToolChains.o \
	$(OBJ_DIR)/Tool.o \
	$(OBJ_DIR)/Tools.o \
	$(OBJ_DIR)/Types.o

# clangLex
OBJECTS += \
	$(OBJ_DIR)/HeaderMap.o \
	$(OBJ_DIR)/HeaderSearch.o \
	$(OBJ_DIR)/Lexer.o \
	$(OBJ_DIR)/LiteralSupport.o \
	$(OBJ_DIR)/MacroArgs.o \
	$(OBJ_DIR)/MacroInfo.o \
	$(OBJ_DIR)/PPCaching.o \
	$(OBJ_DIR)/PPDirectives.o \
	$(OBJ_DIR)/PPExpressions.o \
	$(OBJ_DIR)/PPLexerChange.o \
	$(OBJ_DIR)/PPMacroExpansion.o \
	$(OBJ_DIR)/Pragma.o \
	$(OBJ_DIR)/PreprocessingRecord.o \
	$(OBJ_DIR)/Preprocessor.o \
	$(OBJ_DIR)/PreprocessorLexer.o \
	$(OBJ_DIR)/PTHLexer.o \
	$(OBJ_DIR)/ScratchBuffer.o \
	$(OBJ_DIR)/TokenConcatenation.o \
	$(OBJ_DIR)/TokenLexer.o

# llvmSupport
OBJECTS += \
	$(OBJ_DIR)/Allocator.o \
	$(OBJ_DIR)/APFloat.o \
	$(OBJ_DIR)/APInt.o \
	$(OBJ_DIR)/APSInt.o \
	$(OBJ_DIR)/circular_raw_ostream.o \
	$(OBJ_DIR)/CommandLine.o \
	$(OBJ_DIR)/ConstantRange.o \
	$(OBJ_DIR)/CrashRecoveryContext.o \
	$(OBJ_DIR)/DAGDeltaAlgorithm.o \
	$(OBJ_DIR)/Debug.o \
	$(OBJ_DIR)/DeltaAlgorithm.o \
	$(OBJ_DIR)/Dwarf.o \
	$(OBJ_DIR)/ErrorHandling.o \
	$(OBJ_DIR)/FileUtilities.o \
	$(OBJ_DIR)/FoldingSet.o \
	$(OBJ_DIR)/FormattedStream.o \
	$(OBJ_DIR)/GraphWriter.o \
	$(OBJ_DIR)/IsInf.o \
	$(OBJ_DIR)/IsNAN.o \
	$(OBJ_DIR)/ManagedStatic.o \
	$(OBJ_DIR)/MemoryBuffer.o \
	$(OBJ_DIR)/MemoryObject.o \
	$(OBJ_DIR)/PluginLoader.o \
	$(OBJ_DIR)/PrettyStackTrace.o \
	$(OBJ_DIR)/raw_os_ostream.o \
	$(OBJ_DIR)/raw_ostream.o \
	$(OBJ_DIR)/regcomp.o \
	$(OBJ_DIR)/regerror.o \
	$(OBJ_DIR)/regexec.o \
	$(OBJ_DIR)/regfree.o \
	$(OBJ_DIR)/regstrlcpy.o \
	$(OBJ_DIR)/Regex.o \
	$(OBJ_DIR)/SmallPtrSet.o \
	$(OBJ_DIR)/SmallVector.o \
	$(OBJ_DIR)/SourceMgr.o \
	$(OBJ_DIR)/Statistic.o \
	$(OBJ_DIR)/StringExtras.o \
	$(OBJ_DIR)/StringMap.o \
	$(OBJ_DIR)/StringPool.o \
	$(OBJ_DIR)/StringRef.o \
	$(OBJ_DIR)/SystemUtils.o \
	$(OBJ_DIR)/TargetRegistry.o \
	$(OBJ_DIR)/Timer.o \
	$(OBJ_DIR)/Triple.o \
	$(OBJ_DIR)/Twine.o

# llvmSystem
OBJECTS += \
	$(OBJ_DIR)/Alarm.o \
	$(OBJ_DIR)/Atomic.o \
	$(OBJ_DIR)/Disassembler.o \
	$(OBJ_DIR)/DynamicLibrary.o \
	$(OBJ_DIR)/Errno.o \
	$(OBJ_DIR)/Host.o \
	$(OBJ_DIR)/IncludeFile.o \
	$(OBJ_DIR)/Memory.o \
	$(OBJ_DIR)/Mutex.o \
	$(OBJ_DIR)/Path.o \
	$(OBJ_DIR)/Process.o \
	$(OBJ_DIR)/Program.o \
	$(OBJ_DIR)/RWMutex.o \
	$(OBJ_DIR)/SearchForAddressOfSpecialSymbol.o \
	$(OBJ_DIR)/Signals.o \
	$(OBJ_DIR)/Threading.o \
	$(OBJ_DIR)/ThreadLocal.o \
	$(OBJ_DIR)/TimeValue.o \
	$(OBJ_DIR)/Valgrind.o

# llvmCore
OBJECTS += \
	$(OBJ_DIR)/LLVMContext.o \
	$(OBJ_DIR)/LLVMContextImpl.o

################################################################################
# Additional libraries.

A		:=	$(CLC_DIR)/compiler/$(OBJ_DIR)/libclCompiler.a
A		+=	$(CLC_DIR)/preprocessor/$(OBJ_DIR)/libclPreprocessor.a
A		+=	$(CLC_DIR)/common/$(OBJ_DIR)/libclCommon.a

LIBS	+=	$(A)

LIBS	+=	-L$(CLC_DIR)/../libVSC/$(OBJ_DIR) -lVSC
LIBS	+=	-L$(GAL_DIR)/user/$(OBJ_DIR) -lGAL
LIBS	+=	-lm -lpthread -lstdc++ -ldl
endif

################################################################################
# Define the macros used in common makefile.

INSTALL_DIR	:= $(SDK_DIR)/drivers

ifndef FIXED_ARCH_TYPE
################################################################################
# Include the common makefile.

include $(AQROOT)/common.target

################################################################################
# Extra source code.

vpath %.cpp tools/clang/lib/FrontendTool
vpath %.cpp tools/clang/lib/Frontend
vpath %.cpp tools/clang/lib/Basic
vpath %.cpp tools/clang/lib/Driver
vpath %.cpp tools/clang/lib/Lex
vpath %.cpp lib/Support
vpath %.c   lib/Support
vpath %.cpp lib/System
vpath %.cpp lib/VMCore

else
OBJECTS :=

clean: rmfile

install: cpfile

.PHONY: cpfile rmfile
cpfile:
	@-cp -f $(FIXED_ARCH_TYPE)/$(TARGET_NAME) $(INSTALL_DIR)

rmfile:
	@-rm -f $(INSTALL_DIR)/$(TARGET_NAME)

endif

